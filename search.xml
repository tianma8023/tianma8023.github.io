<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Lifecycle 源码分析</title>
      <link href="/post/source-code-analysis-android-lifecycles/"/>
      <url>/post/source-code-analysis-android-lifecycles/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1 id="Lifecycle-源码解析"><a href="#Lifecycle-源码解析" class="headerlink" title="Lifecycle 源码解析"></a>Lifecycle 源码解析</h1><p>SafeIterableMap - 本质上是一个双链表伪装成的 Map，支持在遍历时候的修改(删除)操作</p><p>FastSafeIterableMap - 继承自 SafeIterableMap ，使用 HashMap 存取数据，速度更快，但同时占用内存也更大</p><p>Lifecycle 枚举常量：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Event &#123;</span><br><span class="line">    <span class="comment">// LifecycleOwner 的 onCreate 事件</span></span><br><span class="line">    ON_CREATE,</span><br><span class="line">    <span class="comment">// LifecycleOwner 的 onStart 事件</span></span><br><span class="line">    ON_START,</span><br><span class="line">    <span class="comment">// LifecycleOwner 的 onResume 事件</span></span><br><span class="line">    ON_RESUME,</span><br><span class="line">    <span class="comment">// LifecycleOwner 的 onPause 事件</span></span><br><span class="line">    ON_PAUSE,</span><br><span class="line">    <span class="comment">// LifecycleOwner 的 onStop 事件</span></span><br><span class="line">    ON_STOP,</span><br><span class="line">    <span class="comment">// LifecycleOwner 的 onDestroy 事件</span></span><br><span class="line">    ON_DESTROY,</span><br><span class="line">    <span class="comment">// ANY事件 能匹配以上所有事件</span></span><br><span class="line">    ON_ANY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><a id="more"></a><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lifecycle 对象跟踪的组件（即 LifecycleOwner ）当前的状态</span></span><br><span class="line"><span class="keyword">enum</span> State &#123;</span><br><span class="line">    <span class="comment">// LifecycleOwner 的 DESTROYED 状态，到达这个事件后，当前生命周期不会再发送其他事件。</span></span><br><span class="line">    <span class="comment">// 对于 Activity 来说，Activity#onDestroy() 调用之后，就是 DESTROYED 状态</span></span><br><span class="line">    DESTROYED,</span><br><span class="line">    <span class="comment">// LifecycleOwner 的初始状态。对于 Activity 来说，在 Activity 构造之后，在 Activity#onCreate() 之前的状态就是 INITIALIZED</span></span><br><span class="line">    INITIALIZED,</span><br><span class="line">    <span class="comment">// LifecycleOwner CREATED 状态，对于 Activity 来说，在以下两种情况下会到达此状态:</span></span><br><span class="line">    <span class="comment">// 1. 在 Activity#onCreate() 调用之后</span></span><br><span class="line">    <span class="comment">// 2. 在 Activity#onStop() 调用之前</span></span><br><span class="line">    CRETED,</span><br><span class="line">    <span class="comment">// LifecycleOwner STARTED 状态。对于 Activity 来说，在以下两种情况下回到达此状态:</span></span><br><span class="line">    <span class="comment">// 1. 在 Activity#onStart() 调用之后</span></span><br><span class="line">    <span class="comment">// 2. 在 Activity#onPause() 调用之前</span></span><br><span class="line">    STARTED,</span><br><span class="line">    <span class="comment">// LifecycleOwner RESUME 状态。对于 Activity 来说，在 Activity#onResume() 调用之后就是 RESUMED 状态</span></span><br><span class="line">    RESUMED;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断当前状态是否至少是指定状态</span></span><br><span class="line">    <span class="comment">// RESUMED &gt; STARTED &gt; CREATED &gt; INITIALIZED &gt; DESTROYED</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAtLeast</span><span class="params">(@NonNull State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> compare(state) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Event 是一种事件，是一种过程，好比是一条线段，State 是一个状态，好比是一个点。线段两端是点，两点之间是线段。<br>所以对于 Activity 来说，其生命周期状态和事件关系如下图:</p><img alt="Activity生命周期状态与事件关系图" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/activity_lifecycle_events_states.svg"><p>Lifecycle 抽象类:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生命周期对象</span></span><br><span class="line"><span class="comment">// 事件 Event#ON_CREATE, Event#ON_START, Event#ON_RESUME 会在 LifecycleOwner 对应的方法返回之后发送</span></span><br><span class="line"><span class="comment">// 事件 Event#ON_PAUSE, Event#ON_STOP, Event#ON_DESTROY 会在 LifecycleOwner 调用之前被发送</span></span><br><span class="line"><span class="comment">// 比如: Event#ON_START 会在 Activity#onStart() 方法返回的时候发送； Event#ON_STOP 会在 Activity#onStop() 方法调用前发送</span></span><br><span class="line"><span class="comment">// 这样就保证了，观察者在观察的事件周期一定在 LifecycleOwner 生命周期内</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将指定 LifecycleObserver 添加到观察者列表中去</span></span><br><span class="line">    <span class="comment">// 当 LifecyclerOwner 发生变化的时候，会通知 LifecycleObserver</span></span><br><span class="line">    <span class="comment">// 注意: 参数 LifecycleObserver 的状态会带到当前 LifecycleOwner 的状态</span></span><br><span class="line">    <span class="comment">// 举个栗子：如果 LifecyleOwner 状态是 State#STARTED，当添加 LifecycleObserver </span></span><br><span class="line">    <span class="comment">// 之后，会接收到事件: Event#ON_CREATE 和 EVENT#ON_START</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(LifecycleObserver observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将指定 LifecycleObserver 从观察者列表中移除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(LifecycleObserver observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前生命周期状态</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> State <span class="title">getCurrentState</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>LifecycleOwner 接口代表拥有生命周期的组件，例如 androidx.fragment.app.FragmentActivity，androidx.fragment.app.Fragment 都实现了该接口。当然也可以自己定义拥有生命周期的组件来作为 LifecyleOwner。</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">LifecycleOwner</span> </span>&#123;</span><br><span class="line">    <span class="function">Lifecycle <span class="title">getLifecycle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Lifecycle 是一个抽象类，其方法诸如 addObserver 等定义了方法规范，其实际实现类是 LifecycleRegistry。 该类可以处理多个观察者。</p><p>添加 Observer: </p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifecycleRegistry</span> <span class="keyword">extends</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FastSafeIterableMap - 支持在遍历过程中增删元素的双向链表</span></span><br><span class="line">    <span class="comment">// 这个 mObserverMap 元素中，恒成立的是：如果 addtion_order(observer1) &lt; addtion_order(observer2)</span></span><br><span class="line">    <span class="comment">// 则 state(observer1) &gt;= state(observer2)</span></span><br><span class="line">    <span class="comment">// 即如果把所有 observer 组成的队列的 State 看成是一个数列，那么这个数列是非递增数列</span></span><br><span class="line">    <span class="keyword">private</span> FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap =</span><br><span class="line">            <span class="keyword">new</span> FastSafeIterableMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(@NonNull LifecycleObserver observer)</span> </span>&#123;</span><br><span class="line">        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class="line">        <span class="comment">// 1. 将传入的 LifecyleObserver 对象包装成 ObserverWithState 对象</span></span><br><span class="line">        ObserverWithState statefulObserver = <span class="keyword">new</span> ObserverWithState(observer, initialState);</span><br><span class="line">        <span class="comment">// 2. 如果当前 observer 没有被添加，则将其添加到队列中；如果已添加则 return</span></span><br><span class="line">        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class="line">        <span class="keyword">if</span> (lifecycleOwner == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// it is null we should be destroyed. Fallback quickly</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isReentrance = mAddingObserverCounter != <span class="number">0</span> || mHandlingEvent;</span><br><span class="line">        State targetState = calculateTargetState(observer);</span><br><span class="line">        mAddingObserverCounter++;</span><br><span class="line">        <span class="comment">// 3. 将参数 LifecycleObserver 的状态带到当前 LifecycleOwner 的状态</span></span><br><span class="line">        <span class="keyword">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class="number">0</span></span><br><span class="line">                &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class="line">            pushParentState(statefulObserver.mState);</span><br><span class="line">            statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class="line">            popParentState();</span><br><span class="line">            <span class="comment">// mState / subling may have been changed recalculate</span></span><br><span class="line">            targetState = calculateTargetState(observer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isReentrance) &#123;</span><br><span class="line">            <span class="comment">// we do sync only on the top level.</span></span><br><span class="line">            <span class="comment">// 4. 同步整个观察者队列中的状态</span></span><br><span class="line">            sync();</span><br><span class="line">        &#125;</span><br><span class="line">        mAddingObserverCounter--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>注释1，ObserverWithState 是 LifecycleRegistry 的静态内部类</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverWithState</span> </span>&#123;</span><br><span class="line">    State mState;</span><br><span class="line">    LifecycleEventObserver mLifecycleObserver;</span><br><span class="line"></span><br><span class="line">    ObserverWithState(LifecycleObserver observer, State initialState) &#123;</span><br><span class="line">        <span class="comment">// 5. 通过 Lifecycling#lifecycleEventObserver 方法将 LifecycleObserver 转换成 LifecycleEventObserver</span></span><br><span class="line">        mLifecycleObserver = Lifecycling.lifecycleEventObserver(observer);</span><br><span class="line">        mState = initialState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LifecyeleEventObserver 继承自 LifecycleObserver，能接收任何生命周期的变化。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecyeleEventObserver</span> <span class="keyword">extends</span> <span class="title">LifecycleObserver</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(LifecycleOwner source, Lifecycle.Event event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>注释5：Lifecycling#lifecycleEventObserver 方法</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> LifecycleEventObserver <span class="title">lifecycleEventObserver</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isLifecycleEventObserver = object <span class="keyword">instanceof</span> LifecycleEventObserver;</span><br><span class="line">    <span class="keyword">boolean</span> isFullLifecycleObserver = object <span class="keyword">instanceof</span> FullLifecycleObserver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果参数 object 是 LifecycleEventObserver 也是 FullLifecycleObserver，则返回 FullLifecycleObserverAdapter</span></span><br><span class="line">    <span class="keyword">if</span> (isLifecycleEventObserver &amp;&amp; isFullLifecycleObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FullLifecycleObserverAdapter((FullLifecycleObserver) object,</span><br><span class="line">                (LifecycleEventObserver) object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 object 是 FullLifecycleObserver, 则返回 FullLifecycleObserverAdapter</span></span><br><span class="line">    <span class="keyword">if</span> (isFullLifecycleObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FullLifecycleObserverAdapter((FullLifecycleObserver) object, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 object 是 LifecycleEventObserver，则返回 LifecycleEventObserver</span></span><br><span class="line">    <span class="keyword">if</span> (isLifecycleEventObserver) &#123;</span><br><span class="line">        <span class="keyword">return</span> (LifecycleEventObserver) object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt; klass = object.getClass();</span><br><span class="line">    <span class="comment">// 判断 Observer 构造器类型，有两个返回值 GENERATED_CALLBACK(注解生成器类型) 和 REFLECTIVE_CALLBACK (反射类型)</span></span><br><span class="line">    <span class="keyword">int</span> type = getObserverConstructorType(klass);</span><br><span class="line">    <span class="keyword">if</span> (type == GENERATED_CALLBACK) &#123;</span><br><span class="line">        List&lt;Constructor&lt;? extends GeneratedAdapter&gt;&gt; constructors =</span><br><span class="line">                sClassToAdapters.get(klass);</span><br><span class="line">        <span class="keyword">if</span> (constructors.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            GeneratedAdapter generatedAdapter = createGeneratedAdapter(</span><br><span class="line">                    constructors.get(<span class="number">0</span>), object);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SingleGeneratedAdapterObserver(generatedAdapter);</span><br><span class="line">        &#125;</span><br><span class="line">        GeneratedAdapter[] adapters = <span class="keyword">new</span> GeneratedAdapter[constructors.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructors.size(); i++) &#123;</span><br><span class="line">            adapters[i] = createGeneratedAdapter(constructors.get(i), object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CompositeGeneratedAdaptersObserver(adapters);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 基于反射调用的 LifecycleEventObserver</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ReflectiveGenericLifecycleObserver(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>发送 Event 事件：<br>继承关系:<br>AppCompatActivity -&gt; FragmentActivity -&gt; androidx.fragment.app.ComponentActivity</p><p>androidx.fragment.app.ComponentActivity#onCreate()</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    mSavedStateRegistryController.performRestore(savedInstanceState);</span><br><span class="line">    <span class="comment">// 6. 在必要情况下，注入一个 ReportFragment</span></span><br><span class="line">    ReportFragment.injectIfNeededIn(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (mContentLayoutId != <span class="number">0</span>) &#123;</span><br><span class="line">        setContentView(mContentLayoutId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>ReportFragment#injectIfNeededIn(this)</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReportFragment</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectIfNeededIn</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">29</span>) &#123;</span><br><span class="line">            <span class="comment">// API 29+，即 Android 10 及以上，通过 activity 注册 ActivityLifecycleCallbacks 来实现对 Activity 生命周期的监听</span></span><br><span class="line">            activity.registerActivityLifecycleCallbacks(</span><br><span class="line">                    <span class="keyword">new</span> LifecycleCallbacks());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在当前 Activity 中生成一个空的 ReportFragment, 通过 ReportFragment 的生命周期事件来对 Lifecycle.Event 事件进行分发</span></span><br><span class="line">        android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class="line">        <span class="keyword">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            manager.beginTransaction().add(<span class="keyword">new</span> ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class="line">            <span class="comment">// Hopefully, we are the first to make a transaction.</span></span><br><span class="line">            manager.executePendingTransactions();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// API 29+ </span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleCallbacks</span> <span class="keyword">implements</span> <span class="title">Application</span>.<span class="title">ActivityLifecycleCallbacks</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPostCreated</span><span class="params">(@NonNull Activity activity,</span></span></span><br><span class="line"><span class="function"><span class="params">                @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">            dispatch(activity, Lifecycle.Event.ON_CREATE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//... 其他方法实现省略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(@NonNull Activity activity, @NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 兼容之前 android.support.v7.app.AppCompatActivity</span></span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class="line">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleOwner) &#123;</span><br><span class="line">            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class="line">            <span class="keyword">if</span> (lifecycle <span class="keyword">instanceof</span> LifecycleRegistry) &#123;</span><br><span class="line">                <span class="comment">// 7. 调用 LifecycleRegistry#handleLifecycleEvent() 对 Lifecycle.Event 事件进行分发</span></span><br><span class="line">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        dispatchCreate(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(@NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">29</span>) &#123;</span><br><span class="line">            <span class="comment">// API 29+ 已经通过 registerActivityLifecycleCallbacks 的方式实现了对 Activity 生命周期的监听</span></span><br><span class="line">            dispatch(getActivity(), event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>LifecycleRegistry#handleLifecycleEvent() 对 Lifecyle.Event 事件进行分发:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLifecycleEvent</span><span class="params">(@NonNull Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">    State next = getStateAfter(event);</span><br><span class="line">    <span class="comment">// 将当前 LifecycleOwner 中的 Observer 列表中的状态移至指定状态</span></span><br><span class="line">    moveToState(next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件(Event) 的触发，就会引起 状态(State) 的变化</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> State <span class="title">getStateAfter</span><span class="params">(Event event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event) &#123;</span><br><span class="line">        <span class="keyword">case</span> ON_CREATE:</span><br><span class="line">        <span class="keyword">case</span> ON_STOP:</span><br><span class="line">            <span class="keyword">return</span> CREATED;</span><br><span class="line">        <span class="keyword">case</span> ON_START:</span><br><span class="line">        <span class="keyword">case</span> ON_PAUSE:</span><br><span class="line">            <span class="keyword">return</span> STARTED;</span><br><span class="line">        <span class="keyword">case</span> ON_RESUME:</span><br><span class="line">            <span class="keyword">return</span> RESUMED;</span><br><span class="line">        <span class="keyword">case</span> ON_DESTROY:</span><br><span class="line">            <span class="keyword">return</span> DESTROYED;</span><br><span class="line">        <span class="keyword">case</span> ON_ANY:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unexpected event value "</span> + event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToState</span><span class="params">(State next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mState == next) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mState = next;</span><br><span class="line">    <span class="keyword">if</span> (mHandlingEvent || mAddingObserverCounter != <span class="number">0</span>) &#123;</span><br><span class="line">        mNewEventOccurred = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// we will figure out what to do on upper level.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mHandlingEvent = <span class="keyword">true</span>;</span><br><span class="line">    sync();</span><br><span class="line">    mHandlingEvent = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>LifecycleRegistry#sync() 同步 Observer 队列的状态</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class="line">    <span class="keyword">if</span> (lifecycleOwner == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"LifecycleOwner of this LifecycleRegistry is already"</span></span><br><span class="line">                + <span class="string">"garbage collected. It is too late to change lifecycle state."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当队列的状态没有同步</span></span><br><span class="line">    <span class="keyword">while</span> (!isSynced()) &#123;</span><br><span class="line">        <span class="comment">// 则需要进行同步操作</span></span><br><span class="line">        mNewEventOccurred = <span class="keyword">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果目标状态 小于 队首 Observer 的状态，则向后同步</span></span><br><span class="line">        <span class="keyword">if</span> (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            backwardPass(lifecycleOwner);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果目标状态 大于 队尾 Observer 的状态，则向前同步</span></span><br><span class="line">        Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class="line">        <span class="keyword">if</span> (!mNewEventOccurred &amp;&amp; newest != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            forwardPass(lifecycleOwner);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 举个例子: 如果队列状态是 [4, 4, 3, 2, 1]，目标状态是 3，经过 backwardPass()，状态队列变为 [3, 3, 3, 2, 1]，</span></span><br><span class="line">        <span class="comment">// 经过 forwardPass() 状态队列会变成 [3, 3, 3, 3, 3]，此时同步完成，isSynced() 为 true，跳出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    mNewEventOccurred = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果队尾 和 队首的状态与目标状态保持一致，则说明已经同步完成；否则同步未完成。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSynced</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mObserverMap.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    State eldestObserverState = mObserverMap.eldest().getValue().mState;</span><br><span class="line">    State newestObserverState = mObserverMap.newest().getValue().mState;</span><br><span class="line">    <span class="keyword">return</span> eldestObserverState == newestObserverState &amp;&amp; mState == newestObserverState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backwardPass</span><span class="params">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从后往前遍历的 Iterator</span></span><br><span class="line">    Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; descendingIterator =</span><br><span class="line">            mObserverMap.descendingIterator();</span><br><span class="line">    <span class="keyword">while</span> (descendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class="line">        Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = descendingIterator.next();</span><br><span class="line">        ObserverWithState observer = entry.getValue();</span><br><span class="line">        <span class="comment">// 当 observer 当前 state 值大于目标 state，且没有新事件触发，则触发循环</span></span><br><span class="line">        <span class="keyword">while</span> ((observer.mState.compareTo(mState) &gt; <span class="number">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class="line">                &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class="line">            <span class="comment">// 通过 downEvent() 将 observer 当前的 状态 向下转换成对应的 Event</span></span><br><span class="line">            Event event = downEvent(observer.mState);</span><br><span class="line">            pushParentState(getStateAfter(event));</span><br><span class="line">            <span class="comment">// 分发 Event 事件</span></span><br><span class="line">            observer.dispatchEvent(lifecycleOwner, event);</span><br><span class="line">            popParentState();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">forwardPass</span><span class="params">(LifecycleOwner lifecycleOwner)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从前往后遍历</span></span><br><span class="line">    Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class="line">            mObserverMap.iteratorWithAdditions();</span><br><span class="line">    <span class="keyword">while</span> (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class="line">        Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class="line">        ObserverWithState observer = entry.getValue();</span><br><span class="line">        <span class="keyword">while</span> ((observer.mState.compareTo(mState) &lt; <span class="number">0</span> &amp;&amp; !mNewEventOccurred</span><br><span class="line">                &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class="line">            pushParentState(observer.mState);</span><br><span class="line">            <span class="comment">// 通过 upEvent() 将 observer 当前的 状态 向上转换成对应的 Event</span></span><br><span class="line">            <span class="comment">// 并发送该 Event 事件</span></span><br><span class="line">            observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));</span><br><span class="line">            popParentState();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>ObserverWithState#dispatchEvent :</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverWithState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispatchEvent</span><span class="params">(LifecycleOwner owner, Event event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取事件发生之后对应的状态</span></span><br><span class="line">        State newState = getStateAfter(event);</span><br><span class="line">        mState = min(mState, newState);</span><br><span class="line">        <span class="comment">// 发送指定事件</span></span><br><span class="line">        mLifecycleObserver.onStateChanged(owner, event);</span><br><span class="line">        mState = newState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里的 mLifecycleObserver 即我们之前分析的 Lifecycling.lifecycleEventObserver() 返回的 Observer</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Jetpack </tag>
            
            <tag> Android Lifecycles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsh 神兵利器之 oh-my-zsh</title>
      <link href="/post/oh-my-zsh-instructions/"/>
      <url>/post/oh-my-zsh-instructions/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>zsh 之所以被广为推荐，其中 <a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a> 功不可没。它支持大量方便的插件，可以让你的 Shell 玩出花来。</p><a id="more"></a><p>安装 oh-my-zsh，因为安装 oh-my-zsh 过程中会直接覆盖 <code>~/.zshrc</code> 文件，所以在有必要的情况下需要提前备份该文件中的内容：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure></div><p>安装完毕之后，会生成 <code>~/.oh-my-zsh</code> 目录，看一下该目录大致的结构：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- plugins   // oh-my-zsh 默认提供的插件存放位置</span><br><span class="line">- themes    // oh-my-zsh 默认提供的主题存放位置</span><br><span class="line">- custom    // 用户自定义目录</span><br><span class="line">  - plugins // 自定义的插件存放位置</span><br><span class="line">  - themes  // 自定义的主题存放位置</span><br></pre></td></tr></table></figure></div><p>前面说过，oh-my-zsh 会覆盖原有的 <code>~/.zshrc</code>, 它会将其默认的配置写在里面。其中就包括 主题 和 插件</p><h2 id="oh-my-zsh-主题"><a href="#oh-my-zsh-主题" class="headerlink" title="oh-my-zsh 主题"></a>oh-my-zsh 主题</h2><p><code>~/.oh-my-zsh/themes/</code> 下是默认支持的主题样式，可以找到你想要的主题，并在 <code>~/.zshrc</code> 中指定：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">"xxx"</span></span><br></pre></td></tr></table></figure></div><p>如果不知道选取哪种，则建议使用随机主题：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">"random"</span></span><br></pre></td></tr></table></figure></div><p>会在每次执行 <code>source ~/.zshrc</code> 或者 每次重新打开终端时随机加载一个主题，从而选择自己喜欢的主题。</p><h2 id="oh-my-zsh-插件"><a href="#oh-my-zsh-插件" class="headerlink" title="oh-my-zsh 插件"></a>oh-my-zsh 插件</h2><p>我们可以在 <code>~/.zshrc</code> 中指定需要使用的插件列表, 比如贴一下我目前 zsh 的插件列表:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins = (</span><br><span class="line">    git</span><br><span class="line">    autojump</span><br><span class="line">    sudo</span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><p>其中除了最后两个 <code>zsh-autosuggestions</code> 和 <code>zsh-syntax-highlighting</code> 之外，其他的插件都是 oh-my-zsh 内置的。</p><p>关于每个插件的具体用法，其实在对应的插件目录下面都会有相关 <code>README.md</code> 可供参考。    </p><p>下面分别说介绍一下这些不同的插件，这些插件都需要在 <code>~/.zshrc</code> 的 <code>plugins</code> 字段中配置，就不再赘述。</p><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p>作用：</p><ul><li><p>如果当前是 git 项目，则会直接显示当前项目所在的 git 分支</p></li><li><p>可以使用各种 git 命令的缩写：<br>例如：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git ==&gt; g</span><br><span class="line">git add ==&gt; ga</span><br><span class="line">git add -all ==&gt; gaa</span><br></pre></td></tr></table></figure></div><p>具体有哪些 git 相关命令缩写，可以参考 <code>~/.oh-my-zsh/plugins/git/git.plugin.zsh</code></p></li></ul><h3 id="autojump"><a href="#autojump" class="headerlink" title="autojump"></a>autojump</h3><p>这是 <a href="https://github.com/wting/autojump" target="_blank" rel="noopener">autojump</a> 的官方仓库，autojump 可以非常方便的在各个历史目录中跳转切换。</p><p>除了需要在 <code>~/.zshrc</code> 中将 autojump 的 zsh 插件添加进来之外，还需要手动安装 autojump 命令：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></table></figure></div><p>autojump 是基于历史命令记录的，想要快速跳转必须之前访问过该目录。<code>autojump</code> 同时有命令缩写 <code>j</code>，比如：<br>之前的操作：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/work/HelloWorld</span><br></pre></td></tr></table></figure></div><p>有了之前的历史命令记录之后，下次再想切换到该目录，就可以方便的跳转：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j HelloWorld</span><br></pre></td></tr></table></figure></div><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><p>sudo 可以很方便地在之前的命令加上 <code>sudo</code> 前缀，只要按两次 <code>esc</code> 键即可。</p><h3 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h3><p><code>zsh-autosuggestions</code> 会在你输入命令时，给出建议的命令，默认按 <code>→</code> 即 TAB 键补全。</p><p>安装：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></div><p>我们还可以修改补全的按键，比如使用 <code>ctrl</code> + <code>space</code> 来补全：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bindkey</span> <span class="string">'^ '</span> autosuggest-accept</span><br></pre></td></tr></table></figure></div><h3 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h3><p>zsh-syntax-highlighting 可以分别高亮 正确 和 错误 的命令，让用户提前知道自己是否有输错命令。</p><p>安装：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a></li><li><a href="https://hufangyun.com/2017/zsh-plugin/" target="_blank" rel="noopener">zsh oh-my-zsh 插件推荐</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> zsh </tag>
            
            <tag> oh-my-zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 系统配置篇</title>
      <link href="/post/macOS-configuration/"/>
      <url>/post/macOS-configuration/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>前段时间刚入手了一款 Mac，当然也是期盼已久的了~ 工欲善其事，必先利其器，这也是 macOS 作为高效的生产工具必经之路。</p><a id="more"></a><h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>这是 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 的官网，Homebrew 之于 macOS，就好比 apt-get 之于 Ubuntu 或 Debian。</p><h3 id="安装-Homebrew"><a href="#安装-Homebrew" class="headerlink" title="安装 Homebrew"></a>安装 Homebrew</h3><p>在终端中执行：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></div><p>该命令就是让 Ruby 执行一段 Homebrew 的安装脚本，该脚本通过 curl 从网络获取。</p><p>安装 Homebrew 过程中，默认会安装所依赖的 Xcode Command Line，这个是 mac 下很多命令所依赖的基础命令。</p><h3 id="安装-Homebrew-cask"><a href="#安装-Homebrew-cask" class="headerlink" title="安装 Homebrew cask"></a>安装 Homebrew cask</h3><p>Homebrew cask 可以通过命令行的方式安装二进制(比如 .img)的应用，相当于一个很重要的 Homebrew 的扩展。</p><p>安装命令：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew tap caskroom/cask</span><br></pre></td></tr></table></figure></div><h3 id="使用国内的-Homebrew-镜像"><a href="#使用国内的-Homebrew-镜像" class="headerlink" title="使用国内的 Homebrew 镜像"></a>使用国内的 Homebrew 镜像</h3><p>也许你在上述的过程中会发现，Homebrew 安装的比较慢，那就需要考虑切换到国内镜像了。比如：</p><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn" target="_blank" rel="noopener">清华镜像</a></li><li><a href="https://mirrors.ustc.edu.cn" target="_blank" rel="noopener">中科大镜像</a></li></ul><p>比如这里选取清华的镜像，我们可以替换 Homebrew 现有的上游：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/core)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/cask)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br></pre></td></tr></table></figure></div><p>若要恢复原始上游：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo)</span>"</span> remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/core)</span>"</span> remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo homebrew/cask)</span>"</span> remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/homebrew-cask.git</span><br></pre></td></tr></table></figure></div><p>此外还要替换 Homebrew Bottles 源（Homebrew 预编译二进制软件包位置）：</p><ul><li><p>如果你是 Bash 用户</p>  <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></div></li><li><p>如果你是 Zsh 用户：</p>  <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></div></li></ul><p>如果你在 Homebrew 安装的过程就卡主了，请参考：<a href="https://juejin.im/post/5c738bacf265da2deb6aaf97" target="_blank" rel="noopener">Mac HomeBrew国内镜像安装方法</a></p><h3 id="Homebrew-体系常用命令"><a href="#Homebrew-体系常用命令" class="headerlink" title="Homebrew 体系常用命令"></a>Homebrew 体系常用命令</h3><ul><li>安装：<ul><li>安装命令：<code>brew install &lt;formula&gt;</code>, 如 <code>brew install wget</code></li><li>安装二进制包：<code>brew cask install &lt;formula&gt;</code>，如 <code>brew cask install wechat</code></li></ul></li><li>搜索：<ul><li>一般搜索：<code>brew search &lt;formula&gt;</code>, 如 <code>brew search curl</code></li><li>搜索二进制包：<code>brew search --cask &lt;formula&gt;</code>, 如 <code>brew search --cask wechat</code></li></ul></li><li>安装列表：<ul><li>显示通过 <code>brew install</code> 安装的列表：<code>brew list</code></li><li>显示通过 <code>brew cask install</code> 安装的软件列表：<code>brew cask list</code></li></ul></li><li>卸载：<ul><li>卸载命令：<code>brew uninstall &lt;formula&gt;</code>，如：<code>brew uninstall wget</code></li><li>卸载软件：<code>brew cask uninstall &lt;formula&gt;</code>, 如 <code>brew cask uninstall wechat</code></li></ul></li><li>其他更多命令，请使用 <code>brew --help</code> 和 <code>brew cask --help</code></li></ul><h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h2><p>我们看 <a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm2 官网</a> 的介绍：</p><blockquote><p>iTerm2 is a replacement for Terminal and the successor to iTerm. It works on Macs with macOS 10.12 or newer. iTerm2 brings the terminal into the modern age with features you never knew you always wanted.<br>简单来说，iTerm2 是一个第三方的终端应用，比 macOS 自带的终端应用（Terminal.app）好更好用，可扩展性更高。</p></blockquote><h3 id="安装-iTerm2"><a href="#安装-iTerm2" class="headerlink" title="安装 iTerm2"></a>安装 iTerm2</h3><p>安装 iTerm2：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install iTerm2</span><br></pre></td></tr></table></figure></div><h3 id="配置-iTerm2"><a href="#配置-iTerm2" class="headerlink" title="配置 iTerm2"></a>配置 iTerm2</h3><p>设置 iTerm2 为默认的终端应用：<br><code>打开 iTerm2 -&gt; 顶部菜单栏 iTerm2 -&gt; Make iTerm2 Default term</code></p><p>设置 iTerm2 配色方案：<br>可以在 <a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">iTerm2 Color Schemes</a> 找到很多种 iTerm2 的配色方案。可以先把该项目 Clone 到本地，可以看到 <code>/schemes</code> 目录下全部都是成套的配色方案，然后通过 <code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; 选择指定的 Profile -&gt; 右侧上方 Colors -&gt; 下方的 Color Presets -&gt; Import -&gt; 选中 iTerm2-Color-Schemes/schemes/ 下的所有配色方案</code> 这样就可以导入所有的配色方案了。选取自己喜欢的即可。</p><p>另外，我们还可以通过 <code>iTerms-Color-Schemes/tools</code> 下提供的工具方便地预览不同的配主题配色：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tools/preview.rb schemes/*</span><br></pre></td></tr></table></figure></div><h2 id="zsh-oh-my-zsh"><a href="#zsh-oh-my-zsh" class="headerlink" title="zsh + oh-my-zsh"></a>zsh + oh-my-zsh</h2><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p>如果说 iTerm2 这些终端都是外表的话，那么 shell 则是内在。Linux/Unix 系统提供了很多 Shell，其中包括 sh, zsh, bash 等等。<br>查看当前系统有多少种Shell:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure></div><p>macOS 默认会包含 bash, sh, zsh, ksh 等多种 shell。</p><p>如果想要自行安装 zsh，则可以：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh zsh-completions</span><br></pre></td></tr></table></figure></div><p>将 zsh 设置为默认的 shell:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></div><p>zsh 其中一个配置文件在 <code>~/.zshrc</code>，有可能我们之前已经在 <code>~/.bash_profile</code> 中配置了不少东西，所以需要将这些配置迁移到 <code>.zshrc</code> 中，或者在 <code>~/.zshrc</code> 中引用 <code>~/.bash_profile</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></div><h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><p>关于 oh-my-zsh 请参考另一篇文章 <a href="/post/oh-my-zsh-instructions">zsh 神兵利器之 oh-my-zsh</a></p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="NVM"><a href="#NVM" class="headerlink" title="NVM"></a>NVM</h3><p>NVM 即 Node Version Manager，可以同时安装不同版本的 Node.js，对于不同的项目可以指定不同的 Node 版本，对于开发来说是比较方便的。’<br>安装 nvm:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure></div><p>如果 NVM 工作目录不存在，则需要手动创建：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.nvm</span><br></pre></td></tr></table></figure></div><p>在 shell 的配置文件中（zsh 用户则是 <code>~/.zshrc</code>, bash 用户则是 <code>~/.bash_profile</code>）将 NVM 引入：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"/usr/local/opt/nvm/nvm.sh"</span> ] &amp;&amp; . <span class="string">"/usr/local/opt/nvm/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"/usr/local/opt/nvm/etc/bash_completion"</span> ] &amp;&amp; . <span class="string">"/usr/local/opt/nvm/etc/bash_completion"</span>  <span class="comment"># This loads nvm bash_completion</span></span><br></pre></td></tr></table></figure></div><p>nvm 常用命令：</p><ul><li>帮助命令查看：<code>nvm --help</code></li><li>显示远端可安装的版本：<code>nvm ls-remote</code></li><li>显示远端可安装的 LTS 版本： <code>nvm ls-remote --lts</code></li><li>安装指定版本：<code>nvm install &lt;version&gt;</code>，比如：<code>nvm install 12.0.0</code></li><li>安装最新 LTS 版本：<code>nvm install --lts</code></li><li>使用指定版本的 Node.js： <code>nvm use &lt;version&gt;</code>，比如：<code>nvm use 12.0.0</code></li></ul><h3 id="NRM"><a href="#NRM" class="headerlink" title="NRM"></a>NRM</h3><p>Node.js 安装完毕后，可以安装 NRM。NRM 即 Node Registry Manager，可以方便的切换 NPM 服务器所使用的源：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure></div><p>nrm 常用命令：</p><ul><li>查看 npm 所有源服务器：<code>nrm list</code></li><li>测试 npm 所有源服务器的响应时间：<code>nrm test</code></li><li>查看当前源：<code>nrm current</code></li><li>切换到指定的源：<code>nrm use &lt;registry&gt;</code>, 如： <code>nrm use cnpm</code></li></ul><h3 id="npm-check"><a href="#npm-check" class="headerlink" title="npm-check"></a>npm-check</h3><p><code>npm-check</code> 是很有用的 npm 命令，可以用来检查过时的、不正确的和没有用到的一些依赖包，并能方便地执行更新操作：<br>安装 <code>npm-check</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-check</span><br></pre></td></tr></table></figure></div><p>npm-check 常用命令：</p><ul><li>检查当前目录 modules 更新情况：<code>npm-check -u</code></li><li>检查全局模块更新情况：<code>npm-check -ug</code></li></ul><p>例如：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">tianma@tianma: ~/Hexo/</span><br><span class="line">$ npm-check -u                                                                                                                                                                                  [1:07:51]</span><br><span class="line">? Choose <span class="built_in">which</span> packages to update. (Press &lt;space&gt; to select)</span><br><span class="line"></span><br><span class="line"> Major Update Potentially breaking API changes. Use caution.</span><br><span class="line">❯◯ hexo-generator-archive   0.1.5  ❯  1.0.0  http://hexo.io/</span><br><span class="line"> ◯ hexo-generator-category  0.1.3  ❯  1.0.0  https://hexo.io/</span><br><span class="line"> ◯ hexo-generator-index     0.2.1  ❯  1.0.0  http://hexo.io/</span><br><span class="line"> ◯ hexo-generator-tag       0.2.0  ❯  1.0.0  http://hexo.io/</span><br><span class="line"> ◯ hexo-renderer-ejs        0.3.1  ❯  1.0.0  https://github.com/hexojs/hexo-renderer-ejs<span class="comment">#readme</span></span><br><span class="line"> ◯ hexo-renderer-stylus     0.3.3  ❯  1.1.0  https://github.com/hexojs/hexo-renderer-stylus<span class="comment">#readme</span></span><br><span class="line"> ◯ hexo-renderer-marked     1.0.1  ❯  2.0.0  https://github.com/hexojs/hexo-renderer-marked<span class="comment">#readme</span></span><br><span class="line"> ◯ hexo-server              0.3.3  ❯  1.0.0  http://hexo.io/</span><br><span class="line"></span><br><span class="line"> Space to select. Enter to start upgrading. Control-C to cancel.</span><br></pre></td></tr></table></figure></div><p>其中，空格键去选择，↑↓ 键切换行，Enter 键开始升级模块，Contrl+C 取消命令。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://sourabhbajaj.com/mac-setup/" target="_blank" rel="noopener">macOS Setup Guide</a></li><li><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a></li><li><a href="https://juejin.im/post/5c738bacf265da2deb6aaf97" target="_blank" rel="noopener">Mac HomeBrew国内镜像安装方法</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/" target="_blank" rel="noopener">Homebrew 镜像使用帮助</a></li><li><a href="https://chua.pro/macos-installation-node-js-related-environment/" target="_blank" rel="noopener">macOS 安装 Node.js 相关环境</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Homebrew </tag>
            
            <tag> Node.js </tag>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 多用户配置</title>
      <link href="/post/git-multi-users-configuration/"/>
      <url>/post/git-multi-users-configuration/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>一般公司都会内部有 Git 之类的版本控制仓库，如果你同时有在其他远程 Git 仓库(比如 GitHub) 提交代码的习惯。此时，你就需要在同一台机器上配置多个 Git 用户。</p><a id="more"></a><h2 id="Git-多用户配置"><a href="#Git-多用户配置" class="headerlink" title="Git 多用户配置"></a>Git 多用户配置</h2><p>举个栗子： 张小天 的公司xx的 Git 仓库地址是 <code>git.xx.com</code> , 他公司的 Git 账号的用户名是 <code>zhangxiaotian</code>, 邮箱是 <code>zhangxiaotian@xx.com</code>。张小天 的 GitHub 用户名是 <code>LittleZhang</code>，邮箱是 <code>LittleZhang@gmail.com</code>。</p><p>张小天可以这样设置：</p><ul><li><p>将 GitHub 的 Git 用户作为全局用户：</p>  <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"LittleZhang"</span></span><br><span class="line">git config --global user.email <span class="string">"LittleZhang@gmail.com"</span></span><br></pre></td></tr></table></figure></div><p>这个全局的配置文件路径默认是 <code>~/.gitconfig</code></p></li><li><p>将 xx 公司的 Git 用户配置到 <code>~/.gitconfig-work</code> 文件中去：</p>  <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config -f ~/.gitconfig-work user.name <span class="string">"zhangxiaotian"</span></span><br><span class="line">git config -f ~/.gitconfig-work user.email <span class="string">"zhangxiaotian@xx.com"</span></span><br></pre></td></tr></table></figure></div></li><li><p>在全局配置(<code>~/.gitconfig</code>) 中使用 <a href="https://git-scm.com/docs/git-config#_conditional_includes" target="_blank" rel="noopener">conditional includes</a> 引用 <code>~/.gitconfig-work</code></p>  <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global includeif.<span class="string">"gitdir:~/Work/"</span>.path .gitconfig-work</span><br></pre></td></tr></table></figure></div><p>  最终，根据之前的配置，全局配置文件内容如下：</p>  <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name = LittleZhang</span><br><span class="line">    email = LittleZhang@gmail.com</span><br><span class="line">[includeIf &quot;gitdir:~/Work/&quot;]</span><br><span class="line">    path = .gitconfig-work</span><br></pre></td></tr></table></figure></div><p>  <code>gitdir</code> 表示 <code>.git</code>(本地带有版本控制的项目) 所在位置，<code>includeIf</code> 整个语句表示 <code>~/Work/</code> 路径下的所有的 Git 版本控制项目对应的 Git 用户信息都依据 <code>.gitconfig-work</code> 来配置，即使用 <code>zhangxiaotian@xx.com</code> 这个用户。更多详细用法，请参考 Git 官方文档： <a href="https://git-scm.com/docs/git-config#_includes" target="_blank" rel="noopener">includes</a></p></li><li><p>把工作中的项目放在 <code>~/Work/</code> 路径下即可。</p></li></ul><p>此时，张小天已经完成了 Git 的多用户配置，他只需要将工作中的项目放在 <code>~/Work/</code> 目录下即可，当然了，他也可以配置多个工作路径。但是只做好 Git 配置，只能使用 <code>http(s)</code> 来同步仓库，每次同步时还需要输入密码。接下来就需要进行多用户的 ssh 配置</p><h2 id="ssh-多用户配置"><a href="#ssh-多用户配置" class="headerlink" title="ssh 多用户配置"></a>ssh 多用户配置</h2><ul><li><p>生成 Github 的 Git 用户的 ssh 公钥私钥：</p>  <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssk-keygen -t rsa -C <span class="string">"LittleZhang@gmail.com"</span> -f ~/.ssh/github</span><br></pre></td></tr></table></figure></div><p>  会生成私钥 <code>~/.ssh/github</code> 和 公钥 <code>~/.ssh/github.pub</code></p></li><li><p>生成 xx 公司的 Git 用户的 ssh 公钥私钥：</p>  <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssk-keygen -t rsa -C <span class="string">"zhangxiaotian@xx.com"</span> -f ~/.ssh/xx</span><br></pre></td></tr></table></figure></div><p>  会生成私钥 <code>~/.ssh/xx</code> 和 公钥<code>~/.ssh/xx.pub</code> </p></li><li><p>生成 ssh 的 config 文件用于路由不同的配置：</p>  <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host git.xx.com</span><br><span class="line">HostName git.xx.com</span><br><span class="line">IdentityFile ~/.ssh/xx</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">IdentityFile ~/.ssh/github</span><br></pre></td></tr></table></figure></div></li><li><p>将对应的 .pub 公钥信息添加到相对应的网站，不同的 Git 仓库网站，添加操作可能会不一样，但总体是一致的，网上有很多教程，就不再赘述了。</p></li><li><p>使用 <code>ssh -T git@github.com</code> 或者 <code>ssh -vT git@github.com</code>(<code>-v</code> 会包含更多改命令的操作细节) 来验证是否能通过 ssh 的方式正常连接到 GitHub。同理，也可以验证公司公司能否 ssh 连接成功。</p></li></ul><p>至此，张小天完成了 Git 多用户配置 和 ssh 多用户配置的所有操作。撒花 ✿✿ヽ(°▽°)ノ✿</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://git-scm.com/docs/git-config#_includes" target="_blank" rel="noopener">Git config - includes</a></li><li><a href="https://stackoverflow.com/a/43654115/5541215" target="_blank" rel="noopener">Can I specify multiple users for myself in .gitconfig?</a></li><li><a href="http://chitanda.me/2015/06/11/tips-for-setup-hexo/#git多网站ssh部署方案" target="_blank" rel="noopener">git多网站ssh部署方案</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 RxJava2 的一些问题</title>
      <link href="/post/RxJava2-issues/"/>
      <url>/post/RxJava2-issues/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在使用 <code>RxJava2</code> 过程中，会遇到一些问题和对应的解决方案，在这里稍微记录下。</p><a id="more"></a><h3 id="发射-Null-问题"><a href="#发射-Null-问题" class="headerlink" title="发射 Null 问题"></a>发射 Null 问题</h3><p>在 RxJava1 中，可以直接发射 null 数据，就像这样:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></div><p>但在 RxJava2 中，这种做法是会抛出异常的。可以通过一个新的封装了原始数据的类，来解决此问题。<br>比如定义一个 <code>DataWrapper</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DataWrapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DataWrapper</span><span class="params">(@Nullable T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">DataWrapper&lt;T&gt; <span class="title">ofNullable</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataWrapper&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data != <span class="keyword">null</span></span><br><span class="line">                ? String.format(<span class="string">"DataWrapper[%s]"</span>, data)</span><br><span class="line">                : <span class="string">"null"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>比如有一个方法去加载某些数据：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> </span><br><span class="line"><span class="function">String <span class="title">loadData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>那我们在对可能为 null 的数据流处理就可以变成：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Observable.fromCallable(() -&gt; DataWrapper.ofNullable(loadData()))</span><br><span class="line">        .subscribe(item -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// do something</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// do something else</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, throwable -&gt; &#123;</span><br><span class="line">            <span class="comment">// handle error</span></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div><p>当然了，我们也可以通过 <code>Observable.create()</code> 来规避对 null 数据的发射：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable</span><br><span class="line">        .create((ObservableOnSubscribe&lt;String&gt;) emitter -&gt; &#123;</span><br><span class="line">            String data = loadData();</span><br><span class="line">            <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">                emitter.onNext(data);</span><br><span class="line">            &#125;</span><br><span class="line">            emitter.onComplete();</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(item -&gt; &#123;</span><br><span class="line">            <span class="comment">// do something</span></span><br><span class="line">        &#125;, throwable -&gt; &#123;</span><br><span class="line">            <span class="comment">// handle error</span></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div><h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul><li><a href="https://medium.com/@joshfein/handling-null-in-rxjava-2-0-10abd72afa0b" target="_blank" rel="noopener">Handling null in RxJava 2.0</a></li></ul><h3 id="异常堆栈信息显示不全问题"><a href="#异常堆栈信息显示不全问题" class="headerlink" title="异常堆栈信息显示不全问题"></a>异常堆栈信息显示不全问题</h3><p>在使用 RxJava2 过程中，如果抛出了异常，会遇到异常信息不全问题，没有给出具体行数，就像这样:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NullPointerException: Callable returned <span class="keyword">null</span></span><br><span class="line">        at io.reactivex.internal.functions.ObjectHelper.requireNonNull(ObjectHelper.java:<span class="number">39</span>)</span><br><span class="line">        at io.reactivex.internal.operators.observable.ObservableFromCallable.subscribeActual(ObservableFromCallable.java:<span class="number">43</span>)</span><br><span class="line">        at io.reactivex.Observable.subscribe(Observable.java:<span class="number">12267</span>)</span><br><span class="line">        at io.reactivex.internal.operators.observable.ObservableFilter.subscribeActual(ObservableFilter.java:<span class="number">30</span>)</span><br><span class="line">        at io.reactivex.Observable.subscribe(Observable.java:<span class="number">12267</span>)</span><br><span class="line">        at io.reactivex.internal.operators.observable.ObservableSwitchIfEmpty.subscribeActual(ObservableSwitchIfEmpty.java:<span class="number">31</span>)</span><br><span class="line">        at io.reactivex.Observable.subscribe(Observable.java:<span class="number">12267</span>)</span><br><span class="line">        at io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeTask.run(ObservableSubscribeOn.java:<span class="number">96</span>)</span><br><span class="line">        at io.reactivex.Scheduler$DisposeTask.run(Scheduler.java:<span class="number">578</span>)</span><br><span class="line">        at io.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:<span class="number">66</span>)</span><br><span class="line">        at io.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:<span class="number">57</span>)</span><br><span class="line">        at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">266</span>)</span><br><span class="line">        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:<span class="number">301</span>)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1167</span>)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">641</span>)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">764</span>)</span><br></pre></td></tr></table></figure></div><p>上面的 Error 堆栈信息中，它并没有给出这个 Error 在实际项目中的调用路径。</p><p>为了解决这个问题，可以引入 <a href="https://github.com/akarnokd/RxJavaExtensions#debug-support" target="_blank" rel="noopener">RxJavaExtensions</a> 库。</p><ol><li><p>先启用错误追踪：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RxJavaAssemblyTracking.enable();</span><br></pre></td></tr></table></figure></div></li><li><p>获取对应错误信息：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RxJavaAssemblyException assembled = RxJavaAssemblyException.find(someThrowable);</span><br><span class="line"><span class="keyword">if</span> (assembled != <span class="keyword">null</span>) &#123;</span><br><span class="line">    System.err.println(assembled.stacktrace());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p> 打印出来的错误信息就像这样，已经可以准确定位错误位置了：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RxJavaAssemblyException: assembled</span><br><span class="line">    at dalvik.system.VMStack.getThreadStackTrace(Native Method)</span><br><span class="line">    at io.reactivex.Observable.fromCallable(Observable.java:<span class="number">1808</span>)</span><br><span class="line">    at com.tianma.simpleweather.data.db.DBManager.loadWeatherByPK(DBManager.java:<span class="number">183</span>)</span><br><span class="line">    at com.tianma.simpleweather.data.repository.DataRepository.getWeather(DataRepository.java:<span class="number">40</span>)</span><br><span class="line">    at com.tianma.simpleweather.feature.weather.WeatherPresenter.loadWeather(WeatherPresenter.java:<span class="number">42</span>)</span><br><span class="line">    at com.tianma.simpleweather.feature.weather.WeatherFragment.doRefresh(WeatherFragment.java:<span class="number">262</span>)</span><br><span class="line">    at com.tianma.simpleweather.feature.weather.WeatherFragment.lazyLoad(WeatherFragment.java:<span class="number">240</span>)</span><br></pre></td></tr></table></figure></div></li></ol><h4 id="相关链接-1"><a href="#相关链接-1" class="headerlink" title="相关链接"></a>相关链接</h4><ul><li><a href="https://stackoverflow.com/questions/45976321/how-to-log-a-stacktrace-of-all-exceptions-of-rxjava2" target="_blank" rel="noopener">How to log a stacktrace of all exceptions of rxJava2?</a></li><li><a href="https://stackoverflow.com/questions/42507511/rxjava-2-doesnt-tell-the-error-line/" target="_blank" rel="noopener">RxJava 2 doesn’t tell the error line</a></li><li><a href="https://github.com/akarnokd/RxJavaExtensions" target="_blank" rel="noopener">RxJavaExtensions Github</a></li><li><a href="https://github.com/akaita/RxJava2Debug" target="_blank" rel="noopener">RxJava2Debug Github</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RxJava2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Deodex</title>
      <link href="/post/android-deodex/"/>
      <url>/post/android-deodex/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在使用逆向工具（比如 <a href="https://github.com/skylot/jadx" target="_blank" rel="noopener">jdax</a> 等）反编译某些系统 App 的时候，会发现其代码其实是不全的，其实是因为系统应用的 APK 已经经过 <code>odex</code> 和 <code>vdex</code> 化，导致代码分离。</p><p>比如在之前的文章（<a href="/post/android-extract-Rom/">Android 拆包，提取 APK 或 Framework 文件</a>）中，拆了 MIUI 的 Rom，其中小米系统界面（<code>MiuiSystemUI</code>）拆开后大致是这样的：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tree -s priv-app/MiuiSystemUI/</span></span><br><span class="line">priv-app/MiuiSystemUI/</span><br><span class="line">├── [   17525476]  MiuiSystemUI.apk</span><br><span class="line">└── [          0]  oat</span><br><span class="line">    └── [          0]  arm64</span><br><span class="line">        ├── [   12669648]  MiuiSystemUI.odex</span><br><span class="line">        └── [    6418324]  MiuiSystemUI.vdex</span><br><span class="line"></span><br><span class="line">2 directories, 3 files</span><br></pre></td></tr></table></figure></div><p>解压 <code>MiuiSystemUI.apk</code> 之后：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AndroidManifest.xml  assets/  META-INF/  res/  resources.arsc</span><br></pre></td></tr></table></figure></div><p>可以看到 Apk 压缩文件中未包含 <code>.dex</code> 文件，而 <code>priv-app/MiuiSystemUI/oat/arm64/</code> 路径下存在 <code>.odex</code> 和 <code>.vdex</code> 的文件，我们要方便的查看其代码，就需要进行反编译（<code>deodex</code>）。</p><a id="more"></a><h2 id="odex-和-vdex-是什么？"><a href="#odex-和-vdex-是什么？" class="headerlink" title="odex 和 vdex 是什么？"></a>odex 和 vdex 是什么？</h2><p>我们可以看 Google 官方文档中的 <a href="https://source.android.com/devices/tech/dalvik/configure#how_art_works" target="_blank" rel="noopener">ART 的运作方式</a></p><p>在 Android 7.0 之后，Android 修改了其 ART 虚拟机的运行模式。在普通用户App安装过程中，不会触发 <code>AOT</code> 编译。在应用最初几次运行，系统会根据 App 经常使用的方法进行 JIT 编译(Just in time - 实时编译 - 解释执行) 。在系统空闲时，会把之前几次运行过程中经常使用的方法代码进行 AOT 编译（Ahead of time - 提前预编译为机器码 - 直接执行）。后续的 App 运行则是 JIT 和 AOT 的混合模式。</p><p>在 Android O 版本中在 App 编译过程中，会生成以下文件：</p><ul><li><code>.vdex</code>：其中包含 APK 的未压缩 DEX 代码，另外还有一些旨在加快验证速度的元数据。</li><li><code>.odex</code>：其中包含 APK 中已经过 AOT 编译的方法代码。</li><li><code>.art</code> (可选的)：其中包含 APK 中列出的某些字符串和类的 ART 内部表示，用于加快应用启动速度。</li></ul><p>其中 <code>.vdex</code> + <code>.odex</code> 就是完整的 Apk class 代码了 (不包括资源文件等)。</p><h2 id="反编译-vdex"><a href="#反编译-vdex" class="headerlink" title="反编译 vdex"></a>反编译 vdex</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>反编译 <code>vdex</code> 需要依赖工具 <code>vdexExtractor</code></p><ul><li>系统： Windows 10</li><li>依赖： 需要下载 <a href="https://cygwin.com/install.html" target="_blank" rel="noopener">cygwin</a> (<code>cygwin</code> 可以在 Windows 上运行原生的 Linux 命令，可以提供一定程度上的 Linux 环境) 并安装 <code>zlib-level</code> 和 <code>zip/uzip</code> 库。</li><li>编译： <ul><li>clone 仓库 <a href="https://github.com/anestisb/vdexExtractor" target="_blank" rel="noopener">vdex extractor</a> </li><li>安装 Android NDK</li><li><code>./make.sh</code> 进行编译</li></ul></li></ul><p>最终正确编译之后会在 <code>bin/</code> 目录下生成可执行文件 (比如 <code>vdexExtractor.exe</code>)</p><p><code>vdexExtractor</code> 在反编译 Android 9.0 P 中的 <code>vdex</code> 时，会生成 <code>cdex</code>(CompatDex) 文件而不是 <code>dex</code> 文件, <code>cdex</code> 只能在 GNU/Linux 系统 或者 MacOS 系统中才能转换为 <code>dex</code>。即 Windows 系统中，没办法反编译 Android P 中的 <code>vdex</code>。</p><h3 id="反编译系统App中的vdex"><a href="#反编译系统App中的vdex" class="headerlink" title="反编译系统App中的vdex"></a>反编译系统App中的vdex</h3><p>这里以前面提到的 <code>MiuiSystemUI</code> 这个系统 App 为例。当前目录结构如下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drwxrwx---+ 1 Tianma None      0 6月  11 18:21 priv-app</span><br><span class="line">-rwxrwx---+ 1 Tianma None 458972 6月  11 20:16 vdexExtractor.exe</span><br></pre></td></tr></table></figure></div><p>其中的 <code>MiuiSystemUI</code> 就在 <code>priv-app/MiuiSystemUI/</code> 路径下。</p><ol><li><p>复制 <code>MiuiSystemUI.apk</code> 到当前路径下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp priv-app/MiuiSystemUI/MiuiSystemUI.apk MiuiSystemUI.apk</span><br></pre></td></tr></table></figure></div></li><li><p>使用 <code>vdexExtractor</code> 将 <code>MiuiSystemUI</code> 中的 <code>vdex</code> 反编译成 <code>dex</code>，并生成在当前路径下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./vdexExtractor.exe -i priv-app/MiuiSystemUI/oat/[arch]/MiuiSystemUI.vdex -o ./ --ignore-crc-error</span><br></pre></td></tr></table></figure></div><p>其中 <code>[arch]</code> 代表 CPU 架构（比如 <code>arm</code> <code>arm64</code> 等），后面不再赘述。成功之后当前路径如下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">drwxrwx---+ 1 Tianma None        0 6月  11 18:21 framework</span><br><span class="line">-rwxrwx---+ 1 Tianma None 17525476 6月  17 18:49 MiuiSystemUI.apk</span><br><span class="line">-rw-r--r--+ 1 Tianma None  6229928 6月  17 18:54 MiuiSystemUI_classes.dex</span><br><span class="line">drwxrwx---+ 1 Tianma None        0 6月  11 18:21 priv-app</span><br><span class="line">-rwxrwx---+ 1 Tianma None   458972 6月  17 20:16 vdexExtractor.exe</span><br></pre></td></tr></table></figure></div><p>多了一个 <code>MiuiSystemUI_classes.dex</code>。这个时候就已经可以使用 <code>jadx</code> 等工具查看其代码了。</p></li><li><p>将生成的 <code>.dex</code> 打包到 <code>.apk</code> 中：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv MiuiSystemUI_classes.dex classes.dex</span><br><span class="line">zip MiuiSystemUI.apk classes*.dex</span><br></pre></td></tr></table></figure></div><p>需要注意的是，如果步骤 2 中反编译出来的 <code>dex</code> 文件是多个（&gt;= 2）的话，需要按照 <code>classes1.dex</code>, <code>classes2.dex</code> 等方式重命名之后，再将所有的 <code>.dex</code> 打包进 <code>.apk</code> 中</p></li></ol><h3 id="反编译-framework-下的-vdex"><a href="#反编译-framework-下的-vdex" class="headerlink" title="反编译 framework 下的 vdex"></a>反编译 framework 下的 vdex</h3><p>这里以 <code>services.jar</code> 为例，其中 <code>services.jar</code> 包含各种系统服务(AMS PMS 等等)，是很值得对其进行研究的 jar 包。由于反编译 <code>framework</code> 下的 <code>jar</code> 包 <code>framework</code> 相关环境（主要是用作 ClassLoader 的路径），所以需要的目录结构如下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drwxrwx---+ 1 Tianma None      0 6月  11 18:21 framework</span><br><span class="line">-rwxrwx---+ 1 Tianma None 458972 6月  11 20:16 vdexExtractor.exe</span><br></pre></td></tr></table></figure></div><ol><li><p>复制 <code>services.jar</code> 到当前目录下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp framework/services.jar services.jar</span><br></pre></td></tr></table></figure></div></li><li><p>使用 <code>vdexExtractor</code> 将 <code>/framework/oat/[arch]/services.vdex</code> 反编译成 <code>dex</code>，并生成在当前目录下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./vdexExtractor.exe -i framework/oat/[arch]/services.vdex -o ./ --ignore-crc-error</span><br></pre></td></tr></table></figure></div><p>会在当前路径生成 <code>services_classes.dex</code> 文件：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">drwxrwx---+ 1 Tianma None       0 6月  11 18:21 framework</span><br><span class="line">-rwxrwx---+ 1 Tianma None     318 6月  17 19:58 services.jar</span><br><span class="line">-rw-r--r--+ 1 Tianma None 9455876 6月  17 20:01 services_classes.dex</span><br><span class="line">-rwxrwx---+ 1 Tianma None  458972 6月  11 20:16 vdexExtractor.exe</span><br></pre></td></tr></table></figure></div><p>此时就已经可以使用 <code>jadx</code> 等工具查看其代码了。</p></li><li><p>将生成的 <code>.dex</code> 打包到 <code>.jar</code> 中去：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv services_classes.dex classes.dex</span><br><span class="line">zip services.jar classes*.dex</span><br></pre></td></tr></table></figure></div><p>最终生成的 <code>services.jar</code> 会包含 <code>.dex</code>。</p></li></ol><h2 id="反编译-odex"><a href="#反编译-odex" class="headerlink" title="反编译 odex"></a>反编译 odex</h2><h3 id="准备工作-1"><a href="#准备工作-1" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>系统：Windows 10</li><li>下载 <a href="https://github.com/JesusFreke/smali/" target="_blank" rel="noopener">smali</a> 提供的 <code>smali-xxx.jar</code> 和 <code>baksmali-xxx.jar</code> 具体下载地址 -&gt; <a href="https://bitbucket.org/JesusFreke/smali/downloads/" target="_blank" rel="noopener">downloads</a></li></ul><p>这里下载的是 <code>2.2.7</code> 版本。</p><h3 id="反编译系统App中的odex"><a href="#反编译系统App中的odex" class="headerlink" title="反编译系统App中的odex"></a>反编译系统App中的odex</h3><p>仍然以 <code>MiuiSystemUI</code> 这个系统 App 为例，需要 <code>framework</code> 环境，故当前目录结构如下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-rwxrwx---+ 1 Tianma None 1367549 6月  11 11:48 baksmali-2.2.7.jar</span><br><span class="line">drwxrwx---+ 1 Tianma None       0 6月  11 18:21 framework</span><br><span class="line">drwxrwx---+ 1 Tianma None       0 6月  17 20:50 priv-app</span><br><span class="line">-rwxrwx---+ 1 Tianma None 1120101 6月  11 11:48 smali-2.2.7.jar</span><br></pre></td></tr></table></figure></div><ol><li><p>复制 <code>MiuiSystemUI.apk</code> 到当前目录：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp priv-app/MiuiSystemUI/MiuiSystemUI.apk MiuiSystemUI.apk</span><br></pre></td></tr></table></figure></div></li><li><p>使用 <code>baksmali</code> 将 <code>odex</code> 反编译成 <code>.smali</code> 文件，再用 <code>smali</code> 将 <code>.smali</code> 转换成 <code>dex</code>:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar baksmali-2.2.7.jar x priv-app/MiuiSystemUI/oat/[arch]/MiuiSystemUI.odex -d framework/[arch]/ -d framework/ -o MiuiSystemUI</span><br><span class="line">java -jar smali-2.2.7.jar a MiuiSystemUI -o classes.dex</span><br></pre></td></tr></table></figure></div><p>最终会在当前路径下生成 <code>classes.dex</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-rwxrwx---+ 1 Tianma None  1367549 6月  11 11:48 baksmali-2.2.7.jar</span><br><span class="line">-rwxrwx---+ 1 Tianma None  6234640 6月  17 20:57 classes.dex</span><br><span class="line">drwxrwx---+ 1 Tianma None        0 6月  11 18:21 framework</span><br><span class="line">drwxrwx---+ 1 Tianma None        0 6月  17 20:56 MiuiSystemUI</span><br><span class="line">-rwxrwx---+ 1 Tianma None 17525476 6月  17 20:55 MiuiSystemUI.apk</span><br><span class="line">drwxrwx---+ 1 Tianma None        0 6月  17 20:50 priv-app</span><br><span class="line">-rwxrwx---+ 1 Tianma None  1120101 6月  11 11:48 smali-2.2.7.jar</span><br></pre></td></tr></table></figure></div></li><li><p>将 <code>.dex</code> 打包进 <code>.apk</code> 中：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip MiuiSystemUI.apk classes*.dex</span><br></pre></td></tr></table></figure></div><p>最终 <code>.apk</code> 会包含 <code>.dex</code></p></li></ol><h3 id="反编译-framework-下的-odex"><a href="#反编译-framework-下的-odex" class="headerlink" title="反编译 framework 下的 odex"></a>反编译 framework 下的 odex</h3><p>仍然以 <code>services.jar</code> 为例，当前目录结构：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-rwxrwx---+ 1 Tianma None 1367549 6月  11 11:48 baksmali-2.2.7.jar</span><br><span class="line">drwxrwx---+ 1 Tianma None       0 6月  11 18:21 framework</span><br><span class="line">-rwxrwx---+ 1 Tianma None 1120101 6月  11 11:48 smali-2.2.7.jar</span><br></pre></td></tr></table></figure></div><ol><li><p>复制 <code>services.jar</code> 到当前目录：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp framework/services.jar services.jar</span><br></pre></td></tr></table></figure></div></li><li><p>使用 <code>baksmali</code> 将 <code>odex</code> 反编译成 <code>.smali</code> 文件，再用 <code>smali</code> 将 <code>.smali</code> 转换成 <code>dex</code>:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar baksmali-2.2.7.jar x framework/oat/[arch]/services.odex -d framework/[arch]/ -d framework/ -o services</span><br><span class="line">java -jar smali-2.2.7.jar a services -o classes.dex</span><br></pre></td></tr></table></figure></div><p>最终会在当前路径下生成 <code>classes.dex</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-rwxrwx---+ 1 Tianma None 1367549 6月  11 11:48 baksmali-2.2.7.jar</span><br><span class="line">-rwxrwx---+ 1 Tianma None 9447036 6月  17 20:44 classes.dex</span><br><span class="line">drwxrwx---+ 1 Tianma None       0 6月  11 18:21 framework</span><br><span class="line">drwxrwx---+ 1 Tianma None       0 6月  17 20:42 services</span><br><span class="line">-rwxrwx---+ 1 Tianma None     318 6月  17 20:38 services.jar</span><br><span class="line">-rwxrwx---+ 1 Tianma None 1120101 6月  11 11:48 smali-2.2.7.jar</span><br></pre></td></tr></table></figure></div></li><li><p>将生成的 <code>.dex</code> 打包到 <code>.jar</code> 中去：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip services.jar classes*.dex</span><br></pre></td></tr></table></figure></div><p>最终生成的 <code>services.jar</code> 会包含 <code>.dex</code>。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>本质上 <code>deodex</code> 系统 App 和 <code>framework/xxx.jar</code> 没有区别。</li><li>在 Windows 上暂时不能对 Android P 中的 <code>odex</code> 和 <code>vdex</code> 进行反编译</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://gitlab.com/Nanolx/NanoDroid/blob/master/doc/DeodexServices.md" target="_blank" rel="noopener">Deodex services.jar</a></li><li><a href="https://github.com/JesusFreke/smali" target="_blank" rel="noopener">smali baksmali</a></li><li><a href="https://github.com/anestisb/vdexExtractor" target="_blank" rel="noopener">vdex extractor</a> </li><li><a href="https://source.android.com/devices/tech/dalvik/configure#how_art_works" target="_blank" rel="noopener">How art works</a></li><li><a href="https://www.zhihu.com/question/319688949/answer/648358786" target="_blank" rel="noopener">华为公布的方舟编译器到底对安卓软件生态会有多大影响？ – weishu 的回答</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> odex </tag>
            
            <tag> vdex </tag>
            
            <tag> deodex </tag>
            
            <tag> 反编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 拆包，提取 APK 或 Framework 文件</title>
      <link href="/post/android-extract-Rom/"/>
      <url>/post/android-extract-Rom/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前由于开发一个关于 MIUI 系统界面的 Xposed 插件，为了适配不同的 Rom，需要查看不同 Rom 中的 SystemUI.apk </p><a id="more"></a><h2 id="Android-Rom-结构"><a href="#Android-Rom-结构" class="headerlink" title="Android Rom 结构"></a>Android Rom 结构</h2><ul><li><p>在 5.0 之前，Android 的系统包（卡刷包）是可以直接解压出来 <code>system</code> 目录，从它里面就可以直接提取出 Rom 内部的 Apk 文件。</p></li><li><p>5.0 ~ 8.0 中，Android 的 Rom 包里面有 <code>system.new.dat</code> 文件，无法直接解压提取，很明显，我们要的 Rom 就在这里面：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="BASH"><figure class="highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-rwxrwx---+ 1 Tianma None   24618314 1月   1 2009 boot.img</span><br><span class="line">-rwxrwx---+ 1 Tianma None    1734469 1月   1 2009 file_contexts.bin</span><br><span class="line">drwxrwx---+ 1 Tianma None          0 5月  11 17:42 firmware-update</span><br><span class="line">drwxrwx---+ 1 Tianma None          0 5月  11 17:42 META-INF</span><br><span class="line">-rwxrwx---+ 1 Tianma None 3089031168 1月   1 2009 system.new.dat</span><br><span class="line">-rwxrwx---+ 1 Tianma None          0 1月   1 2009 system.patch.dat</span><br><span class="line">-rwxrwx---+ 1 Tianma None      16288 1月   1 2009 system.transfer.list</span><br></pre></td></tr></table></figure></div></li><li><p>8.1 之后，Android 的 Rom 包里面有 <code>system.new.dat.br</code> 文件，这个是被压缩为 <code>.br</code>(brotli) 格式的 <code>system.new.dat</code> 文件，也无法直接提取：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-rwxrwx---+ 1 Tianma None   50484554 1月   1 2009 boot.img</span><br><span class="line">-rwxrwx---+ 1 Tianma None       9230 1月   1 2009 compatibility.zip</span><br><span class="line">drwxrwx---+ 1 Tianma None          0 5月  14 23:26 firmware-update</span><br><span class="line">drwxrwx---+ 1 Tianma None          0 5月  14 23:26 META-INF</span><br><span class="line">-rwxrwx---+ 1 Tianma None 1694882420 1月   1 2009 system.new.dat.br</span><br><span class="line">-rwxrwx---+ 1 Tianma None          0 1月   1 2009 system.patch.dat</span><br><span class="line">-rwxrwx---+ 1 Tianma None      15019 1月   1 2009 system.transfer.list</span><br><span class="line">-rwxrwx---+ 1 Tianma None  370088219 1月   1 2009 vendor.new.dat.br</span><br><span class="line">-rwxrwx---+ 1 Tianma None          0 1月   1 2009 vendor.patch.dat</span><br><span class="line">-rwxrwx---+ 1 Tianma None       3815 1月   1 2009 vendor.transfer.list</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="拆包步骤"><a href="#拆包步骤" class="headerlink" title="拆包步骤"></a>拆包步骤</h2><h3 id="Windows-下的拆包"><a href="#Windows-下的拆包" class="headerlink" title="Windows 下的拆包"></a>Windows 下的拆包</h3><p>准备：</p><ol><li>系统：windows 10</li><li>环境：<ul><li><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">Python3</a>，并添加 <code>Python3</code> 到环境变量的 <code>Path</code> 中</li><li><a href="https://www.7-zip.org/download.html" target="_blank" rel="noopener">7-zip</a>，并添加 <code>7-zip</code> 到环境变量的 <code>Path</code> 中</li></ul></li><li>下载 <a href="https://github.com/chiragkrishna/system.new.dat-extractor" target="_blank" rel="noopener">system.new.dat-extractor</a></li></ol><p>操作步骤：</p><ol><li>将 <code>system.new-data-extractor</code> 工具放到一个路径中没有空格的目录下</li><li>将 Rom 的 <code>.zip</code> 放到与前面相同的目录下</li><li>打开 <code>system_image_extractor-V4.cmd</code> 文件，之后会自动解包，提取出来的文件存放在 <code>extracted_files</code> 目录下</li></ol><p>最终解压出来的：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 app/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 bin/</span><br><span class="line">-rw-r--r-- 1 Tianma 197121  12843  5月 11 18:10 build.prop</span><br><span class="line">-rw-r--r-- 1 Tianma 197121  20961  5月 11 18:10 compatibility_matrix.xml</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 data-app/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 etc/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 fake-libs/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 fake-libs64/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 fonts/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 framework/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 lib/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 lib64/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 lost+found/</span><br><span class="line">-rw-r--r-- 1 Tianma 197121   2808  5月 11 18:10 manifest.xml</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 media/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 priv-app/</span><br><span class="line">-rw-r--r-- 1 Tianma 197121 830651  5月 11 18:10 recovery-from-boot.p</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 tts/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 usr/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 vendor/</span><br><span class="line">drwxr-xr-x 1 Tianma 197121      0  5月 11 18:10 xbin/</span><br></pre></td></tr></table></figure></div><h3 id="macOS-下的拆包"><a href="#macOS-下的拆包" class="headerlink" title="macOS 下的拆包"></a>macOS 下的拆包</h3><p>系统：macOS 10.15</p><p>操作步骤：</p><ol><li><p>将 <code>system.new.dat.br</code> 解压缩为 <code>system.new.dat</code>，Android 8.1 及以后版本需要，低版本无需此步骤：</p><ul><li><p>安装 <code>brotli</code>：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install brotli</span><br></pre></td></tr></table></figure></div></li><li><p>使用 <code>brotli</code> 解压缩 <code>.br</code> 文件：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brotli --decompress system.new.dat.br -o system.new.dat</span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>将 <code>system.new.dat</code> 转为 <code>.img</code> 镜像文件：</p><ul><li><p>下载 <a href="https://github.com/xpirt/sdat2img" target="_blank" rel="noopener">sdat2img.py</a>，需要 <code>Python 2.7+</code> 或者 <code>Python 3.x</code> 环境</p></li><li><p><code>.dat</code> 文件转换:</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdat2img.py system.transfer.list system.new.dat system.img</span><br></pre></td></tr></table></figure></div><p> 此时的 <code>system.img</code> 是 <code>ext4</code> 格式的镜像文件</p></li></ul></li><li><p>挂载 <code>ext4</code> 格式的 <code>system.img</code> 文件：</p><ul><li><p>安装 <a href="https://github.com/osxfuse/osxfuse/releases" target="_blank" rel="noopener">OSX FUSE</a>，常规安装最新版即可</p></li><li><p>安装 <code>ext4fuse</code>: </p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ext4fuse</span><br></pre></td></tr></table></figure></div></li><li><p>使用 <code>ext4fuse</code> 挂载 <code>system.img</code>:</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ext4fuse system.img mounted-img/</span><br></pre></td></tr></table></figure></div></li></ul></li></ol><p>至此，就可以在 <code>mounted-img/</code> 目录下看到解压出来的包了：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ls                                                                                                </span><br><span class="line">acct              init.environ.rc                      lost+found</span><br><span class="line">apex              init.mishow.ctl.rc                   mnt</span><br><span class="line">bin               init.miui.cust.rc                    odm</span><br><span class="line">bugreports        init.miui.early_boot.sh              oem</span><br><span class="line">cache             init.miui.google_revenue_share.rc    proc</span><br><span class="line">charger           init.miui.google_revenue_share_v2.rc product</span><br><span class="line">config            init.miui.nativedebug.rc             product_services</span><br><span class="line">cust              init.miui.post_boot.sh               res</span><br><span class="line">d                 init.miui.rc                         sbin</span><br><span class="line">data              init.rc                              sdcard</span><br><span class="line">debug_ramdisk     init.recovery.hardware.rc            storage</span><br><span class="line">default.prop      init.recovery.qcom.rc                sys</span><br><span class="line">dev               init.usb.configfs.rc                 system</span><br><span class="line">etc               init.usb.rc                          ueventd.rc</span><br><span class="line">init              init.zygote32.rc                     vendor</span><br><span class="line">init.batteryd.rc  init.zygote64_32.rc                  verity_key</span><br></pre></td></tr></table></figure></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/chiragkrishna/system.new.dat-extractor" target="_blank" rel="noopener">system.new.dat-extractor</a></li><li><a href="https://github.com/jamflux/URTool" target="_blank" rel="noopener">URTool</a></li><li><a href="http://blog.hacktons.cn/2017/07/19/how-to-extract-miui-rom/" target="_blank" rel="noopener">【MIUI】从零开始，ROM拆包实践</a></li><li><a href="https://andreiconache.me/sdat2img-img2sdat/" target="_blank" rel="noopener">sdat2img &amp; img2sdat: Unpack Android .dat images</a></li><li><a href="https://brewinstall.org/install-brotli-on-mac-with-brew/" target="_blank" rel="noopener">Install brotli on Mac with Brew</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rom </tag>
            
            <tag> 逆向 </tag>
            
            <tag> Windows </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 类加载器机制</title>
      <link href="/post/android-classloader-mechanism/"/>
      <url>/post/android-classloader-mechanism/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><ul><li>在 Java 中 <code>.java</code> 源文件会先编译成 <code>.classs</code> 字节码文件，然后借由 JVM 虚拟机将 <code>.class</code> 字节码加载进内存，最终程序得到运行。其中<code>.class</code> 加载过程就是由 <code>类加载器(ClassLoader)</code> 来完成的。</li><li>而 Android 与 Java 相似， <code>.java</code> 源文件会先编译成 <code>.dex</code> 文件（<code>.class</code> 的集合），然后 Android 虚拟机（ ART虚拟机 和 Dalvik虚拟机）将 <code>.dex</code> 文件加载进内存，最终程序得到运行。<code>dex</code> 加载过程也是由 <code>类加载器(ClassLoader)</code>完成的。</li></ul><p>什么是类加载？</p><blockquote><p>凭借一个类的全限定名得到对应的可以描述该类的二进制字节流，并将这些字节流转化为方法区的某种数据结构，生成一个 <code>java.lang.Class</code> 对象作为方法区这个类各种数据访问入口。这个过程就是类加载。</p></blockquote><p>类加载过程就是由 <code>ClassLoader</code> 来完成的。</p><a id="more"></a><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>每个类加载器都有独立的类名称空间。不同类型的类加载器加载同一个 <code>.class</code> 文件得到的类其实是不一样的。只有被同样的加载器加载加载的情况下，对类的比较才有意义（即 Class 对象的 <code>equals</code>, <code>isAssignableFrom()</code>, <code>isInstance()</code> 以及 <code>instance</code> 关键字所对应的函数或者表达式的返回结果是否有效）</p><h2 id="Java中的类加载器"><a href="#Java中的类加载器" class="headerlink" title="Java中的类加载器"></a>Java中的类加载器</h2><p>Java 中的类加载器分为三种：</p><ul><li><code>Bootstrap ClassLoader</code>(启动类加载器)，加载 Java 中的核心类，在 JVM 中由 C++ 实现，其他的类加载器都是在 Java 层的实现。负责将 <code>%JAVA_HOME\lib%</code> 目录下 和 <code>-Xbootclasspath</code> 参数指定目录下的类加载到 JVM 中</li><li><code>Extension ClassLoader</code>(扩展类加载器)，加载 <code>%JAVA_HOME%/lib/ext</code> 和 <code>java.ext.dirs</code> 所指定的路径下的类到 JVM 中</li><li><code>Application ClassLoader</code>(应用类加载器)，加载 <code>%CLASSPATH%</code> 路径下的类。包含了自定义的 ClassLoader</li></ul><p>某个具体的类，该由哪个加载器加载呢，加载原则是什么呢？</p><p>其加载原则就是 <code>双亲委派</code> 原则。</p><blockquote><p>注：这里的 双亲委派 其实翻译的不够精确，容易让人误解为有两个父类，实际上 Java 是只能单继承的。英文原文为 <code>Parents Delegate</code> 这里应该理解为 <code>父亲委派</code> 原则。</p></blockquote><p>也就是说当某个类加载器要加载某个类时，先委托其父加载器加载，依次会传递至 <code>Bootstrap ClassLoader</code>。父加载器处理不了的，则由其子加载器来处理。</p><p>看一下源码：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 先检查这个类是否已经加载过了</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123; <span class="comment">// 类没有被加载过</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123; <span class="comment">// 委托父加载器加载</span></span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 最顶端，由Bootstrap加载器来加载</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123; <span class="comment">// 父加载器都没能加载这个类，则交给这个 ClassLoader 本身来加载</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>有了 <code>双亲委派</code> 原则，先会让上层类加载器加载，上层的类加载器优先级高。比如基础的类 <code>java.lang.Object</code> 无论是什么类加载器加载，都会传递给最顶层加载器去加载，最终得到的 <code>Object</code> 类都是同样的 <code>Object</code> 类，保证了一致性。如果没有 <code>双亲委派</code> 原则，那么各个类加载器加载的 <code>Object</code> 都不是同一个类，也就违背了前面提到的类加载器特点。</p><h2 id="Android-中的类加载器"><a href="#Android-中的类加载器" class="headerlink" title="Android 中的类加载器"></a>Android 中的类加载器</h2><p>Android 虚拟机中加载的是 <code>.dex</code> 文件(多个 <code>.class</code> 合并而来)，跟 Java 的类加载机制相似也不同。</p><img alt="Andriod 类加载器" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Android_ClassLoader_UML.png"><h2 id="Android-ClassLoader-源码分析"><a href="#Android-ClassLoader-源码分析" class="headerlink" title="Android ClassLoader 源码分析"></a>Android ClassLoader 源码分析</h2><p>在这里以 Android 9.0 为例进行类加载机制的源码分析，源码地址：<a href="https://android.googlesource.com/platform/libcore/+/refs/heads/pie-release/dalvik/src/main/java/dalvik/system" target="_blank" rel="noopener">/dalvik/system/</a></p><p>我们来看一下 Android 源码中对 <code>PathClassLoader</code> 和 <code>DexClassLoader</code> 的注释说明:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Provides a simple &#123;<span class="doctag">@link</span> ClassLoader&#125; implementation that operates on a list</span></span><br><span class="line"><span class="comment"> * of files and directories in the local file system, but does not attempt to</span></span><br><span class="line"><span class="comment"> * load classes from the network. Android uses this class for its system class</span></span><br><span class="line"><span class="comment"> * loader and for its application class loader(s).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>PathClassLoader</code> 用于加载系统类和应用本身的类。</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class loader that loads classes from &#123;<span class="doctag">@code</span> .jar&#125; and &#123;<span class="doctag">@code</span> .apk&#125; files</span></span><br><span class="line"><span class="comment"> * containing a &#123;<span class="doctag">@code</span> classes.dex&#125; entry. This can be used to execute code not</span></span><br><span class="line"><span class="comment"> * installed as part of an application.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Prior to API level 26, this class loader requires an</span></span><br><span class="line"><span class="comment"> * application-private, writable directory to cache optimized classes.</span></span><br><span class="line"><span class="comment"> * Use &#123;<span class="doctag">@code</span> Context.getCodeCacheDir()&#125; to create such a directory:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;   &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> *   File dexOutputDir = context.getCodeCacheDir();</span></span><br><span class="line"><span class="comment"> * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;Do not cache optimized classes on external storage.&lt;/strong&gt;</span></span><br><span class="line"><span class="comment"> * External storage does not provide access controls necessary to protect your</span></span><br><span class="line"><span class="comment"> * application from code injection attacks.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>DexClassLoader</code> 可以加载包含了 <code>.dex</code> 的 <code>.jar</code> 以及 <code>.apk</code> 中的类。<code>DexClassLoader</code> 可以用于加载 App 未被安装的那一部分的 <code>dex</code>。需要注意的是，不要把类优化缓存目录放在外部存储空间来避免注入攻击等不安全隐患。</p><h3 id="Android-类加载器构造函数"><a href="#Android-类加载器构造函数" class="headerlink" title="Android 类加载器构造函数"></a>Android 类加载器构造函数</h3><h4 id="ClassLoader-构造函数"><a href="#ClassLoader-构造函数" class="headerlink" title="ClassLoader 构造函数"></a>ClassLoader 构造函数</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemClassLoader</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ClassLoader loader = ClassLoader.createSystemClassLoader();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader parent;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ClassLoader <span class="title">createSystemClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String classPath = System.getProperty(<span class="string">"java.class.path"</span>, <span class="string">"."</span>);</span><br><span class="line">        String librarySearchPath = System.getProperty(<span class="string">"java.library.path"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PathClassLoader(classPath, librarySearchPath, BootClassLoader.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Void <span class="title">checkCreateClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClassLoader</span><span class="params">(Void unused, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ClassLoader</span><span class="params">(ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(checkCreateClassLoader(), parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">ClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(checkCreateClassLoader(), getSystemClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClassLoader <span class="title">getSystemClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SystemClassLoader.loader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>getSystemClassLoader()</code> 得到的是一个 <code>PathClassLoader</code>，它的父类加载器是一个 <code>BootClassLoader</code>。也就是说，系统默认的类加载器是 <code>PathClassLoader</code>。</p><h4 id="PathClassLoader-构造函数"><a href="#PathClassLoader-构造函数" class="headerlink" title="PathClassLoader 构造函数"></a>PathClassLoader 构造函数</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, <span class="keyword">null</span>, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PathClassLoader</span><span class="params">(String dexPath, String librarySearchPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>PathClassLoader</code> 构造函数很简单，直接调用父类 <code>BaseDexClassLoader</code> 的构造函数。第二个构造参数始终是 <code>null</code>，表示 <code>optimizedDirectory</code> 始终为 <code>null</code>。</p><h4 id="BaseDexClassLoader-构造函数"><a href="#BaseDexClassLoader-构造函数" class="headerlink" title="BaseDexClassLoader 构造函数"></a>BaseDexClassLoader 构造函数</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDexClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DexPathList pathList;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an instance.</span></span><br><span class="line"><span class="comment">     * Note that all the *.jar and *.apk files from &#123;<span class="doctag">@code</span> dexPath&#125; might be</span></span><br><span class="line"><span class="comment">     * first extracted in-memory before the code is loaded. This can be avoided</span></span><br><span class="line"><span class="comment">     * by passing raw dex files (*.dex) in the &#123;<span class="doctag">@code</span> dexPath&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexPath the list of jar/apk files containing classes and</span></span><br><span class="line"><span class="comment">     * resources, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;, which</span></span><br><span class="line"><span class="comment">     * defaults to &#123;<span class="doctag">@code</span> ":"&#125; on Android.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> optimizedDirectory this parameter is deprecated and has no effect since API level 26.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> librarySearchPath the list of directories containing native</span></span><br><span class="line"><span class="comment">     * libraries, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;; may be</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent the parent class loader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDexClassLoader</span><span class="params">(String dexPath, File optimizedDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">            String librarySearchPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(dexPath, optimizedDirectory, librarySearchPath, parent, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseDexClassLoader</span><span class="params">(String dexPath, File optimizedDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">            String librarySearchPath, ClassLoader parent, <span class="keyword">boolean</span> isTrusted)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">        <span class="keyword">this</span>.pathList = <span class="keyword">new</span> DexPathList(<span class="keyword">this</span>, dexPath, librarySearchPath, <span class="keyword">null</span>, isTrusted);</span><br><span class="line">        <span class="keyword">if</span> (reporter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            reportClassLoaderChain();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li><code>dexPath</code>：包含 类或者 资源 的 <code>.jar</code>/<code>.apk</code> 路径，如果是多个路径，则用 <code>File.pathSeparator</code>(默认是 <code>:</code>) 来分隔。当然也可以直接传 <code>dex</code> 的路径。</li><li><code>optimizedDirectory</code>：在 API 26(Android 8.0)的版本中，它表示 <code>odex</code>(optimized dex) 读写存放目录，如果传 <code>null</code> 则表示使用系统默认的目录来存储。自 Android 8.0 起，这个参数已经被弃用，不再生效，使用系统默认的目录。</li><li><code>librarySearchPath</code>：native 库文件存放目录，多个库文件则用 <code>File.pathSeparator</code>(默认是 <code>:</code>) 分隔。</li><li><code>parent</code>: 父类加载器</li><li><code>isTrusted</code>: 当前加载的 <code>dex</code> 是否受信任，如果受信任则可以访问平台隐藏的API，默认为 <code>false</code></li></ul><p><code>BaseDexClassLoader</code> 中有一个 <code>DexPathList</code> 类的 <code>pathList</code> 成员变量，它表示 <code>dexPath</code> 下的 <code>.dex</code> 列表。</p><h4 id="DexPathList-构造函数"><a href="#DexPathList-构造函数" class="headerlink" title="DexPathList 构造函数"></a>DexPathList 构造函数</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*package*/</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexPathList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEX_SUFFIX = <span class="string">".dex"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String zipSeparator = <span class="string">"!/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Element[] dexElements;</span><br><span class="line"></span><br><span class="line">    NativeLibraryElement[] nativeLibraryPathElements;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DexPathList</span><span class="params">(ClassLoader definingContext, String dexPath,</span></span></span><br><span class="line"><span class="function"><span class="params">            String librarySearchPath, File optimizedDirectory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(definingContext, dexPath, librarySearchPath, optimizedDirectory, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DexPathList(ClassLoader definingContext, String dexPath,</span><br><span class="line">            String librarySearchPath, File optimizedDirectory, <span class="keyword">boolean</span> isTrusted) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory,</span><br><span class="line">                                           suppressedExceptions, definingContext, isTrusted);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.nativeLibraryDirectories = splitPaths(librarySearchPath, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.systemNativeLibraryDirectories =</span><br><span class="line">                splitPaths(System.getProperty(<span class="string">"java.library.path"</span>), <span class="keyword">true</span>);</span><br><span class="line">        List&lt;File&gt; allNativeLibraryDirectories = <span class="keyword">new</span> ArrayList&lt;&gt;(nativeLibraryDirectories);</span><br><span class="line">        allNativeLibraryDirectories.addAll(systemNativeLibraryDirectories);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.nativeLibraryPathElements = makePathElements(allNativeLibraryDirectories);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>类 <code>Element</code> 用来描述一个 <code>dex</code> 文件所代表的元素。字段 <code>dexElements</code> 则为 <code>dex</code> 文件元素列表，通过 <code>makeDexElements()</code> 方法来初始化。</p><p>类 <code>NativeLibraryElement</code> 用来描述一个库文件所代表的元素，字段 <code>nativeLibraryPathElements</code> 则为库文件元素列表，通过 <code>makePathElements</code> 方法来初始化。</p><p><code>makeDexEleemnts()</code> 方法：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Element[] makeDexElements(List&lt;File&gt; files, File optimizedDirectory,</span><br><span class="line">        List&lt;IOException&gt; suppressedExceptions, ClassLoader loader, <span class="keyword">boolean</span> isTrusted) &#123;</span><br><span class="line">    Element[] elements = <span class="keyword">new</span> Element[files.size()];</span><br><span class="line">    <span class="keyword">int</span> elementsPos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开所有文件，加载文件中（包括原始的dex文件 或者 包含dex文件的压缩文件）所有的 dex 文件</span></span><br><span class="line">    <span class="keyword">for</span> (File file : files) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            elements[elementsPos++] = <span class="keyword">new</span> Element(file);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            String name = file.getName();</span><br><span class="line">            DexFile dex = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (name.endsWith(DEX_SUFFIX)) &#123;</span><br><span class="line">                <span class="comment">// `.dex` 文件</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 初始化表示 .dex 文件的 DexFile</span></span><br><span class="line">                    dex = loadDexFile(file, optimizedDirectory, loader, elements);</span><br><span class="line">                    <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        elements[elementsPos++] = <span class="keyword">new</span> Element(dex, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException suppressed) &#123;</span><br><span class="line">                    System.logE(<span class="string">"Unable to load dex file: "</span> + file, suppressed);</span><br><span class="line">                    suppressedExceptions.add(suppressed);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 包含 `.dex` 文件的压缩包（.jar/.zip 等）</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 初始化表示 .dex 文件的 DexFile</span></span><br><span class="line">                    dex = loadDexFile(file, optimizedDirectory, loader, elements);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException suppressed) &#123;</span><br><span class="line">                    suppressedExceptions.add(suppressed);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (dex == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    elements[elementsPos++] = <span class="keyword">new</span> Element(file);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    elements[elementsPos++] = <span class="keyword">new</span> Element(dex, file);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dex != <span class="keyword">null</span> &amp;&amp; isTrusted) &#123;</span><br><span class="line">            dex.setTrusted();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.logW(<span class="string">"ClassLoader referenced unknown path: "</span> + file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (elementsPos != elements.length) &#123;</span><br><span class="line">        elements = Arrays.copyOf(elements, elementsPos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elements;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化表示 .dex 文件的 DexFile</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DexFile <span class="title">loadDexFile</span><span class="params">(File file, File optimizedDirectory, ClassLoader loader,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Element[] elements)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (optimizedDirectory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DexFile(file, loader, elements);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String optimizedPath = optimizedPathFor(file, optimizedDirectory);</span><br><span class="line">        <span class="keyword">return</span> DexFile.loadDex(file.getPath(), optimizedPath, <span class="number">0</span>, loader, elements);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>makeDexElements()</code> 就是找到指定文件列表中的所有的 <code>.dex</code> 文件，以数组的形式返回。 <code>loadDexFile</code> 会初始化对应的 <code>DexFile</code> 类，<code>DexFile</code> 代表 <code>.dex</code> 文件。<code>DexFile</code> 在初始化过程中会打开对应的 <code>.dex</code> 文件：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object mCookie;</span><br><span class="line">    <span class="keyword">private</span> Object mInternalCookie;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mFileName;</span><br><span class="line"></span><br><span class="line">    DexFile(String fileName, ClassLoader loader, DexPathList.Element[] elements) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        mCookie = openDexFile(fileName, <span class="keyword">null</span>, <span class="number">0</span>, loader, elements);</span><br><span class="line">        mInternalCookie = mCookie;</span><br><span class="line">        mFileName = fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开 Dex 文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Object <span class="title">openDexFile</span><span class="params">(String sourceName, String outputName, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">            ClassLoader loader, DexPathList.Element[] elements)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> openDexFileNative(<span class="keyword">new</span> File(sourceName).getAbsolutePath(),</span><br><span class="line">                                 (outputName == <span class="keyword">null</span>)</span><br><span class="line">                                     ? <span class="keyword">null</span></span><br><span class="line">                                     : <span class="keyword">new</span> File(outputName).getAbsolutePath(),</span><br><span class="line">                                 flags,</span><br><span class="line">                                 loader,</span><br><span class="line">                                 elements);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// native 方法： 打开 Dex 文件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Object <span class="title">openDexFileNative</span><span class="params">(String sourceName, String outputName, <span class="keyword">int</span> flags,</span></span></span><br><span class="line"><span class="function"><span class="params">            ClassLoader loader, DexPathList.Element[] elements)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="DexClassLoader-构造函数"><a href="#DexClassLoader-构造函数" class="headerlink" title="DexClassLoader 构造函数"></a>DexClassLoader 构造函数</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DexClassLoader</span> <span class="keyword">extends</span> <span class="title">BaseDexClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DexClassLoader</span><span class="params">(String dexPath, String optimizedDirectory,</span></span></span><br><span class="line"><span class="function"><span class="params">            String librarySearchPath, ClassLoader parent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dexPath, <span class="keyword">null</span>, librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>DexClassLoader</code> 跟 <code>PathClassLoader</code> 相似。和前面一样，第二个参数 <code>optimizedDirectory</code> 也从 Android 8.0 开始弃用，不再有效。</p><h4 id="类加载器构造函数小结"><a href="#类加载器构造函数小结" class="headerlink" title="类加载器构造函数小结"></a>类加载器构造函数小结</h4><ol><li><code>BaseDexClassLoader</code> 类（<code>PathClassLoader</code> 和 <code>DexClassLoader</code>）在初始化过程中，会找到其相关的 <code>.dex</code> 列表进行初始化。</li><li>系统默认的类加载器就是 <code>PathClassLoader</code></li></ol><h3 id="Android-类加载器加载类过程"><a href="#Android-类加载器加载类过程" class="headerlink" title="Android 类加载器加载类过程"></a>Android 类加载器加载类过程</h3><p>类加载器加载类的过程，其实就是 <code>ClassLoader</code> 的方法 <code>loadClass()</code></p><h4 id="ClassLoader-loadClass"><a href="#ClassLoader-loadClass" class="headerlink" title="ClassLoader#loadClass()"></a>ClassLoader#loadClass()</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = findClass(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>我们之前分析过，类加载过程采用的遵循 <code>双亲委派</code> 原则。<code>ClassLoader#findClass()</code> 方法会直接抛出异常，说明 <code>ClassLoader</code> 的子类需要重写该方法才有意义。</p><h4 id="BaseDexClassLoader-findClass"><a href="#BaseDexClassLoader-findClass" class="headerlink" title="BaseDexClassLoader#findClass()"></a>BaseDexClassLoader#findClass()</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDexClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DexPathList pathList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        List&lt;Throwable&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;Throwable&gt;();</span><br><span class="line">        Class c = pathList.findClass(name, suppressedExceptions);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ClassNotFoundException cnfe = <span class="keyword">new</span> ClassNotFoundException(</span><br><span class="line">                    <span class="string">"Didn't find class \""</span> + name + <span class="string">"\" on path: "</span> + pathList);</span><br><span class="line">            <span class="keyword">for</span> (Throwable t : suppressedExceptions) &#123;</span><br><span class="line">                cnfe.addSuppressed(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> cnfe;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>BaseDexClassLoader</code> 实现了 <code>findClass</code> 方法，实际上是在通过 <code>DexPathList#findClass()</code> 方法在 <code>pathList</code> 中找有没有指定的类。</p><h4 id="DexPathList-findClass"><a href="#DexPathList-findClass" class="headerlink" title="DexPathList#findClass()"></a>DexPathList#findClass()</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*package*/</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexPathList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Element[] dexElements;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; findClass(String name, List&lt;Throwable&gt; suppressed) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Element element : dexElements) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = element.findClass(name, definingContext, suppressed);</span><br><span class="line">            <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dexElementsSuppressedExceptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">            suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*package*/</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> File path;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> DexFile dexFile;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; findClass(String name, ClassLoader definingContext, List&lt;Throwable&gt; suppressed) &#123;</span><br><span class="line">            <span class="keyword">return</span> dexFile != <span class="keyword">null</span> ? dexFile.loadClassBinaryName(name, definingContext, suppressed)</span><br><span class="line">                    : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>从上面源码中，可以发现，类加载是在 <code>dexElements</code> 数组中寻找对应的类，一旦在某一个 <code>.dex</code> 文件中找到指定的类，则不再继续查找，并直接返回。</p><h4 id="DexFile-loadClassBinaryName"><a href="#DexFile-loadClassBinaryName" class="headerlink" title="DexFile#loadClassBinaryName()"></a>DexFile#loadClassBinaryName()</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DexFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Class <span class="title">loadClassBinaryName</span><span class="params">(String name, ClassLoader loader, List&lt;Throwable&gt; suppressed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(name, loader, mCookie, <span class="keyword">this</span>, suppressed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Class <span class="title">defineClass</span><span class="params">(String name, ClassLoader loader, Object cookie,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     DexFile dexFile, List&lt;Throwable&gt; suppressed)</span> </span>&#123;</span><br><span class="line">        Class result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = defineClassNative(name, loader, cookie, dexFile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoClassDefFoundError e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (suppressed != <span class="keyword">null</span>) &#123;</span><br><span class="line">                suppressed.add(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (suppressed != <span class="keyword">null</span>) &#123;</span><br><span class="line">                suppressed.add(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Class <span class="title">defineClassNative</span><span class="params">(String name, ClassLoader loader, Object cookie, DexFile dexFile)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></div><p>最终会调用 native 层的 <code>defineClassNative</code> 方法，来查找 <code>.dex</code> 文件中相应的类。</p><h4 id="Android-类加载器加载类过程小结"><a href="#Android-类加载器加载类过程小结" class="headerlink" title="Android 类加载器加载类过程小结"></a>Android 类加载器加载类过程小结</h4><ul><li>Android 类加载过程也遵循 <code>双亲委派</code> 原则</li><li><code>BaseDexClassLoader</code> 加载类是顺序的，前面的 <code>.dex</code> 中如果能找到指定的类，则后面的不再查找</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Java 和 Android 类加载过程都遵循 <code>双亲委派</code> 原则</li><li><code>PathClassLoader</code> 用于加载系统类和应用本身的类。系统默认的类加载器就是 <code>PathClassLoader</code></li><li><code>DexClassLoader</code> 可以用于加载 App 未被安装的那一部分的 <code>dex</code>。</li><li><code>BaseDexClassLoader</code> 加载类是顺序的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 热修复 </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> 类加载器 </tag>
            
            <tag> 插件化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米8 刷入 MIUI 欧洲版并 Root</title>
      <link href="/post/installation-guide-of-eu-miui-for-dipper/"/>
      <url>/post/installation-guide-of-eu-miui-for-dipper/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>先大致介绍一下各个 MIUI 版本：</p><ul><li><strong>国内版 MIUI</strong> 国内版就是官方 MIUI 的国内版，优点：能吃上新功能，有小爱，缺点：有广告，臃肿，后台常驻很多系统组件，同时有不少系统组件没办法禁用，Google 套件不太好安装，安装好了之后也会经常因为不稳定而 Crash。官方站点：<a href="http://www.miui.com/index.html" target="_blank" rel="noopener">米柚</a></li><li><strong>国际版 MIUI</strong> 也称为 <strong>俄罗斯版</strong>，国际版就是官方 MIUI 的国际版，优点：自带 Google 套件，无广告，缺点：还是比较臃肿，自带的 Google 套件过多。官方站点：<a href="https://en.miui.com/forum.php" target="_blank" rel="noopener">MIUI Global</a></li><li><strong>欧洲版 MIUI</strong> 也称为 <strong>波兰版</strong>，属于 MIUI 的第三方定制 Rom，也就是通常所说的 魔改MIUI，但不是小作坊制作，稳定性比较可靠。优点：自带 Google 套件，无广告，不臃肿，缺点：无小爱。 官方站点：<a href="https://xiaomi.eu/community/" target="_blank" rel="noopener">XIAOMI.EU</a><a id="more"></a></li></ul><h3 id="刷入教程"><a href="#刷入教程" class="headerlink" title="刷入教程"></a>刷入教程</h3><p>以最新的开发版（18.12.27）的欧洲版为例，已经在该版本上成功刷入。</p><ol><li>解锁小米手机（本质是解锁 Bootloader），地址：<a href="http://www.miui.com/unlock/index.html" target="_blank" rel="noopener">解锁小米手机</a></li><li>打开手机开发者选项，下载并刷入 LR.TEAM 制作的非官方 Twrp，使用该帖子中自带的一键刷入的bat脚本，按提示刷入twrp。地址：<a href="http://www.miui.com/thread-15306132-1-1.html" target="_blank" rel="noopener">LR.Team 小米8 专版TWRP</a></li><li>下载需要刷入的包<ul><li>下载Rom，18.12.27 的欧洲版 MIUI 卡刷包，帖子地址：<a href="https://xiaomi.eu/community/threads/8-12-27.48379/" target="_blank" rel="noopener">MIUI 10 18.12.27</a></li><li>下载通用的 <code>Disable DM-verify</code> 包，帖子地址：<a href="https://forum.xda-developers.com/android/software/universal-dm-verity-forceencrypt-t3817389" target="_blank" rel="noopener">Universal DM-Verity, ForceEncrypt, Disk Quota Disablers</a></li><li>下载 Magisk-v18.0.zip，地址：<a href="https://github.com/topjohnwu/Magisk/releases" target="_blank" rel="noopener">Magisk Github Releases</a></li></ul></li><li>刷入卡刷包，并Root<ul><li>三清：进入 Recovery 模式，进入TWRP -&gt; 清除 -&gt; 高级清除 -&gt; 选择 “system”, “cache”, “data” 并清除；如果底包是其他 MIUI ，则还需要格式化data，注意格式化data会擦除掉内置存储，具体步骤： TWRP -&gt; 清除 -&gt; 格式化data</li><li>刷入 MIUI Rom 卡刷包：将卡刷包放进手机SD卡中，进入 TWRP -&gt; 安装 -&gt; 选择卡刷包并确认刷入</li><li>刷入 Disable-DM-verify 的包：TWRP -&gt; 安装 -&gt; 选择并确认刷入</li><li>Root系统：刷入 Magisk-v18.0.zip 包，步骤同上。</li><li>重启，大功告成！</li></ul></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>关于卡米的问题：<a href="https://forum.xda-developers.com/showpost.php?p=78557655&postcount=4" target="_blank" rel="noopener">TWRP bootloop after restore…</a></li><li>关于卡米的问题：<a href="https://xiaomi.eu/community/threads/bootloop-after-root.45943/#post-440013" target="_blank" rel="noopener">Bootloop after root</a></li><li>关于卡米的问题：<a href="https://xiaomi.eu/community/threads/another-bootloop-mi-mix2.44618/" target="_blank" rel="noopener">Another bootloop Mi Mix2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玩机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xposed注册系统服务</title>
      <link href="/post/xposed-inject-system-service/"/>
      <url>/post/xposed-inject-system-service/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我们知道像 <code>ClipboardManager</code>, <code>ActivityManager</code> 实际上底层都是通过 <code>Binder</code> 以 <code>aidl</code> 接口的形式实现的，对应的服务端类名都是 <code>xxxService</code> 的形式，例如 <code>ClipboardService</code>, <code>ActivityManagerService</code>。幸运的是，在 Xposed 框架支持下，我们也可以注册自定义的系统服务。</p><a id="more"></a><h3 id="系统服务注册流程分析"><a href="#系统服务注册流程分析" class="headerlink" title="系统服务注册流程分析"></a>系统服务注册流程分析</h3><p>不想看源码分析过程的，可以直接跳到 <a href="#自定义系统服务实现">自定义系统服务实现</a>。</p><p>在这里以 <code>API 27(Android 8.1)</code> 的 <code>ActivityManagerService</code> 为例，<code>ActivityManagerService</code> 是系统主进程的开端，这个类是 “核心Java系统” 开始以及 “系统上下文” 创建的地方。</p><p><code>SystemServer</code> 由 <code>Zygote</code> 进程 fork 而来，其进程名为 <code>system_server</code>，大概流程为：<br><code>ZygoteInit#main()</code><br>&nbsp;-&gt; <code>Zygote#forkSystemServer()</code><br>&nbsp;&nbsp;-&gt; <code>com_android_internal_os_Zygote#nativeForkSystemServer()</code><br>&nbsp;&nbsp;&nbsp;-&gt; <code>com_android_internal_os_Zygote#ForkAndSpecializeCommon()</code><br>&nbsp;&nbsp;&nbsp;&nbsp;-&gt; <code>ZygoteInit#handleSystemServerProcess()</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt; <code>ZygoteInit#zygoteInit()</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt; <code>RuntimeInit#applicationInit()</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt;  <code>RuntimeInit#findStaticMain()</code><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&gt; <code>SystemServer#main()</code></p><p>关于 <code>SystemServer</code> 更详细的生成过程分析，请参看 <a href="http://gityuan.com/2016/02/14/android-system-server/" target="_blank" rel="noopener">Android系统启动-SystemServer上篇</a></p><p>下面分析 <code>SystemServer</code> 方法都做了什么：</p><ul><li><p><code>SystemServer#main()</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">new</span> SystemServer().run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建主线程 Looper</span></span><br><span class="line">  Looper.prepareMainLooper();</span><br><span class="line">  <span class="comment">// 创建系统Context</span></span><br><span class="line">  createSystemContext();</span><br><span class="line">  <span class="comment">// 创建SystemServiceManager</span></span><br><span class="line">  mSystemServiceManager = <span class="keyword">new</span> SystemServiceManager(mSystemContext);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启动各种系统服务</span></span><br><span class="line">  <span class="comment">// 1. 启动引导服务</span></span><br><span class="line">  startBootstrapServices();</span><br><span class="line">  <span class="comment">// 2. 启动核心服务</span></span><br><span class="line">  startCoreServices();</span><br><span class="line">  <span class="comment">// 3. 启动其他服务</span></span><br><span class="line">  startOtherServices();</span><br><span class="line"></span><br><span class="line">  Looper.loop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>创建系统Context - <code>createSystemContext()</code></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createSystemContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ActivityThread activityThread = ActivityThread.systemMain();</span><br><span class="line">  mSystemContext = activityThread.getSystemContext();</span><br><span class="line">  mSystemContext.setTheme(DEFAULT_SYSTEM_THEME);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Context systemUiContext = activityThread.getSystemUiContext();</span><br><span class="line">  systemUiContext.setTheme(DEFAULT_SYSTEM_THEME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>关于 <code>ActivityThread#systemMain()</code> 中创建了 <code>ActivityThread</code> 对象，并调用其 <code>attach</code> 方法：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ActivityThread <span class="title">systemMain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ActivityThread thread = <span class="keyword">new</span> ActivityThread();</span><br><span class="line">  thread.attach(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ActivityThread() &#123;</span><br><span class="line">  mResoureceManager = ResoureceManager.getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(<span class="keyword">boolean</span> attach)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!system) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 系统Context</span></span><br><span class="line">    android.ddm.DdmHandleAppName.setAppName(<span class="string">"system_process"</span>,UserHandle.myUserId());</span><br><span class="line">    mInstrumentation = <span class="keyword">new</span> Instrumentation();</span><br><span class="line">    ContextImpl context = ContextImpl.createAppContext(<span class="keyword">this</span>, getSystemContext().mPackageInfo);</span><br><span class="line">    mInitialApplication = context.mPackageInfo.makeApplication(<span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">    mInitialApplication.onCreate();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>关于 <code>Application</code> 的创建过程，就不再分析了。</p></li><li><p>启动引导服务 - <code>startBootstrapServices()</code></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化 ActivityManagerService</span></span><br><span class="line">mActivityManagerService = mSystemServiceManager.startService(ActivityManagerService.Lifecycle.class).getService();</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 设置系统进程</span></span><br><span class="line">mActivityManagerService.setSystemProcess();</span><br></pre></td></tr></table></figure></div><p>追踪 <code>SystemServiceManager#startService</code>:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends SystemService&gt; <span class="function">T <span class="title">startService</span><span class="params">(Class&lt;T&gt; serviceClass)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> String name = serviceClass.getName();</span><br><span class="line">  <span class="keyword">final</span> T service;</span><br><span class="line">  Constructor&lt;T&gt; constructor = serviceClass.getConstructor(Context.class);</span><br><span class="line">  service = constructor.newInstance(mContext);</span><br><span class="line">  startService(service);</span><br><span class="line">  <span class="keyword">return</span> service;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startService</span><span class="params">(<span class="keyword">final</span> SystemService service)</span> </span>&#123;</span><br><span class="line">  service.onStart();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>SystemServiceManager#startService()</code> 最终会调用 <code>SystemService</code> 实现类的 <code>onStart()</code> 方法。</p><p>也就是说，会调用 <code>ActivityManagerService.Lifecycle#onStart()</code> 方法：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Lifecycle</span> <span class="keyword">extends</span> <span class="title">SystemService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ActivityManagerService mService;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Lifecycle</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(context);</span><br><span class="line">    mService = <span class="keyword">new</span> ActivityManagerService();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mService.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ActivityManagerService <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mService();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>最终会调用 <code>ActivityManagerService</code> 的构造方法和 <code>start</code> 方法，完成其初始化和初步配置。</p><p>再看一下 <code>ActivityManagerService#setSystemProcess()</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSystemProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ServiceManager.addService(Context.ACTIVITY_SERVICE, <span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>至此，<code>ActivityServiceManager</code> 作为系统服务被注册添加到 <code>ServiceManager</code> 当中。</p></li></ul><h3 id="自定义系统服务实现"><a href="#自定义系统服务实现" class="headerlink" title="自定义系统服务实现"></a>自定义系统服务实现</h3><ol><li><p>自定义 <code>ICustomService.aidl</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianma.customsystemservice.aidl;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICustomService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* toUppercase */</span></span><br><span class="line">    <span class="function">String <span class="title">toUpperCase</span><span class="params">(String str)</span></span>;</span><br><span class="line">    <span class="comment">/* add numbers */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>创建 <code>ICustomService.aidl</code> 的实现类 <code>CustomService.java</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomService</span> <span class="keyword">extends</span> <span class="title">ICustomService</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toUpperCase</span><span class="params">(String str)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>创建 <code>CustomServiceHook</code> 类实现 <code>IXposedHookZygoteInit</code>，用来注册系统服务：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomServiceHook</span> <span class="keyword">implements</span> <span class="title">IXposedHookZygoteInit</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initZygote</span><span class="params">(StartupParam startupParam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            <span class="comment">// android 5.0+</span></span><br><span class="line">            Class&lt;?&gt; activityThread = Class.forName(<span class="string">"android.app.ActivityThread"</span>);</span><br><span class="line">            XposedBridge.hookAllMethods(activityThread, <span class="string">"systemMain"</span>, <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                    <span class="keyword">final</span> ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">                    Class&lt;?&gt; ams = XposedHelpers.findClass(<span class="string">"com.android.server.am.ActivityManagerService"</span>, classLoader);</span><br><span class="line"></span><br><span class="line">                    XposedHelpers.findAndHookConstructor(ams,</span><br><span class="line">                            Context.class,</span><br><span class="line">                            <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                                    CustomService.register((Context) param.args[<span class="number">0</span>], classLoader);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ClassLoader classLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">            Class&lt;?&gt; ams = XposedHelpers.findClass(<span class="string">"com.android.server.am.ActivityManagerService"</span>, classLoader);</span><br><span class="line">            XposedBridge.hookAllMethods(ams,</span><br><span class="line">                    <span class="string">"main"</span>,</span><br><span class="line">                    <span class="keyword">new</span> XC_MethodHook() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                            CustomService.register((Context) param.getResult(), classLoader);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述代码中，<code>ActivityManagerService</code> 是系统主进程的开端，这个类是 “核心Java系统” 开始以及 “系统上下文” 创建的地方。在 <code>Android L</code> 之前，可以直接访问 <code>ActivityManagerService</code> 这个类；从 <code>Android L</code> 起系统使用了独立的类加载器(ClassLoader)，需要先 Hook <code>ActivityThread</code>，因为 <code>ActivityThread</code> 中创建了可以用来访问 <code>ActivityManagerService</code> 的类加载器。</p></li><li><p><code>CustomService</code> 的 <code>register()</code> 方法用来注册系统服务：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Context context, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; svcManager = XposedHelpers.findClass(<span class="string">"android.os.ServiceManager"</span>, classLoader);</span><br><span class="line"></span><br><span class="line">    CustomService customService = <span class="keyword">new</span> CustomService(context);</span><br><span class="line">    XposedHelpers.callStaticMethod(svcManager,</span><br><span class="line">            <span class="comment">/* methodName */</span><span class="string">"addService"</span>,</span><br><span class="line">            <span class="comment">/* name       */</span>getServiceName(),</span><br><span class="line">            <span class="comment">/* service    */</span> customService,</span><br><span class="line">            <span class="comment">/* allowIsolated */</span> <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    log(<span class="string">"register service succeed"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getServiceName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 5.0 之后，selinux "user." 前缀</span></span><br><span class="line">    <span class="keyword">return</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP ? <span class="string">"user."</span> : <span class="string">""</span>) + <span class="string">"customservice"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其实就是通过调用 <code>ServiceManager#addService()</code> 来实现，需要注意的是，<code>Android L</code> 起，系统服务名需要加 <code>user.</code> 前缀。</p></li></ol><p>完整的 <code>CustomService</code> 实现：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianma.customsystemservice.aidl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.os.RemoteException;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.XposedHelpers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomService</span> <span class="keyword">extends</span> <span class="title">ICustomService</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"CustomService"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ICustomService mClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CustomService</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toUpperCase</span><span class="params">(String str)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Context context, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; svcManager = XposedHelpers.findClass(<span class="string">"android.os.ServiceManager"</span>, classLoader);</span><br><span class="line"></span><br><span class="line">        CustomService customService = <span class="keyword">new</span> CustomService(context);</span><br><span class="line">        XposedHelpers.callStaticMethod(svcManager,</span><br><span class="line">                <span class="comment">/* methodName */</span><span class="string">"addService"</span>,</span><br><span class="line">                <span class="comment">/* name       */</span>getServiceName(),</span><br><span class="line">                <span class="comment">/* service    */</span> customService,</span><br><span class="line">                <span class="comment">/* allowIsolated */</span> <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        log(<span class="string">"register service succeed"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getServiceName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 5.0 之后，selinux "user." 前缀</span></span><br><span class="line">        <span class="keyword">return</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP ? <span class="string">"user."</span> : <span class="string">""</span>) + <span class="string">"customservice"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ICustomService <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mClient == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; svcManager = Class.forName(<span class="string">"android.os.ServiceManager"</span>);</span><br><span class="line">                Method getServiceMethod = svcManager.getDeclaredMethod(<span class="string">"getService"</span>, String.class);</span><br><span class="line">                IBinder binder = (IBinder) getServiceMethod.invoke(<span class="keyword">null</span>, getServiceName());</span><br><span class="line">                mClient = ICustomService.Stub.asInterface(binder);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                log(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        Log.e(TAG, Log.getStackTraceString(t));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>调用：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ICustomService customService = CustomService.getService();</span><br><span class="line"><span class="keyword">if</span> (customService != <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="keyword">int</span> sum = customService.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  String upper = customService.toUpperCase(<span class="string">"hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>完整示例源码：<a href="https://github.com/tianma8023/CustomSystemService" target="_blank" rel="noopener">CustomSystemService</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://nameless-technology.blogspot.com/2013/11/custom-system-service-using-xposedbridge.html" target="_blank" rel="noopener">Custom System Service using XposedBridge</a><br><a href="https://github.com/M66B/XPrivacy/blob/db324f19b5b57583502aeb2d7f4cd9716d984594/src/biz/bokhorst/xprivacy/XPrivacy.java#L111" target="_blank" rel="noopener">XPrivacy - XPrivacy.java</a><br><a href="https://github.com/rovo89/XposedBridge/issues/72" target="_blank" rel="noopener">Xposed Issue - classLoader ClassNotFoundException</a><br><a href="http://gityuan.com/2016/02/14/android-system-server/" target="_blank" rel="noopener">Android系统启动-SystemServer上篇</a><br><a href="http://gityuan.com/2016/02/20/android-system-server-2/" target="_blank" rel="noopener">Android系统启动-SystemServer下篇</a><br><a href="https://www.cnblogs.com/wyxy2005/p/7987543.html" target="_blank" rel="noopener">基于xposed实现android注册系统服务，解决跨进程共享数据问题</a><br><a href="https://haoutil.com/topic/xposed-add-custom-system-service" target="_blank" rel="noopener">使用Xposed添加自定义系统服务</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> Xposed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android shell service 命令</title>
      <link href="/post/android-shell-service-commands/"/>
      <url>/post/android-shell-service-commands/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Android Shell 中有 <code>service</code> 命令，其二进制文件位于 <code>/system/bin/service</code>，该命令可以用来调试，甚至是应用于开发。</p><a id="more"></a><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>先看一下 <code>service</code> 用法：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell service</span></span><br><span class="line">Usage: service [-h|-?]</span><br><span class="line">       service list</span><br><span class="line">       service check SERVICE</span><br><span class="line">       service call SERVICE CODE [i32 N | i64 N | f N | d N | s16 STR ] ...</span><br><span class="line">Options:</span><br><span class="line">   i32: Write the 32-bit integer N into the send parcel.</span><br><span class="line">   i64: Write the 64-bit integer N into the send parcel.</span><br><span class="line">   f:   Write the 32-bit single-precision number N into the send parcel.</span><br><span class="line">   d:   Write the 64-bit double-precision number N into the send parcel.</span><br><span class="line">   s16: Write the UTF-16 string STR into the send parcel.</span><br></pre></td></tr></table></figure></div><ol><li><p><code>service</code> / <code>service -h</code> / <code>service -?</code> 都是用来获取 <code>service</code> 命令帮助信息的命令。</p></li><li><p><code>service list</code> 用来列出当前可用的系统服务。<br>比如：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell service list</span></span><br><span class="line">Found 126 services:</span><br><span class="line">0       sip: [android.net.sip.ISipService]</span><br><span class="line">1       Genyd: [com.genymotion.genyd.IGenydService]</span><br><span class="line">2       SystemPatcher: [com.genymotion.systempatcher.ISystemPatcher]</span><br><span class="line">3       carrier_config: [com.android.internal.telephony.ICarrierConfigLoader]</span><br><span class="line">4       phone: [com.android.internal.telephony.ITelephony]</span><br><span class="line">...</span><br><span class="line">43      notification: [android.app.INotificationManager]</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div></li><li><p><code>service check SERVICE</code> 用来检测指定的服务是否可用。<br>比如:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell service check notification</span></span><br><span class="line">Service notification: found</span><br></pre></td></tr></table></figure></div><p>表示 <code>notification</code> 服务可用。</p></li><li><p><code>service call</code> 命令用来调用服务中的方法，具体在下文单独说明。</p></li></ol><h3 id="service-call-命令"><a href="#service-call-命令" class="headerlink" title="service call 命令"></a>service call 命令</h3><p><code>service call SERVICE CODE [i32 N | i64 N | f N | d N | s16 STR ] ...</code><br>此命令用来调用服务中的方法，其中：</p><ul><li><code>SERVICE</code> 代表服务名称；</li><li><code>CODE</code> 代表所要调用的的服务中的方法在其 <code>aidl</code> 文件中对应的位置，第几个位置就调第几个方法；</li><li><code>[i32 N | i64 N | f N | d N | s16 STR ] ...</code> 表示方法的参数，其中：<code>i32</code> 表示 <code>int</code> 类型，<code>i64</code> 表示 <code>long</code> 类型，<code>f</code> 表示 <code>float</code> 类型，<code>d</code> 表示 <code>double</code> 类型，<code>s16</code> 表示 <code>String</code> 类型。</li></ul><p>该命令语法如下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service call &lt;your_service_name&gt; &lt;number at which the founction in your_service_name.aidl&gt; &lt;type of argument&gt; &lt;argument&gt;</span><br><span class="line">即</span><br><span class="line">service call &lt;服务名&gt; &lt;服务名.aidl中的第几个方法&gt; &lt;参数类型&gt; &lt;参数值&gt;</span><br></pre></td></tr></table></figure></div><p>那么 <code>SERVICE</code> 所代表的系统服务的 <code>aidl</code> 源文件到底在哪儿看呢？下文以 <code>notification</code> 系统服务为例。</p><ol><li><p>首先调用 <code>service list</code> 找到指定系统服务对应的 <code>aidl</code> ：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> adb shell service list</span></span><br><span class="line">43      notification: [android.app.INotificationManager]</span><br></pre></td></tr></table></figure></div><p><code>notification</code> 命令对应的系统服务的 <code>aidl</code> 是 <code>android.app.INotificationManager.aidl</code></p></li><li><p>其次，在 <code>Android</code> 的 <code>framework</code> 源码中找到对应的 <code>aidl</code> 文件，详细步骤为：</p><ul><li><p><code>android framework</code> 源码地址为：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://android.googlesource.com/platform/frameworks/base/</span><br></pre></td></tr></table></figure></div></li><li><p>找到对应的系统版本，以 <code>android-9.0.0_r18</code> 为例，该版本源码地址为：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://android.googlesource.com/platform/frameworks/base/+/android-9.0.0_r18</span><br></pre></td></tr></table></figure></div></li><li><p><code>android.app.INotificationManager.aidl</code> 对应的路径为 <code>/core/java/android/app/INotificationManager.aidl</code>，找到地址：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://android.googlesource.com/platform/frameworks/base/+/android-9.0.0_r18/core/java/android/app/INotificationManager.aidl</span><br></pre></td></tr></table></figure></div></li></ul><p>最终地址为：<a href="https://android.googlesource.com/platform/frameworks/base/+/android-9.0.0_r18/core/java/android/app/INotificationManager.aidl" target="_blank" rel="noopener">android-9.0.0_r18 INotificationManager.aidl</a></p></li></ol><p>我们看一下 <code>android-9.0.0_r18</code> 版本的 <code>INotificationManager.aidl</code> 部分片段：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">INotificationManager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelAllNotifications</span><span class="params">(String pkg, <span class="keyword">int</span> userId)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearData</span><span class="params">(String pkg, <span class="keyword">int</span> uid, <span class="keyword">boolean</span> fromApp)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueueToast</span><span class="params">(String pkg, ITransientNotification callback, <span class="keyword">int</span> duration)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelToast</span><span class="params">(String pkg, ITransientNotification callback)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">finishToken</span><span class="params">(String pkg, ITransientNotification callback)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enqueueNotificationWithTag</span><span class="params">(String pkg, String opPkg, String tag, <span class="keyword">int</span> id,</span></span></span><br><span class="line"><span class="function"><span class="params">            in Notification notification, <span class="keyword">int</span> userId)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancelNotificationWithTag</span><span class="params">(String pkg, String tag, <span class="keyword">int</span> id, <span class="keyword">int</span> userId)</span></span>;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>cancelAllNotifications()</code> 对应的 <code>CODE</code> 就是 <code>1</code>。</p><ul><li><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service call notification 1</span><br></pre></td></tr></table></figure></div><p>表示清除当前所有的通知，其中 <code>pkg</code>, <code>userId</code> 参数缺省。</p></li><li><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service call notification 1 s16 'com.example.package'</span><br></pre></td></tr></table></figure></div><p>表示清除当前所有包名为 <code>com.example.package</code> 的 App 发出的通知。</p></li><li><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service call notification 2 s16 'com.example.package' i32 108 i32 1</span><br></pre></td></tr></table></figure></div><p>表示调用 <code>clearData(&quot;com.example.package&quot;, 108, 1);</code> 其中布尔值 <code>true</code> 用 <code>132 1</code> 表示。</p></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>service call CODE</code> 中的 <code>CODE</code> 根据当前系统版本对应的 <code>aidl</code> 变化而变化，适用于调试，而应用于产品开发则需要充分考虑版本问题。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://android.stackexchange.com/questions/34625/where-to-find-description-of-all-system-bin-service-calls#answer-203636" target="_blank" rel="noopener">Answer - Where to find description of all ‘/system/bin/service’ calls</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell命令 </tag>
            
            <tag> ADB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webview加载本地资源时的多语言国际化问题</title>
      <link href="/post/i18n-issue-when-Webview-load-local-res/"/>
      <url>/post/i18n-issue-when-Webview-load-local-res/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在开发中，有时候 App 的本地资源（如离线 html 文件）等会用 Webview 去加载，如果同时需要考虑多语言国际化问题，应该如何处理呢？</p><a id="more"></a><h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>比如现在有这样一个需求，一般 App 都有相关的权限申请说明，现在要求用 Webview 去加载本地的 html 资源文件并显示相关权限声明，且支持多语言国际化。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>我们知道，<code>res</code> 目录可以方便进行多语言国际化的支持。那现在可以把权限声明（<code>perm_state.html</code>）文件放置于 <code>/res/raw/</code> 的不同语言目录中，以实现国际化：</p><p>简体中文的支持：<code>/res/raw-zh-rCN/perm_state.html</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="HTML"><figure class="highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>权限声明<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">            body &#123;</span></span><br><span class="line"><span class="undefined">                padding: 0 10px;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#0</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">a</span><span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="undefined">                font-size: 16px;</span></span><br><span class="line"><span class="undefined">                font-weight: bold;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">a</span><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="undefined">                font-size: 14px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>接收短信（RECEIVE_SMS）<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>解析短信中的验证码需要能够接收短信权限。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>默认英文支持：<code>/res/raw/perm_state.html</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="HTML"><figure class="highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Permission Statement<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">            body &#123;</span></span><br><span class="line"><span class="undefined">                padding: 0 10px;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#0</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">a</span><span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="undefined">                font-size: 16px;</span></span><br><span class="line"><span class="undefined">                font-weight: bold;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-tag">a</span><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="undefined">                font-size: 14px;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>Receive SMS permission<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>Receive SMS permission should be granted for parsing SMS.<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>ResUtils#loadRawRes</code> 用来加载 <code>/res/raw</code> 资源文件中的内容：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">loadRawRes</span><span class="params">(Context context, @RawRes <span class="keyword">int</span> rawId)</span> </span>&#123;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        String data = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = context.getResources().openRawResource(rawId);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">            is.read(buffer);</span><br><span class="line">            data = <span class="keyword">new</span> String(buffer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            XLog.e(<span class="string">"Error occurs when open raw file, id = "</span> + rawId, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>接下来就是用 <code>Webview</code> 加载 <code>html</code> 资源文件：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadHtmlData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String data = ResUtils.loadRawData(context, R.raw.perm_state);</span><br><span class="line">    weview.loadData(data, <span class="string">"text/html"</span>, <span class="string">"utf-8"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>以上就是一种解决方案，那么，有没有可以优化的空间呢？</p><p>观察到，<code>/res/raw-zh-rCN/perm_state.html</code> 和 <code>/res/raw/perm_state.html</code> 是有相同的 <code>css</code> 样式的，那么能否将 <code>css</code> 样式抽取出来共用呢？当然是可以的 ~</p><h3 id="方案优化"><a href="#方案优化" class="headerlink" title="方案优化"></a>方案优化</h3><p>把 <code>css</code> 样式抽取出来生成 <code>perm_state_style.css</code> 文件：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="CSS"><figure class="highlight /css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.title</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>/res/raw-zh-rCN/perm_state.html</code> 修改为：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="HTML"><figure class="highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>权限声明<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"perm_state_style.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>接收短信（RECEIVE_SMS）<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>解析短信中的验证码需要能够接收短信权限。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>其他的 <code>perm_state.html</code> 修改方式跟上述一致就不再赘述。</p><p><code>WebView</code> 有以下两个方法函数：</p><ul><li><code>loadData(String data, String mimeType, String encoding)</code>: 直接使用 <code>webview</code> 加载 <code>data</code> 包含的数据。</li><li><code>loadDataWithBaseURL(String baseUrl, String data, String mimeType, String encoding, String historyUrl)</code>： 将 <code>baseUrl</code> 作为基础路径的前提下，使用 <code>webview</code> 加载 <code>data</code> 包含的数据。</li></ul><p>我们看到 <code>&lt;link href=&quot;perm_state_style.css&quot;/&gt;</code> 是直接引用的 <code>perm_state_style.css</code>，所以可以使用 <code>loadDataWithBaseURL</code> 方法把 <code>css</code> 文件放置于 <code>baseUrl</code> 所代表的目录下即可实现 <code>html</code> 文件中对 <code>css</code> 样式的引用和加载。</p><p>那么，<code>perm_state_style.css</code> 到底放哪儿呢？ 有两种方案。</p><h4 id="css-置于-res-raw-目录"><a href="#css-置于-res-raw-目录" class="headerlink" title="css 置于 res/raw 目录"></a>css 置于 res/raw 目录</h4><p>将 <code>css</code> 置于 <code>/res/raw</code> 目录，即生成 <code>/res/raw/perm_state_style.css</code>。</p><p>使用 <code>WebView</code> 加载资源文件：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pulic <span class="keyword">void</span> <span class="title">loadHtmlData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String data = ResUtils.loadRawData(context, R.raw.perm_state);</span><br><span class="line">    weview.loadDataWithBaseURL(<span class="string">"file:///android_res/raw/"</span>, data, <span class="string">"text/html"</span>, <span class="string">"utf-8"</span>, <span class="keyword">null</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>但是如果生成的 Apk 是经过混淆的话，这种方案需要在混淆文件中加入如下配置（至于为什么要这样做，暂未可知）：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-keepclassmembers class **.R$* &#123;</span><br><span class="line">    public static &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line">-keep class **.R$*</span><br></pre></td></tr></table></figure></div><p>这种方式 <code>perm_state.html</code> 和 <code>perm_state_style.css</code> 基本在同一目录，结构清晰，但是会在最终混淆过后生成的 Apk 中保留 <code>R.java</code> 文件，会稍微增加 Apk 最终大小。</p><h4 id="css-置于-assets-目录"><a href="#css-置于-assets-目录" class="headerlink" title="css 置于 assets 目录"></a>css 置于 assets 目录</h4><p>将 <code>css</code> 置于 <code>/assets</code> 目录，即生成 <code>/assets/perm_state_style.css</code>。</p><p>使用 <code>WebView</code> 加载资源文件：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadHtmlData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String data = ResUtils.loadRawData(context, R.raw.perm_state);</span><br><span class="line">    weview.loadDataWithBaseURL(<span class="string">"file:///android_asset/"</span>, data, <span class="string">"text/html"</span>, <span class="string">"utf-8"</span>, <span class="keyword">null</span>);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这种方式 <code>perm_state.html</code> 和 <code>perm_state_style.css</code> 不在同一目录，结构不太清晰，但是因为没有混淆限制，不会在最终 Apk 中生成 <code>R.java</code> 文件，稍微减少 Apk 最终大小。</p><p>孰优孰劣，暂未可知。</p><p>相关源码请参考个人项目 <a href="https://github.com/tianma8023/SmsCodeExtractor" target="_blank" rel="noopener">SmsCodeExtractor</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://stackoverflow.com/questions/26777566/file-under-res-raw-not-accessible-in-debug-buildvariant" target="_blank" rel="noopener">File under /res/raw not accessible in Debug buildvariant</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i18n </tag>
            
            <tag> Webview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xposed开发之短信Hook</title>
      <link href="/post/xposed-hook-sms-receive/"/>
      <url>/post/xposed-hook-sms-receive/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我的 Xposed 模块 - <a href="https://github.com/tianma8023/XposedSmsCode" target="_blank" rel="noopener">短信验证码提取</a> 中比较关键的就是如何通过 Hook 短信接收过程，并获取短信内容。</p><a id="more"></a><p>在前一篇文章（<a href="/post/2078965013">Android O SMS 接收过程源码分析</a>）已经分析了 <code>Android O</code> 上的短信接收过程。其他版本的源码分析便不再展开，核心思路基本一致，都是通过状态机中不同状态之间的转换，对不同类型的事件消息进行处理，从而完成对新短信的接收、广播等操作。</p><p>Xposed 开发中，下面几点很重要：</p><ul><li><code>Hook 的方法函数在保证一定会被调用的同时，要尽量保证不是被频繁调用的</code>，能精准打击就不要无差别范围攻击。能达到这一效果，就能很好地提升性能。</li><li><code>Hook 的方法尽量保证在不同版本上保持一致</code>，当然也不排除可能因为版本大更迭，方法签名都发生巨大变化，这时就需要针对不同版本来进行不同的 Hook 操作了。</li></ul><p>如何做到以上两点，其实就是阅读源码。这是最简单最有效的方法，却又是最困难最麻烦的方法（阅读源码确实麻烦，有时候往往会陷于各种细节之处无法自拔）。</p><p>通过阅读和比较从 4.4 到 8.1 系统中关于短信接收源码，可以发现 <code>dispatchIntent()</code> 方法是发送接收到短信过程中最后一道关卡，同时该方法的 <code>Intent intent</code> 参数即为携带了短信数据的参数，所以也能很方便获取短信数据。所以，Hook 短信获取，围绕方法 <code>dispatchIntent()</code> 即可。</p><p>编码实现：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsHandlerHook</span> <span class="keyword">implements</span> <span class="title">IHook</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TELEPHONY_PACKAGE = <span class="string">"com.android.internal.telephony"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMS_HANDLER_CLASS = TELEPHONY_PACKAGE + <span class="string">".InboundSmsHandler"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMSCODE_PACKAGE = BuildConfig.APPLICATION_ID;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mModContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"com.android.phone"</span>.equals(lpparam.packageName)) &#123;</span><br><span class="line">            XLog.i(<span class="string">"SmsCode initializing"</span>);</span><br><span class="line">            printDeviceInfo();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                hookSmsHandler(lpparam);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                XLog.e(<span class="string">"Failed to hook SmsHandler"</span>, e);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">            XLog.i(<span class="string">"SmsCode initialize completely"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDeviceInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        XLog.i(<span class="string">"Phone manufacturer: %s"</span>, Build.MANUFACTURER);</span><br><span class="line">        XLog.i(<span class="string">"Phone model: %s"</span>, Build.MODEL);</span><br><span class="line">        XLog.i(<span class="string">"Android version: %s"</span>, Build.VERSION.RELEASE);</span><br><span class="line">        <span class="keyword">int</span> xposedVersion;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            xposedVersion = XposedBridge.getXposedVersion();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            xposedVersion = XposedBridge.XPOSED_BRIDGE_VERSION;</span><br><span class="line">        &#125;</span><br><span class="line">        XLog.i(<span class="string">"Xposed bridge version: %d"</span>, xposedVersion);</span><br><span class="line">        XLog.i(<span class="string">"SmsCode version: %s (%d)"</span>, BuildConfig.VERSION_NAME, BuildConfig.VERSION_CODE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookSmsHandler</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> </span>&#123;</span><br><span class="line">        hookConstructor(lpparam);</span><br><span class="line">        hookDispatchIntent(lpparam);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookConstructor</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123;</span><br><span class="line">            hookConstructor24(lpparam);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">            hookConstructor19(lpparam);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookConstructor24</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> </span>&#123;</span><br><span class="line">        XLog.i(<span class="string">"Hooking InboundSmsHandler constructor for android v24+"</span>);</span><br><span class="line">        XposedHelpers.findAndHookConstructor(SMS_HANDLER_CLASS, lpparam.classLoader,</span><br><span class="line">                <span class="comment">/* name                 */</span> String.class,</span><br><span class="line">                <span class="comment">/* context              */</span> Context.class,</span><br><span class="line">                <span class="comment">/* storageMonitor       */</span> TELEPHONY_PACKAGE + <span class="string">".SmsStorageMonitor"</span>,</span><br><span class="line">                <span class="comment">/* phone                */</span> TELEPHONY_PACKAGE + <span class="string">".Phone"</span>,</span><br><span class="line">                <span class="comment">/* cellBroadcastHandler */</span> TELEPHONY_PACKAGE + <span class="string">".CellBroadcastHandler"</span>,</span><br><span class="line">                <span class="keyword">new</span> ConstructorHook());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookConstructor19</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> </span>&#123;</span><br><span class="line">        XLog.i(<span class="string">"Hooking InboundSmsHandler constructor for Android v19+"</span>);</span><br><span class="line">        XposedHelpers.findAndHookConstructor(SMS_HANDLER_CLASS, lpparam.classLoader,</span><br><span class="line">                <span class="comment">/*                 name */</span> String.class,</span><br><span class="line">                <span class="comment">/*              context */</span> Context.class,</span><br><span class="line">                <span class="comment">/*       storageMonitor */</span> TELEPHONY_PACKAGE + <span class="string">".SmsStorageMonitor"</span>,</span><br><span class="line">                <span class="comment">/*                phone */</span> TELEPHONY_PACKAGE + <span class="string">".PhoneBase"</span>,</span><br><span class="line">                <span class="comment">/* cellBroadcastHandler */</span> TELEPHONY_PACKAGE + <span class="string">".CellBroadcastHandler"</span>,</span><br><span class="line">                <span class="keyword">new</span> ConstructorHook());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookDispatchIntent</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">            hookDispatchIntent23(lpparam);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</span><br><span class="line">            hookDispatchIntent21(lpparam);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</span><br><span class="line">            hookDispatchIntent19(lpparam);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookDispatchIntent19</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> </span>&#123;</span><br><span class="line">        XLog.i(<span class="string">"Hooking dispatchIntent() for Android v19+"</span>);</span><br><span class="line">        XposedHelpers.findAndHookMethod(SMS_HANDLER_CLASS, lpparam.classLoader, <span class="string">"dispatchIntent"</span>,</span><br><span class="line">                <span class="comment">/*         intent */</span> Intent.class,</span><br><span class="line">                <span class="comment">/*     permission */</span> String.class,</span><br><span class="line">                <span class="comment">/*          appOp */</span> <span class="keyword">int</span>.class,</span><br><span class="line">                <span class="comment">/* resultReceiver */</span> BroadcastReceiver.class,</span><br><span class="line">                <span class="keyword">new</span> DispatchIntentHook(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookDispatchIntent21</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> </span>&#123;</span><br><span class="line">        XLog.i(<span class="string">"Hooking dispatchIntent() for Android v21+"</span>);</span><br><span class="line">        XposedHelpers.findAndHookMethod(SMS_HANDLER_CLASS, lpparam.classLoader, <span class="string">"dispatchIntent"</span>,</span><br><span class="line">                <span class="comment">/*         intent */</span> Intent.class,</span><br><span class="line">                <span class="comment">/*     permission */</span> String.class,</span><br><span class="line">                <span class="comment">/*          appOp */</span> <span class="keyword">int</span>.class,</span><br><span class="line">                <span class="comment">/* resultReceiver */</span> BroadcastReceiver.class,</span><br><span class="line">                <span class="comment">/*           user */</span> UserHandle.class,</span><br><span class="line">                <span class="keyword">new</span> DispatchIntentHook(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookDispatchIntent23</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> </span>&#123;</span><br><span class="line">        XLog.i(<span class="string">"Hooking dispatchIntent() for Android v23+"</span>);</span><br><span class="line">        XposedHelpers.findAndHookMethod(SMS_HANDLER_CLASS, lpparam.classLoader, <span class="string">"dispatchIntent"</span>,</span><br><span class="line">                <span class="comment">/*         intent */</span> Intent.class,</span><br><span class="line">                <span class="comment">/*     permission */</span> String.class,</span><br><span class="line">                <span class="comment">/*          appOp */</span> <span class="keyword">int</span>.class,</span><br><span class="line">                <span class="comment">/*           opts */</span> Bundle.class,</span><br><span class="line">                <span class="comment">/* resultReceiver */</span> BroadcastReceiver.class,</span><br><span class="line">                <span class="comment">/*           user */</span> UserHandle.class,</span><br><span class="line">                <span class="keyword">new</span> DispatchIntentHook(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorHook</span> <span class="keyword">extends</span> <span class="title">XC_MethodHook</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                afterConstructorHandler(param);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                XLog.e(<span class="string">"Error occurred in constructor hook"</span>, e);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">afterConstructorHandler</span><span class="params">(XC_MethodHook.MethodHookParam param)</span> </span>&#123;</span><br><span class="line">        Context context = (Context) param.args[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (mModContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mModContext = context;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatchIntentHook</span> <span class="keyword">extends</span> <span class="title">XC_MethodHook</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> mReceiverIndex;</span><br><span class="line"></span><br><span class="line">        DispatchIntentHook(<span class="keyword">int</span> receiverIndex) &#123;</span><br><span class="line">            mReceiverIndex = receiverIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                beforeDispatchIntentHandler(param, mReceiverIndex);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                XLog.e(<span class="string">"Error occurred in dispatchIntent() hook, "</span>, e);</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">beforeDispatchIntentHandler</span><span class="params">(XC_MethodHook.MethodHookParam param, <span class="keyword">int</span> receiverIndex)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 此 intent 即为携带短信数据的 intent</span></span><br><span class="line">        Intent intent = (Intent) param.args[<span class="number">0</span>];</span><br><span class="line">        String action = intent.getAction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 过滤掉 SMS_DELIVER_ACTION 之外的 Action</span></span><br><span class="line">        <span class="keyword">if</span> (!Telephony.Sms.Intents.SMS_DELIVER_ACTION.equals(action)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送广播，让接收者处理短信数据</span></span><br><span class="line">        Intent broadcastIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">        broadcastIntent.setComponent(<span class="keyword">new</span> ComponentName(SMSCODE_PACKAGE, SmsCodeReceiver.class.getName()));</span><br><span class="line">        broadcastIntent.putExtra(SmsCodeService.EXTRA_KEY_SMS_INTENT, intent);</span><br><span class="line">        mModContext.sendBroadcast(broadcastIntent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>代码开源在 <a href="https://github.com/tianma8023/XposedSmsCode" target="_blank" rel="noopener">XposedSmsCode</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://github.com/apsun/NekoSMS" target="_blank" rel="noopener">NekoSMS</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SMS </tag>
            
            <tag> Xposed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android O SMS 接收过程源码分析</title>
      <link href="/post/android-source-analyze-sms-receive-on-Oreo/"/>
      <url>/post/android-source-analyze-sms-receive-on-Oreo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><code>Android O</code> (8.0 和 8.1) 起，Google 开启了 <code>Project Treble</code> 计划，引入了新的系统架构模式 <code>Treble</code>。</p><a id="more"></a><p>关于 <code>Treble</code> 架构，详情请参考:</p><ul><li><a href="https://source.android.com/devices/architecture/treble" target="_blank" rel="noopener">Treble</a></li><li><a href="http://www.infoq.com/cn/articles/android-project-treble-intro" target="_blank" rel="noopener">Project Treble是Android升级的最终方案吗？</a></li><li><a href="https://blog.csdn.net/xiaosayidao/article/details/75577940" target="_blank" rel="noopener">Android Treble架构解析</a></li></ul><p>简单来说，宏观上，<code>Treble</code> 之前的 Android 设备更新系统时，在更新上层系统之前必须先更新底层供应商（Vendor）的硬件支持代码，这很麻烦，新系统往往不能得到及时更新，<code>Treble</code> 将 <code>Vendor</code>(芯片供应制造商编写的设备专属底层代码) 和 Android 系统代码分离，这样就规避之前版本的问题。</p><p><code>HAL (Hardware Abstract Layer - 硬件抽象层)</code> 将硬件设备和 Android 操作系统分割开来，负责硬件设备和操作系统的通信。Android O 起，HAL 的硬件组件得到划分，比如音频，无线电频。这些底层的硬件划分通过 <code>HIDL (HAL interface defination language - HAL接口定义语言)</code> 和上层的操作系统中的系统服务进行通信。目前有数十个不同的 <a href="https://source.android.com/reference/hidl" target="_blank" rel="noopener">HIDL接口包</a>，其中 <code>HIDL</code> 也是通过 <code>Binder</code> 实现通信的。 <code>HIDL</code> 和 <code>AIDL</code> 很相似，具体语法有区别，但核心都是通过 <code>Binder</code> 实现通讯</p><p><code>RIL (Radio interface layer - 无线接口层)</code> 用于提供电话通信（Telephony）服务，其中也包括了 <code>SMS</code>，而 <code>RIL</code> 是位于 <code>HAL</code> 层的。所以 Android O 起，<code>RIL</code> 的通信方式由之前的 <code>Socket</code> 通信变成了 <code>Binder</code> 通信。</p><p>关于 <code>RIL</code> 的底层逻辑，详情参考 </p><ul><li><a href="https://blog.csdn.net/qq_27540925/article/details/79356799" target="_blank" rel="noopener">Android 8.0 RIL框架分析</a></li><li><a href="https://blog.csdn.net/Dylan_Sen/article/details/78580070" target="_blank" rel="noopener">RIL</a></li></ul><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>这里用 <code>Android 8.1 (api 27)</code> 的源码来进行分析。</p><p><code>RIL</code> 借由 <a href="https://source.android.com/reference/hidl/android/hardware/radio/1.2/IRadioIndication" target="_blank" rel="noopener"><code>IRadioIndication</code></a> 和 <a href="https://source.android.com/reference/hidl/android/hardware/radio/1.2/IRadioResponse" target="_blank" rel="noopener"><code>IRadioResponse</code></a> 定义了 HIDL 接口，建立起 <code>HAL</code> 层和 framework 层的 RIL 通信交互。在 Framework 层，由 <code>RadioIndication</code> 和 <code>RadioResponse</code> 分别实现了该 HIDL 接口：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RadioIndication 用于处理 RIL 底层发起的消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadioIndication</span> <span class="keyword">extends</span> <span class="title">IRadioIndication</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RadioResponse 用于对 RIL 底层进行响应，回馈消息，</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadioResponse</span> <span class="keyword">extends</span> <span class="title">IRadioResponse</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>无线通信制式有 <a href="https://zh.wikipedia.org/wiki/CDMA" target="_blank" rel="noopener"><code>CDMA</code></a> 和 <a href="https://zh.wikipedia.org/wiki/GSM" target="_blank" rel="noopener"><code>GSM</code></a> ，在 Android 系统中也有对应的编码实现。</p><h3 id="GSM-制式下的-SMS-接收过程"><a href="#GSM-制式下的-SMS-接收过程" class="headerlink" title="GSM 制式下的 SMS 接收过程"></a>GSM 制式下的 SMS 接收过程</h3><p><code>GSM</code> 制式下，新短信到来，会调用 <code>RadionIndication#newSms()</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadionIndication</span> <span class="keyword">extends</span> <span class="title">IRadioIndication</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    RIL mRil;</span><br><span class="line"></span><br><span class="line">    RadioIndication(RIL ril) &#123;</span><br><span class="line">        mRil = ril;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newSms</span><span class="params">(<span class="keyword">int</span> indicationType, ArrayList&lt;Byte&gt; pdu)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据 indication 类型，用于必要时获取唤醒锁和发送ACK消息</span></span><br><span class="line">        mRil.processIndication(indicationType);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] pduArray = RIL.arrayListToPrimitiveArray(pdu);</span><br><span class="line">        <span class="keyword">if</span> (RIL.RILJ_LOGD) mRil.unsljLog(RIL_UNSOL_RESPONSE_NEW_SMS);</span><br><span class="line"></span><br><span class="line">        mRil.writeMetricsNewSms(SmsSession.Event.Tech.SMS_GSM,</span><br><span class="line">                SmsSession.Event.Format.SMS_FORMAT_3GPP);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析出 SmsMessage 实体</span></span><br><span class="line">        SmsMessage sms = SmsMessage.newFromCMT(pduArray);</span><br><span class="line">        <span class="keyword">if</span> (mRil.mGsmSmsRegistrant != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 通知给 RIL 中的 GSM 注册者</span></span><br><span class="line">            mRil.mGsmSmsRegistrant.notifyRegistrant(<span class="keyword">new</span> AsyncResult(<span class="keyword">null</span>, sms, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>解析出 <code>SmsMessage</code> 对象后，将短信数据封装在 <code>AsyncResult</code> 对象并通知给相应的 <code>GSM</code> 注册者。</p><p><code>RIL</code> 的 <code>mGsmSmsRegistrant</code> 是 <code>Registrant</code> 对象：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrant</span> </span>&#123;</span><br><span class="line">    WeakReference   refH;</span><br><span class="line">    <span class="keyword">int</span>             what;</span><br><span class="line">    Object          userObj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Registrant</span><span class="params">(Handler h, <span class="keyword">int</span> what, Object obj)</span> </span>&#123;</span><br><span class="line">        refH = <span class="keyword">new</span> WeakReference(h);</span><br><span class="line">        <span class="keyword">this</span>.what = what;</span><br><span class="line">        userObj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通知注册者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyRegistrant</span><span class="params">(AsyncResult ar)</span> </span>&#123;</span><br><span class="line">        internalNotifyRegistrant (ar.result, ar.exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 本质上使用 Handler 进行消息通知</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">internalNotifyRegistrant</span> <span class="params">(Object result, Throwable exception)</span> </span>&#123;</span><br><span class="line">        Handler h = getHandler();</span><br><span class="line">        <span class="keyword">if</span> (h == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clear();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Message msg = Message.obtain();</span><br><span class="line">            msg.what = what;</span><br><span class="line">            msg.obj = <span class="keyword">new</span> AsyncResult(userObj, result, exception);</span><br><span class="line">            h.sendMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (refH == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> (Handler) refH.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以看出，<code>Registrant</code> 其实就是借由 <code>Handler</code> 发送消息，携带 SMS 信息的 <code>AsyncResult</code> 的消息则是在 <code>Handler#handleMessage()</code> 中被处理。而 <code>Handler</code> 是在 <code>Registrant</code> 的构造函数中被引用的，我们需要看 <code>Handler</code> 到底是哪个，就需要看 <code>Ril</code> 的 <code>mGsmSmsRegistrant</code> 在哪里被初始化。</p><p><code>RIL</code> 继承自 <code>BaseCommands</code>，通过调用 <code>setOnNewGsmSms</code> 实现 <code>mGsmSmsRegistrant</code> 的初始化。</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseCommands</span> <span class="keyword">implements</span> <span class="title">CommandsInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Registrant mGsmSmsRegistrant;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Gsm SMS 的 Registrant</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnNewGsmSms</span><span class="params">(Handler h, <span class="keyword">int</span> what, Object obj)</span> </span>&#123;</span><br><span class="line">        mGsmSmsRegistrant = <span class="keyword">new</span> Registrant (h, what, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&nbsp;<br>而 <code>setOnNewGsmSms</code> 在 <code>GsmInboundSmsHandler</code> 的构造函数中被调用：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsmInboundSmsHandler</span> <span class="keyword">extends</span> <span class="title">InboundSmsHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">GsmInboundSmsHandler</span><span class="params">(Context context, SmsStorageMonitor storageMonitor,</span></span></span><br><span class="line"><span class="function"><span class="params">            Phone phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"GsmInboundSmsHandler"</span>, context, storageMonitor, phone,</span><br><span class="line">                GsmCellBroadcastHandler.makeGsmCellBroadcastHandler(context, phone));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化 Gsm SMS 的 Registrant，该注册者只关注类型为 EVENT_NEW_SMS 的事件</span></span><br><span class="line">        phone.mCi.setOnNewGsmSms(getHandler(), EVENT_NEW_SMS, <span class="keyword">null</span>);</span><br><span class="line">        mDataDownloadHandler = <span class="keyword">new</span> UsimDataDownloadHandler(phone.mCi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>从以上分析可以看出， <code>GsmInboundSmsHandler</code> 注册的 <code>Registrant</code> 对象只关注 <code>EVENT_NEW_SMS</code> 事件，并且在 <code>RadioIndication#newSms()</code> 中也会发送 <code>EVENT_NEW_SMS</code> 事件消息。</p><p>我们现在来看一下 <code>GsmInboundSmsHandler</code> 的继承关系，<code>GsmInboundSmsHandler</code> 继承自 <code>InboundSmsHanlder</code>，而 <code>InboundSmsHandler</code> 继承自 <code>StateMachine</code>， 这里的 <code>StateMachine</code> 就是 <a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA" target="_blank" rel="noopener"><code>有限状态机</code></a>，状态机里面的不同状态（State）可以在特定条件下进行相互转换。那么，这里的 <code>StateMachine</code> 类是如何实现状态机的呢？ </p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateMachine</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ... 省略</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 通过调用 State 的 processMessage 方法去处理发送至此状态机的消息。 </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">if</span> (!mHasQuit) &#123;</span><br><span class="line">                 <span class="comment">// ...省略</span></span><br><span class="line">                <span class="keyword">if</span> (mIsConstructionCompleted) &#123;</span><br><span class="line">                    <span class="comment">// 处理消息</span></span><br><span class="line">                    msgProcessedState = processMsg(msg);</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="comment">// ...省略</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 根据当前状态，执行相应的状态变化操作，即状态迁移</span></span><br><span class="line">                performTransitions(msgProcessState, msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 处理消息，执行 State 的 processMessage 方法，如果当前状态无法处理，则调用父状态进行处理，以类推</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 返回处理了当前消息的状态</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> State <span class="title">processMsg</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// ... 省略</span></span><br><span class="line">            <span class="comment">// 用当前状态处理消息，无法处理则循环下去</span></span><br><span class="line">            <span class="keyword">while</span> (!curStateInfo.state.processMessage(msg)) &#123;</span><br><span class="line">                curStateInfo = curStateInfo.parentStateInfo;</span><br><span class="line">                <span class="keyword">if</span> (curStateInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mSm.unhandledMessage(msg);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//... 省略</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (curStateInfo != <span class="keyword">null</span>) ? curStateInfo.state : <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据处理了该消息的状态信息，执行相关状态迁移。</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performTransitions</span><span class="params">(State msgProcessedState, Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// ... 省略</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行状态转移</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transitionTo</span><span class="params">(IState destState)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// ... 忽略</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在当前状态机中添加状态，需要指明其父状态</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addState</span><span class="params">(State state, State parent)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// ... 忽略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SmsHandler mSmsHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Handler <span class="title">getHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mSmsHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">StateMachine</span><span class="params">(String name, Looper looper)</span> </span>&#123;</span><br><span class="line">        initStateMachine(name, looper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initStateMachine</span><span class="params">(String name, Looper looper)</span> </span>&#123;</span><br><span class="line">        mName = name;</span><br><span class="line">        mSmHandler = <span class="keyword">new</span> SmHandler(looper, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IState</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 进入状态</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enter</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 退出状态</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 处理状态</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">processMessage</span><span class="params">(Message msg)</span></span>;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> <span class="keyword">implements</span> <span class="title">IState</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>通过上面的源码可以看出来，<code>StateMachine</code> 其实就是通过 <code>Handler</code> 去实现的，通过 <code>handleMessage()</code> 来处理当前状态，通过 <code>transitionTo()</code> 来进行状态迁移，通过 <code>addState()</code> 来进行状态机中状态的添加。而 <code>GsmInboundSmsHandler</code> 初始化方法中的 <code>getHandler()</code> 返回的就是 <code>StateMachine</code> 中的 <code>SmsHandler</code> 对象 <code>mSmsHandler</code>。</p><p>接下来看一下状态机中初始时，添加了哪些状态，在 <code>InboundSmsHandler</code> 构造函数中：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InboundSmsHanlder</span> <span class="keyword">extends</span> <span class="title">StateMachine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">InboundSmsHandler</span><span class="params">(String name, Context context, SmsStorageMonitor storageMonitor,</span></span></span><br><span class="line"><span class="function"><span class="params">            Phone phone, CellBroadcastHandler cellBroadcastHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加默认状态</span></span><br><span class="line">        addState(mDefaultState);</span><br><span class="line">        <span class="comment">// 添加 启动状态 - StartupState</span></span><br><span class="line">        addState(mStartupState, mDefaultState);</span><br><span class="line">        <span class="comment">// 添加 空闲状态 - IdleState</span></span><br><span class="line">        addState(mIdleState, mDefaultState);</span><br><span class="line">        <span class="comment">// 添加 分发状态 - DeliveringState</span></span><br><span class="line">        addState(mDeliveringState, mDefaultState);</span><br><span class="line">        <span class="comment">// 添加 等待状态 - WaitingState</span></span><br><span class="line">        addState(mWaitingState, mDeliveringState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置初始状态为 StartupState</span></span><br><span class="line">        setInitialState(mStartupState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&nbsp;<br>初始状态是 <code>StartupState</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">StartupState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"StartupState.processMessage:"</span> + msg.what);</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="comment">// ...省略</span></span><br><span class="line">            <span class="keyword">case</span> EVENT_START_ACCEPTING_SMS:</span><br><span class="line">                <span class="comment">// 类型为 EVENT_START_ACCEPTING_SMS 的信息发送后，进入 IdleState</span></span><br><span class="line">                transitionTo(mIdleState);</span><br><span class="line">                <span class="keyword">return</span> HANDLED;</span><br><span class="line">            <span class="comment">// ...省略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&nbsp;<br>而在 <code>GsmInboundSmsHandler</code> 初始化之后，就会发送 <code>EVENT_START_ACCEPTING_SMS</code> 消息：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImsSMSDispatcher</span> <span class="keyword">extends</span> <span class="title">SMSDispatcher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImsSMSDispatcher</span><span class="params">(Phone phone, SmsStorageMonitor storageMonitor, SmsUsageMonitor usageMonitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(phone, usageMonitor, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create dispatchers, inbound SMS handlers and</span></span><br><span class="line">        <span class="comment">// broadcast undelivered messages in raw table.</span></span><br><span class="line">        mCdmaDispatcher = <span class="keyword">new</span> CdmaSMSDispatcher(phone, usageMonitor, <span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 初始化 GsmInboundSmsHandler</span></span><br><span class="line">        mGsmInboundSmsHandler = GsmInboundSmsHandler.makeInboundSmsHandler(phone.getContext(),</span><br><span class="line">                storageMonitor, phone);</span><br><span class="line">        <span class="comment">// 初始化 GsmInboundSmsHandler</span></span><br><span class="line">        mCdmaInboundSmsHandler = CdmaInboundSmsHandler.makeInboundSmsHandler(phone.getContext(),</span><br><span class="line">                storageMonitor, phone, (CdmaSMSDispatcher) mCdmaDispatcher);</span><br><span class="line">        mGsmDispatcher = <span class="keyword">new</span> GsmSMSDispatcher(phone, usageMonitor, <span class="keyword">this</span>, mGsmInboundSmsHandler);</span><br><span class="line">        <span class="comment">// 发送初始化信息</span></span><br><span class="line">        SmsBroadcastUndelivered.initialize(phone.getContext(),</span><br><span class="line">            mGsmInboundSmsHandler, mCdmaInboundSmsHandler);</span><br><span class="line">        InboundSmsHandler.registerNewMessageNotificationActionHandler(phone.getContext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsBroadcastUndelivered</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Context context, GsmInboundSmsHandler gsmInboundSmsHandler,</span></span></span><br><span class="line"><span class="function"><span class="params">        CdmaInboundSmsHandler cdmaInboundSmsHandler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SmsBroadcastUndelivered(</span><br><span class="line">                context, gsmInboundSmsHandler, cdmaInboundSmsHandler);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (gsmInboundSmsHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// GsmInboundSmsHandler 发送 EVENT_START_ACCEPTING_SMS 消息</span></span><br><span class="line">            gsmInboundSmsHandler.sendMessage(InboundSmsHandler.EVENT_START_ACCEPTING_SMS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cdmaInboundSmsHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// CdmaInboundSmsHandler 发送 EVENT_START_ACCEPTING_SMS 消息</span></span><br><span class="line">            cdmaInboundSmsHandler.sendMessage(InboundSmsHandler.EVENT_START_ACCEPTING_SMS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&nbsp;<br>所以在 <code>GsmInboundSmsHandler</code> 发送 <code>EVENT_START_ACCEPTING_SMS</code> 之后，状态机进入 <code>IdleState</code> 状态：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">IdleState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        log(<span class="string">"IdleState.processMessage:"</span> + msg.what);</span><br><span class="line">        <span class="keyword">if</span> (DBG) log(<span class="string">"Idle state processing message type "</span> + msg.what);</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> EVENT_NEW_SMS:</span><br><span class="line">            <span class="keyword">case</span> EVENT_INJECT_SMS:</span><br><span class="line">            <span class="keyword">case</span> EVENT_BROADCAST_SMS:</span><br><span class="line">                deferMessage(msg);</span><br><span class="line">                transitionTo(mDeliveringState);</span><br><span class="line">                <span class="keyword">return</span> HANDLED;</span><br><span class="line">            <span class="comment">// ...省略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&nbsp;<br>在之前的分析中说到，<code>RadioIndication#newSms()</code> 发送 <code>EVENT_NEW_SMS</code> 事件消息，所以在接收到该消息之后，<code>IdleState</code> 状态会进入到 <code>DeliveringState</code> 状态：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveringState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> EVENT_NEW_SMS:</span><br><span class="line">                <span class="comment">// 处理新短信</span></span><br><span class="line">                handleNewSms((AsyncResult) msg.obj);</span><br><span class="line">                sendMessage(EVENT_RETURN_TO_IDLE);</span><br><span class="line">                <span class="keyword">return</span> HANDLED;</span><br><span class="line">            <span class="comment">// ...省略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&nbsp;<br><code>DeliveringState</code> 状态下，接收到 <code>EVENT_NEW_SMS</code> 消息事件，会执行 <code>handleNewSms()</code> 方法，接下来看下该方法：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InboundSmsHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 处理新信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleNewSms</span><span class="params">(AsyncResult ar)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...省略</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SmsMessage sms = (SmsMessage) ar.result;</span><br><span class="line">            result = dispatchMessage(sms.mWrappedSmsMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...省略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dispatchMessage</span><span class="params">(SmsMessageBase smsb)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...省略</span></span><br><span class="line">        <span class="keyword">return</span> dispatchMessageRadioSpecific(smsb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">dispatchMessageRadioSpecific</span><span class="params">(SmsMessageBase smsb)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">dispatchNormalMessage</span><span class="params">(SmsMessageBase sms)</span> </span>&#123;</span><br><span class="line">        SmsHeader smsHeader = sms.getUserDataHeader();</span><br><span class="line">        InboundSmsTracker tracker;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化并获取 InboundSmsTracker 对象</span></span><br><span class="line">        <span class="keyword">if</span> ((smsHeader == <span class="keyword">null</span>) || (smsHeader.concatRef == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            tracker = TelephonyComponentFactory.getInstance().makeInboundSmsTracker(sms.getPdu(),</span><br><span class="line">                    sms.getTimestampMillis(), destPort, is3gpp2(), <span class="keyword">false</span>,</span><br><span class="line">                    sms.getOriginatingAddress(), sms.getDisplayOriginatingAddress(),</span><br><span class="line">                    sms.getMessageBody());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">            tracker = TelephonyComponentFactory.getInstance().makeInboundSmsTracker(sms.getPdu(),</span><br><span class="line">                    sms.getTimestampMillis(), destPort, is3gpp2(), sms.getOriginatingAddress(),</span><br><span class="line">                    sms.getDisplayOriginatingAddress(), concatRef.refNumber, concatRef.seqNumber,</span><br><span class="line">                    concatRef.msgCount, <span class="keyword">false</span>, sms.getMessageBody());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> addTrackerToRawTableAndSendMessage(tracker,</span><br><span class="line">                tracker.getDestPort() == -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsmInboundSmsHandler</span> <span class="keyword">extends</span> <span class="title">InboundSmsHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">dispatchMessageRadioSpecific</span><span class="params">(SmsMessageBase smsb)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...省略</span></span><br><span class="line">        <span class="keyword">return</span> dispatchNormalMessage(smsb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>从上面的源码中可以看出，<code>handleNewSms()</code> 调用链为 <code>handleNewSms()</code> -&gt; <code>dispatchMessage()</code> -&gt; <code>dispatchMessageRadioSpecific()</code> -&gt; <code>dispatchNormalMessage()</code> -&gt; <code>addTrackerToRawTableAndSendMessage()</code>。</p><p>接着看 <code>addTrackerToRawTableAndSendMessage()</code> 方法：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">addTrackerToRawTableAndSendMessage</span><span class="params">(InboundSmsTracker tracker, <span class="keyword">boolean</span> deDup)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(addTrackerToRawTable(tracker, deDup)) &#123; <span class="comment">// 插入短信数据库</span></span><br><span class="line">        <span class="keyword">case</span> Intents.RESULT_SMS_HANDLED:</span><br><span class="line">            sendMessage(EVENT_BROADCAST_SMS, tracker);</span><br><span class="line">            <span class="keyword">return</span> Intents.RESULT_SMS_HANDLED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> Intents.RESULT_SMS_DUPLICATED:</span><br><span class="line">            <span class="keyword">return</span> Intents.RESULT_SMS_HANDLED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> Intents.RESULT_SMS_GENERIC_ERROR:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> Intents.RESULT_SMS_GENERIC_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">addTrackerToRawTable</span><span class="params">(InboundSmsTracker tracker, <span class="keyword">boolean</span> deDup)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (deDup) &#123; <span class="comment">// 处理短信冗余重复的逻辑</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (duplicateExists(tracker)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Intents.RESULT_SMS_DUPLICATED;   <span class="comment">// reject message</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Intents.RESULT_SMS_GENERIC_ERROR;    <span class="comment">// reject message</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    String address = tracker.getAddress();</span><br><span class="line">    String refNumber = Integer.toString(tracker.getReferenceNumber());</span><br><span class="line">    String count = Integer.toString(tracker.getMessageCount());</span><br><span class="line">    ContentValues values = tracker.getContentValues();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入短信数据库</span></span><br><span class="line">    Uri newUri = mResolver.insert(sRawUri, values);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> rowId = ContentUris.parseId(newUri);</span><br><span class="line">        <span class="keyword">if</span> (tracker.getMessageCount() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// set the delete selection args for single-part message</span></span><br><span class="line">            tracker.setDeleteWhere(SELECT_BY_ID, <span class="keyword">new</span> String[]&#123;Long.toString(rowId)&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// set the delete selection args for multi-part message</span></span><br><span class="line">            String[] deleteWhereArgs = &#123;address, refNumber, count&#125;;</span><br><span class="line">            tracker.setDeleteWhere(tracker.getQueryForSegments(), deleteWhereArgs);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 成功插入新短信数据到短信数据库，则返回 RESULT_SMS_HANDLED</span></span><br><span class="line">        <span class="keyword">return</span> Intents.RESULT_SMS_HANDLED;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        loge(<span class="string">"error parsing URI for new row: "</span> + newUri, e);</span><br><span class="line">        <span class="keyword">return</span> Intents.RESULT_SMS_GENERIC_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述源码中，先执行 <code>addTrackerToRawTable()</code> 来试图将新短信数据插入到短信数据库，根据该方法返回的结果进而返回不同的值。插入成功后，返回 <code>Intents.RESULT_SMS_HANDLED</code>，并通过 <code>sendMessage(EVENT_BROADCAST_SMS, tracker)</code> 发送 <code>EVENT_BROADCAST_SMS</code> 事件。</p><p>相同的思路，<code>EVENT_BROADCAST_SMS</code> 事件最终还是会在 <code>DeliveringState</code> 状态时被处理：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveringState</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="comment">// ...省略</span></span><br><span class="line">            <span class="keyword">case</span> EVENT_BROADCAST_SMS:</span><br><span class="line">                InboundSmsTracker inboundSmsTracker = (InboundSmsTracker) msg.obj;</span><br><span class="line">                <span class="keyword">if</span> (processMessagePart(inboundSmsTracker)) &#123;</span><br><span class="line">                    sendMessage(EVENT_UPDATE_TRACKER, inboundSmsTracker);</span><br><span class="line">                    transitionTo(mWaitingState);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sendMessage(EVENT_RETURN_TO_IDLE);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> HANDLED;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&nbsp;<br><code>EVENT_BROADCAST_SMS</code> 事件到来，会执行 <code>processMessagePart()</code> 方法：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">processMessagePart</span><span class="params">(InboundSmsTracker tracker)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">    <span class="comment">// Sms 的 BroadcastReceiver，接收系统广播，经过一定处理后，将短信广播继续向下分发广播</span></span><br><span class="line">    SmsBroadcastReceiver resultReceiver = <span class="keyword">new</span> SmsBroadcastReceiver(tracker);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> filterInvoked = filterSms(pdus, destPort, tracker, resultReceiver, <span class="keyword">true</span> );</span><br><span class="line">    <span class="keyword">if</span> (!filterInvoked) &#123;</span><br><span class="line">        <span class="comment">// 分发 Sms 投递意图</span></span><br><span class="line">        dispatchSmsDeliveryIntent(pdus, tracker.getFormat(), destPort, resultReceiver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchSmsDeliveryIntent</span><span class="params">(<span class="keyword">byte</span>[][] pdus, String format, <span class="keyword">int</span> destPort,</span></span></span><br><span class="line"><span class="function"><span class="params">        SmsBroadcastReceiver resultReceiver)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.putExtra(<span class="string">"pdus"</span>, pdus);</span><br><span class="line">    intent.putExtra(<span class="string">"format"</span>, format);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (destPort == -<span class="number">1</span>) &#123;</span><br><span class="line">        intent.setAction(Intents.SMS_DELIVER_ACTION);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 先看系统没有默认的短信App</span></span><br><span class="line">        ComponentName componentName = SmsApplication.getDefaultSmsApplication(mContext, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (componentName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 系统默认的短信App存在，则仅给该App发送 SMS_DELIVER_ACTION 广播</span></span><br><span class="line">            intent.setComponent(componentName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 否则向所有的相关 Receiver 发送 SMS_DELIVER_ACTION 广播</span></span><br><span class="line">            intent.setComponent(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...省略</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        intent.setAction(Intents.DATA_SMS_RECEIVED_ACTION);</span><br><span class="line">        Uri uri = Uri.parse(<span class="string">"sms://localhost:"</span> + destPort);</span><br><span class="line">        intent.setData(uri);</span><br><span class="line">        intent.setComponent(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// Allow registered broadcast receivers to get this intent even</span></span><br><span class="line">        <span class="comment">// when they are in the background.</span></span><br><span class="line">        intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Bundle options = handleSmsWhitelisting(intent.getComponent());</span><br><span class="line">    <span class="comment">// 分发广播意图</span></span><br><span class="line">    dispatchIntent(intent, android.Manifest.permission.RECEIVE_SMS,</span><br><span class="line">            AppOpsManager.OP_RECEIVE_SMS, options, resultReceiver, UserHandle.SYSTEM);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchIntent</span><span class="params">(Intent intent, String permission, <span class="keyword">int</span> appOp,</span></span></span><br><span class="line"><span class="function"><span class="params">        Bundle opts, BroadcastReceiver resultReceiver, UserHandle user)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送广播</span></span><br><span class="line">    mContext.sendOrderedBroadcastAsUser(intent, user, permission, appOp, opts,</span><br><span class="line">            resultReceiver, getHandler(), Activity.RESULT_OK, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>通过调用链：<code>processMessagePart()</code> -&gt; <code>dispatchSmsDeliveryIntent()</code> -&gt; <code>dispatchIntent()</code> 最终向系统发送相关短信广播。至此，<code>Gsm</code> 制式下的 Android 系统短信接收和广播发送过程基本分析完毕。</p><h3 id="CDMA-制式下的-SMS-接收过程"><a href="#CDMA-制式下的-SMS-接收过程" class="headerlink" title="CDMA 制式下的 SMS 接收过程"></a>CDMA 制式下的 SMS 接收过程</h3><p><code>CDMA</code> 制式下，新短信到来，会调用 <code>RadionIndication#cdmaNewSms()</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadionIndication</span> <span class="keyword">extends</span> <span class="title">IRadioIndication</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">    RIL mRil;</span><br><span class="line"></span><br><span class="line">    RadioIndication(RIL ril) &#123;</span><br><span class="line">        mRil = ril;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cdmaNewSms</span><span class="params">(<span class="keyword">int</span> indicationType, CdmaSmsMessage msg)</span> </span>&#123;</span><br><span class="line">        mRil.processIndication(indicationType);</span><br><span class="line">        mRil.writeMetricsNewSms(SmsSession.Event.Tech.SMS_CDMA,</span><br><span class="line">                SmsSession.Event.Format.SMS_FORMAT_3GPP2);</span><br><span class="line"></span><br><span class="line">        SmsMessage sms = SmsMessageConverter.newSmsMessageFromCdmaSmsMessage(msg);</span><br><span class="line">        <span class="keyword">if</span> (mRil.mCdmaSmsRegistrant != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mRil.mCdmaSmsRegistrant.notifyRegistrant(<span class="keyword">new</span> AsyncResult(<span class="keyword">null</span>, sms, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>同样也会通过 <code>mRil.mCdmaSmsRegistrant.notifyRegistrant</code> 来通知给 <code>CDMA</code> 相关的 <code>Registrant</code> 对象。接下来流程和 <code>GSM</code> 制式下的流程基本一致，就不再详述了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/a34140974/article/details/50963617" target="_blank" rel="noopener">Android6.0的SMS(短信）源码分析–短信接收</a></li><li><a href="https://source.android.com/devices/architecture/treble" target="_blank" rel="noopener">Treble</a></li><li><a href="http://www.infoq.com/cn/articles/android-project-treble-intro" target="_blank" rel="noopener">Project Treble是Android升级的最终方案吗？</a></li><li><a href="https://blog.csdn.net/xiaosayidao/article/details/75577940" target="_blank" rel="noopener">Android Treble架构解析</a></li><li><a href="https://blog.csdn.net/qq_27540925/article/details/79356799" target="_blank" rel="noopener">Android 8.0 RIL框架分析</a></li><li><a href="https://blog.csdn.net/Dylan_Sen/article/details/78580070" target="_blank" rel="noopener">RIL</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码分析 </tag>
            
            <tag> SMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xposed开发之检查模块是否启用</title>
      <link href="/post/xposed-check-module-enabled/"/>
      <url>/post/xposed-check-module-enabled/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>个人开发的 Xposed 模块中，确实有检查自己模块是否已启用的需求，那么该如何实现呢？</p><a id="more"></a><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>最直接思路就是直接去 <code>Xposed Installer</code> 的模块列表里面，自己的模块是否已被勾选。那么， <code>Xposed Installer</code> 有提供相关 api 调用来返回某模块是否被勾选吗？答案是，没有。</p><p>那么，能不能 Hook <code>Xposed Installer</code> 的模块列表界面，从而获取是否被勾选呢？ 想到这里的时候其实是把此问题复杂化了：<code>只要能 Hook 成功了，就说明自己模块已经启用了，那么何不 Hook 自己的模块应用本身呢？</code> 这样也避免了还需要去逆向 <code>Xposed Installer</code> 的麻烦。</p><p>想到这里，其实整个问题都已经迎刃而解了。</p><h3 id="编程实现"><a href="#编程实现" class="headerlink" title="编程实现"></a>编程实现</h3><p>当前模块相关的工具类 <code>ModuleUtils</code></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ModuleUtils</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回模块版本</span></span><br><span class="line"><span class="comment">     * 注意：该方法被本模块Hook住，返回的值是 BuildConfig.MODULE_VERSION，如果没被Hook则返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getModuleVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前模块是否在XposedInstaller中被启用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isModuleEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getModuleVersion() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>ModuleUtils.isModuleEnabled()</code> 正常条件下一定是返回 <code>false</code> 的，而我们接下来要做的就是去 Hook  <code>getModuleVersion()</code> 方法，让其在已启用的情况下返回正值，这样就能通过 <code>isModuleEnabled()</code> 判断模块是否已经启用了。</p><p><code>ModuleUtilsHook</code> 用来 Hook <code>ModuleUtils</code>： </p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleUtilsHook</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SMSCODE_PACKAGE = BuildConfig.APPLICATION_ID;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODULE_VERSION = BuildConfig.MODULE_VERSION;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (SMSCODE_PACKAGE.equals(lpparam.packageName)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                XLog.i(<span class="string">"Hooking current Xposed module status..."</span>);</span><br><span class="line">                hookModuleUtils(lpparam);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                XLog.e(<span class="string">"Failed to hook current Xposed module status."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookModuleUtils</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String className = ModuleUtils.class.getName();</span><br><span class="line"></span><br><span class="line">        XposedHelpers.findAndHookMethod(className, lpparam.classLoader,</span><br><span class="line">                <span class="string">"getModuleVersion"</span>,</span><br><span class="line">                XC_MethodReplacement.returnConstant(MODULE_VERSION));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其中上面的 <code>MODULE_VERSION</code> 是在项目 <code>module</code> 的 <code>build.gradle</code> 自定义的：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="GRADLE"><figure class="highlight /gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        buildConfigField(<span class="string">"int"</span>, <span class="string">"MODULE_VERSION"</span>, <span class="string">"18"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>最后，因为 <code>ModuleUtilsHook</code> 在 Hook 过程中用到了反射，所以不应该混淆 <code>ModuleUtils</code> 的 <code>getModuleVersion</code> 方法：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-keep class com.github.tianma8023.xposed.smscode.utils.ModuleUtils &#123;</span><br><span class="line">    int getModuleVersion();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>源码请戳 <a href="https://github.com/tianma8023/XposedSmsCode/blob/2.0.4/app/src/main/java/com/github/tianma8023/xposed/smscode/xp/hook/ModuleUtilsHook.java" target="_blank" rel="noopener">ModuleUtilsHook</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xposed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xposed开发之微信赞赏</title>
      <link href="/post/xposed-wechat-donate/"/>
      <url>/post/xposed-wechat-donate/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>个人开发者开发出来的 App，经常会见到微信赞赏（或者捐赠）入口。这个是如何实现的呢？</p><a id="more"></a><p>一般有以下方案：</p><ol><li>一般的个人 App 是不会接入微信/支付宝 SDK 的，因为 SDK 嵌入成本高，也会增加不小的 APK 体积，应用市场审核一般也是通过不了的。</li><li>而微信对通过直接使用相应的 URI 传参跳转至微信相应捐赠页面是不可行的。</li><li>众多独立 App 开发者就采取迂回策略，通过 App 内嵌收款二维码 或者 赞赏码图片，把图片放到相册中，并跳转至微信扫一扫界面，通过引导用户从相册中选取相应的二维码图片，达到曲线救国的目的。</li></ol><p>以上方案中，只有方案 3 可行，看起来挺麻烦的，但不失为一种有效的方案。 </p><p>那么，如果让强大的 Xposed 来做，会不会有其他的方式呢？因为的解决方案中有很致命的点在于，需要引导用户自己去选取二维码图片从而实现迂回跳转到捐赠/转账页面，这一系列操作中交互很多，其实是很不方便的。 Xposed 能越过这些麻烦的操作的同时也能达到最终目的吗？</p><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>从上面可行的 方案3 中，以微信赞赏为例，赞赏时的界面如下：</p><img alt="微信赞赏界面" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/ss_wechat_reward_select_money.png@!w360"><p>其 Activity 为 <code>QrRewardSelectMoneyUI</code>，因为该 Activity 没有暴露给其他第三方 App 进行调用，所以上面的 方案2 是不可行的，而是需要通过微信内部其他 Activity 实现跳转。</p><p>实质上就是微信内部 Activity 带着相关的参数跳转到赞赏界面，其本质就是通过 Intent 携带相关参数，启动目标赞赏 Activity。</p><p>那么 Xposed 实现微信捐赠的思路就来了：</p><ol><li>用户点击 App 中的微信赞赏时，跳转至微信的主界面 <code>com.tencent.mm.ui.LauncherUI</code></li><li>Hook 主界面的 <code>onCreate</code> 方法，在 <code>Intent</code> 中添加相关参数，跳转至捐赠界面 <code>com.tencent.mm.plugin.collect.reward.ui.QrRewardSelectMoneyUI</code>，并销毁主界面 Activity。</li><li>为了以防万一，Hook <code>QrRewardSelectMoneyUI</code> 的 <code>onCreate</code> 方法，已确保相关参数正确传递。完工。</li></ol><p>那么，启动 <code>QrRewardSelectMoneyUI</code> 时到底需要传递哪些参数呢？ 这时就可以通过反编译查看源码，或者通过 Xposed Hook 的方式，进行相关参数的获取。</p><h3 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h3><p>常量类 <code>Const</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Const</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String WECHAT_PACKAGE_NAME = <span class="string">"com.tencent.mm"</span>;</span><br><span class="line">    String WECHAT_LAUNCHER_UI = WECHAT_PACKAGE_NAME + <span class="string">".ui.LauncherUI"</span>;</span><br><span class="line">    String WECHAT_QR_REWARD_SELECT_MONEY_UI = WECHAT_PACKAGE_NAME + <span class="string">".plugin.collect.reward.ui.QrRewardSelectMoneyUI"</span>;</span><br><span class="line">    String WECHAT_KEY_EXTRA_DONATE = <span class="string">"TianmaDonate"</span>;</span><br><span class="line">    <span class="comment">// 核心参数，可以通过 Xposed Hook 的方式获取参数的值。</span></span><br><span class="line">    String WECHAT_QRCODE_URL = <span class="string">"m01pPa@:hEyGJ5P*a1@$xPI"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>核心Hook类 <code>DonateWechatHook</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DonateWechatHook</span> <span class="keyword">implements</span> <span class="title">IXposedHookLoadPackage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_SCENE = <span class="string">"key_scene"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_QRCODE_URL = <span class="string">"key_qrcode_url"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_CHANNEL = <span class="string">"key_channel"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Const.WECHAT_PACKAGE_NAME.equals(lpparam.packageName)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                hookLauncherUIOnCreate(lpparam);</span><br><span class="line">                hookQrRewardSelectMoneyUI(lpparam);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hook com.tencent.mm.ui.LauncherUI#onCreate();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookLauncherUIOnCreate</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> </span>&#123;</span><br><span class="line">        XposedHelpers.findAndHookMethod(Const.WECHAT_LAUNCHER_UI,</span><br><span class="line">                lpparam.classLoader,</span><br><span class="line">                <span class="string">"onCreate"</span>,</span><br><span class="line">                Bundle.class,</span><br><span class="line">                <span class="keyword">new</span> LauncherUIOnCreateHook());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LauncherUIOnCreateHook</span> <span class="keyword">extends</span> <span class="title">XC_MethodHook</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            Activity activity = (Activity) param.thisObject;</span><br><span class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Intent intent = activity.getIntent();</span><br><span class="line">                <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    ComponentName cn = intent.getComponent();</span><br><span class="line">                    String className = cn == <span class="keyword">null</span> ? <span class="keyword">null</span> : cn.getClassName();</span><br><span class="line">                    <span class="comment">// 自定义的参数，用于区分正常启动微信主界面</span></span><br><span class="line">                    <span class="keyword">boolean</span> hasDonateExtra = intent.hasExtra(Const.WECHAT_KEY_EXTRA_DONATE);</span><br><span class="line">                    <span class="keyword">if</span> (Const.WECHAT_LAUNCHER_UI.equals(className) &amp;&amp; hasDonateExtra) &#123;</span><br><span class="line">                        <span class="comment">// 参数校验成功，则跳转至微信赞赏界面，并销毁主Activity</span></span><br><span class="line">                        intent.removeExtra(Const.WECHAT_KEY_EXTRA_DONATE);</span><br><span class="line"></span><br><span class="line">                        Intent donateIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">                        donateIntent.setClassName(activity, Const.WECHAT_QR_REWARD_SELECT_MONEY_UI);</span><br><span class="line">                        donateIntent.putExtra(KEY_SCENE, <span class="number">2</span>);</span><br><span class="line">                        donateIntent.putExtra(KEY_QRCODE_URL, Const.WECHAT_QRCODE_URL);</span><br><span class="line">                        donateIntent.putExtra(KEY_CHANNEL, <span class="number">13</span>);</span><br><span class="line">                        donateIntent.putExtra(Const.WECHAT_KEY_EXTRA_DONATE, <span class="keyword">true</span>);</span><br><span class="line">                        activity.startActivity(donateIntent);</span><br><span class="line">                        activity.finish();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hook com.tencent.mm.plugin.collect.reward.ui.QrRewardSelectMoneyUI#onCreate();</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">hookQrRewardSelectMoneyUI</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> </span>&#123;</span><br><span class="line">        XposedHelpers.findAndHookMethod(Const.WECHAT_QR_REWARD_SELECT_MONEY_UI,</span><br><span class="line">                lpparam.classLoader,</span><br><span class="line">                <span class="string">"onCreate"</span>,</span><br><span class="line">                Bundle.class,</span><br><span class="line">                <span class="keyword">new</span> QrRewardSelectMoneyUIOnCreateHook());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">QrRewardSelectMoneyUIOnCreateHook</span> <span class="keyword">extends</span> <span class="title">XC_MethodHook</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            Activity activity = (Activity) param.thisObject;</span><br><span class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Intent intent = activity.getIntent();</span><br><span class="line">                <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 确保参数合法</span></span><br><span class="line">                    <span class="keyword">boolean</span> hasDonateExtra = intent.hasExtra(Const.WECHAT_KEY_EXTRA_DONATE);</span><br><span class="line">                    <span class="keyword">if</span> (hasDonateExtra) &#123;</span><br><span class="line">                        String qrCodeUrl = intent.getStringExtra(KEY_QRCODE_URL);</span><br><span class="line">                        <span class="keyword">if</span> (TextUtils.isEmpty(qrCodeUrl)) &#123;</span><br><span class="line">                            intent.putExtra(KEY_QRCODE_URL, Const.WECHAT_QRCODE_URL);</span><br><span class="line">                        &#125;</span><br><span class="line">                        intent.removeExtra(Const.WECHAT_KEY_EXTRA_DONATE);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>调用则是正常启动微信主界面，并传递特定参数即可：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">donateByWechat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">    intent.setClassName(Const.WECHAT_PACKAGE_NAME, Const.WECHAT_LAUNCHER_UI);</span><br><span class="line">    intent.putExtra(Const.WECHAT_KEY_EXTRA_DONATE, <span class="keyword">true</span>);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>源码： <a href="https://github.com/tianma8023/XposedSmsCode/blob/2.0.3/app/src/main/java/com/github/tianma8023/xposed/smscode/xp/hook/DonateWechatHook.java" target="_blank" rel="noopener">DonateWechatHook</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/veryyoung/WechatLuckyMoney" target="_blank" rel="noopener">WechatLuckeyMoney</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xposed </tag>
            
            <tag> 微信捐赠 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于抄袭开源项目的感想</title>
      <link href="/post/thought-about-plagiarism-for-open-source-project/"/>
      <url>/post/thought-about-plagiarism-for-open-source-project/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>昨天，一位用户告诉我，最新 Xposed 仓库上最新版本（2.6.6）的 <a href="https://repo.xposed.info/module/me.piebridge.forcestopgb" target="_blank" rel="noopener">阻止运行</a> 增加了新的功能：收到短信验证码弹出提示，并自动复制验证码到剪切板。这跟我本人的模块 <a href="https://www.coolapk.com/apk/com.github.tianma8023.xposed.smscode" target="_blank" rel="noopener">验证码提取器Xposed</a> 的核心功能之一是重合的。因为考虑到 <code>阻止运行</code> 这款 Xposed 模块本身是专攻对流氓 App 的治理的，新增的这个功能怎么都和其核心业务不搭边，在好奇心的驱使下，我反编译了其 2.6.6 版本的 apk…</p><a id="more"></a><p>谈到开源项目，就应该想到 <code>开源协议</code>（即 <code>开放源代码软件许可证</code>）。开源项目是基于开源协议的，目前有各式各样的开源协议（<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E5%8F%8A%E9%96%8B%E6%94%BE%E5%8E%9F%E5%A7%8B%E7%A2%BC%E8%BB%9F%E9%AB%94%E8%A8%B1%E5%8F%AF%E8%AD%89%E6%AF%94%E8%BC%83" target="_blank" rel="noopener">自由及开放源代码软件许可证比较</a>），以下是其简明的对比图：</p><img alt="开源协议对比图（摘自 阮一峰 博客）" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/compare_licenses.png@!w480"><p>而我开源的 Xposed 模块 - <a href="https://github.com/tianma8023/XposedSmsCode" target="_blank" rel="noopener">XposedSmsCode</a>，是 GPL 协议的，也就是<span style="color:#ff4082;">参考了这个项目代码的其他项目，应该也同样使用 GPL 协议将其开源出来</span>。</p><p>然而，反编译 <code>阻止运行(2.6.6)</code> 的 apk 之后，看了其混淆后的代码，我很震惊：<span style="color:#ff4082;">这个所谓的新加入的功能，可以说是完完全全抄袭了我已开源的 Xposed 模块中的代码</span>。</p><p>以下是对比图（左边是反编译的 <code>阻止运行</code> 的代码，右边是我的源码，点击查看大图）：</p><img alt="1" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/plagiarism_evidence_01.png@!w640"><img alt="2" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/plagiarism_evidence_02.png@!w640"><img alt="3" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/plagiarism_evidence_03.png@!w640"><img alt="4" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/plagiarism_evidence_04.png@!w640"><img alt="5" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/plagiarism_evidence_05.png@!w640"><img alt="6" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/plagiarism_evidence_06.png@!w640"><img alt="7" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/plagiarism_evidence_07.png@!w640"><p>类似截图中完全一致的地方还有很多，由于代码被混淆了，变量名看不出来是否一致，但类名，甚至是需要打印的日志信息也几乎完全一致，足以见 <code>阻止运行</code> 这款 App 的恶劣而龌龊的行为了。</p><p>那么问题来了， <code>阻止运行</code> 是不是也 <code>开源</code> 并遵循了 <code>GPL</code> 协议了呢？然而并没有，呵呵。劣迹斑斑，昭然于心。<code>阻止运行</code> 也确确实实恶心到我了，我只想说一句：我从未见过如此厚颜无耻之人！！！</p><p>这也让我想起了 <code>Shadowsocks</code> vs <code>ShadowsocksR</code> 以及 <code>黑阈</code> vs <code>阻止运行</code>，一切都是那么的相似，一切也都是那么的恶心。</p><p>我始终有一个开源的梦想，想为开源社区做点贡献，个人的贡献虽小，但也会积少成多。我开源的目的是为了分享知识，并希望能借此吸引和鼓励更多的开发者加入开源行列中来，并一起维护大家的开源社区。这算是一种情怀吧。然而这真真切切就是我所希望和期盼的……</p><p>最后提一下 <code>阻止运行</code> 的 “光荣历史”，请参考 <a href="https://blog.nfz.moe/archives/forcestopgb-lieying-brevent.html" target="_blank" rel="noopener">阻止运行、猎鹰网络、黑域 始末</a> 。至于其他的，我什么都不想说了，sad ~</p>]]></content>
      
      
      <categories>
          
          <category> 漫谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抄袭 </tag>
            
            <tag> 开源项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 应用关联特定后缀名的文件</title>
      <link href="/post/android-associate-file-extension-with-app/"/>
      <url>/post/android-associate-file-extension-with-app/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Android 开发中，会碰到一些特殊后缀的文件需要用自家 App 打开，也就是需要 Android 应用关联特定后缀名的文件。</p><a id="more"></a><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>应用场景比如：App 导出特定后缀名的备份文件，用户在文件浏览器中点击该文件时，需要用自家 App 打开并恢复备份数据。在这里以此为例。当然，适用场景绝不局限于此。</p><p>从文件管理器到自家 App，其实就是一个 <code>Intent</code> 传递过程，<code>Intent</code> 所携带的最关键的信息就是 <code>data</code> 信息, 而 <code>data</code> 由 <code>mimeType</code> 和 <code>URI</code> 组成。<code>mimeType</code> 表示文件媒体类型， <code>URI</code> 的结构为：</p><p><code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;[&lt;path&gt;|&lt;pathPrefix&gt;|&lt;pathPattern&gt;]</code></p><p>关于此部分信息可参考 <a href="https://developer.android.com/guide/topics/manifest/data-element" target="_blank" rel="noopener">data element</a> 或者 <a href="/post/579806496/#data-%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99">data 匹配规则</a> 。</p><p>需要解决的问题就变成了：应该怎样配置自家App，才能关联包含特定 <code>URI</code> 的 <code>Intent</code>。其实就等效于 Activity 如何能打开包含指定的 <code>Intent</code> 信息。</p><ul><li><p>Android 7.0 之前，分享文件的 <code>URI</code> 一般是通过如下示例代码得到：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File fileToShare = ...;</span><br><span class="line">Uri fileUri = Uri.fromFile(fileToShare);</span><br></pre></td></tr></table></figure></div><p>这里的 <code>Uri</code> 是 <code>file://</code> 格式的。</p></li><li><p>Android 7.0 起，文件分享加入了更加安全的机制，引入了 <code>FileProvider</code>，获取分享文件的 <code>URI</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">File fileToShare = ...;</span><br><span class="line">Uri fileUri = FileProvider.getUriFromFile(Context, authority, fileToShare);</span><br></pre></td></tr></table></figure></div><p>这里的 <code>Uri</code> 是 <code>content://</code> 格式的。</p></li></ul><p>再就是要限定特殊的后缀名，除了后缀名之外都不限制，所以路径应该采用 <code>pathPattern</code> 来进行通配符通配。关于 <code>pathPattern</code> 语法：</p><ul><li><code>.</code> 表示匹配任意字符；</li><li><code>*</code> 表示匹配0到多次；</li><li><code>.*</code> 表示匹配任意长度字符串；</li><li><code>\</code> 是转义字符，但在 xml 中用 <code>\\</code> 来表示。比如用 <code>\\.</code> 表示小数点 <code>.</code>；</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>比如，我们的 App 中的 <code>com.example.ActivityA</code> 要支持打开后缀名为 <code>.myext</code> 的文件，其 <code>mimeType</code> 为 <code>text/plain</code>。</p><p>通过以上分析，我们需要在 <code>AndroidManifest.xml</code> 中配置：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.example.ActivityA"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"*"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:pathPattern</span>=<span class="string">"/.*\\.myext"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:mimeType</span>=<span class="string">"text/plain"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:scheme</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:host</span>=<span class="string">"*"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:pathPattern</span>=<span class="string">"/.*\\.myext"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:mimeType</span>=<span class="string">"text/plain"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>需要注意的是，在接收读取 <code>Uri</code> 为 <code>file://</code> 形式的文件数据之前，需要获取 <code>READ_EXTERNAL_STORAGE</code> 权限。 <code>content://</code> 形式的文件数据则不需要该权限。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.android.com/guide/components/intents-filters" target="_blank" rel="noopener">Intents and Intent Filters</a><br><a href="https://stackoverflow.com/questions/3760276/android-intent-filter-associate-app-with-file-extension" target="_blank" rel="noopener">Android intent filter: associate app with file extension</a><br><a href="https://developer.android.com/guide/topics/manifest/data-element" target="_blank" rel="noopener">dat element</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件关联 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式 - 分组 &amp; 前瞻 &amp; 后瞻</title>
      <link href="/post/regular-expression-lookahead-lookbehind/"/>
      <url>/post/regular-expression-lookahead-lookbehind/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前在处理短信验证码问题的时候，碰到了关于验证码正则的问题，其中涉及到正则表达中的 <code>前瞻（lookahead）</code> 和 <code>后瞻（lookbehind）</code>，借此机会总结一下正则表达式的这种高级用法。</p><a id="more"></a><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>先看以下案例：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">您的验证码为 1247 ，请注意查收。</span><br><span class="line">您的验证码为1247，请注意查收。</span><br><span class="line">Your verification code is 1247 .</span><br><span class="line">您的验证码为 124789 ，请注意查收。</span><br></pre></td></tr></table></figure></div><p>针对以上 4 个例子，给出正则表达式，如何才能保证只提取其中的 4 位数验证码，并过滤掉 6 位数的验证码呢？（也就是对于情况123，提取出 1247，对于情况4，则返回无法提取。）</p><p>最开始想当然的认为这个正则很好写，<code>[0-9]{4}</code> 就搞定了，然而在匹配第 4 条的时候，匹配出来的结果也是 1247，显然不满足要求。然后再考虑到，4 位数字的字符串两边是有边界的，所以可以用 <code>\b[0-9]{4}\b</code> 来表示，然而这却没办法满足情况 2，在情况 2 下，匹配出来的结果为空。</p><p>最后的想法是，只要保证 <code>匹配 4 位数字字符串，且其前后都不再有数字</code>，则可以匹配以上所有情况。要满足这样的需求，则需要引申出 <code>分组</code> 以及 <code>前瞻</code>，<code>后瞻</code> 的概念。</p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="分组（Group）"><a href="#分组（Group）" class="headerlink" title="分组（Group）"></a>分组（Group）</h3><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hellohellohello</span><br></pre></td></tr></table></figure></div><p>针对以上文本，我们可以用 <code>hellohellohello</code> 正则表达式去匹配，更好的写法是 <code>(hello){3}</code>。其中被圆括号 <code>()</code> 括起来的部分称之为 <code>分组</code>。</p><h3 id="分组的引用"><a href="#分组的引用" class="headerlink" title="分组的引用"></a>分组的引用</h3><p>对于一个正则表达式来说，其中的分组是有相应编号（引用）的。</p><p>对于文本 <code>ABCDEFG</code>，可以用正则表达式  <code>((A(BC))((DE)F))G</code> 来匹配：</p><table><thead><tr><th align="center">编号</th><th align="center">组</th><th align="center">匹配内容</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">((A(BC))((DE)F))G</td><td align="center">ABCDEFG</td></tr><tr><td align="center">1</td><td align="center">((A(BC))((DE)F))</td><td align="center">ABCDEF</td></tr><tr><td align="center">2</td><td align="center">(A(BC))</td><td align="center">ABC</td></tr><tr><td align="center">3</td><td align="center">(BC)</td><td align="center">BC</td></tr><tr><td align="center">4</td><td align="center">((DE)F)</td><td align="center">DEF</td></tr><tr><td align="center">5</td><td align="center">(DE)</td><td align="center">DE</td></tr></tbody></table><p>关于分组的编号，其实<span style="color:#ff4081">就是二叉树的前序遍历（根节点 -&gt; 左子树 -&gt; 右子树），排除其中不是分组的部分</span>的即可：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">对于 (A(BC)(DE)F)G，我们可以在最外层先设一对圆括号：</span><br><span class="line"></span><br><span class="line">                ((A(BC))((DE)F))G -&gt;<span class="number">0</span></span><br><span class="line">                ↓                   ↓ </span><br><span class="line">             ((A(BC))((DE)F)) -&gt;<span class="number">1</span>   G</span><br><span class="line">            ↓             ↓</span><br><span class="line">        (A(BC)) -&gt;<span class="number">2</span>     ((DE)F) -&gt;<span class="number">4</span></span><br><span class="line">        ↓    ↓          ↓        ↓</span><br><span class="line">        A   (BC) -&gt;<span class="number">3</span>  (DE) -&gt;<span class="number">5</span>   F</span><br><span class="line">             ↓         ↓</span><br><span class="line">             BC        DE</span><br><span class="line"></span><br><span class="line">根据编号 <span class="number">0</span>~<span class="number">5</span>, 可以找到对应编号的分组</span><br></pre></td></tr></table></figure></div><h3 id="分组的种类"><a href="#分组的种类" class="headerlink" title="分组的种类"></a>分组的种类</h3><p>分组的种类可以分为两大类，即 <code>捕获型分组</code> 和 <code>非捕获型分组</code>:</p><ol><li>捕获型分组：将捕获（即匹配）到的内容放进分组中，简单来说 <code>捕获型分组的内容是要进入分组编号</code> 的，用 <code>(pattern)</code> 来表示。上面用到的分组都是捕获型分组。</li><li>非捕获型分组： 不将捕获（即匹配）到的内容放进分组中，简单来说 <code>非捕获型分组的内容是不会进入分组编号</code> 的，包括了 <code>(?:pattern)（标准的非捕获型分组）</code>, <code>(?=pattern)（肯定前瞻分组）</code>, <code>(?!pattern)（否定前瞻分组）</code>, <code>(?&lt;=pattern)（肯定后瞻分组）</code>, <code>(?&lt;!pattern)（否定后瞻分组）</code></li></ol><h4 id="标准非捕获型分组-pattern"><a href="#标准非捕获型分组-pattern" class="headerlink" title="标准非捕获型分组 - (?:pattern)"></a>标准非捕获型分组 - (?:pattern)</h4><p><code>(?:pattern)</code> 是标准的非捕获型分组。</p><p>还是以前面的文本 <code>ABCDEFG</code> 为例，可以用包含了标准的非捕获分组的正则表达式 <code>(?:(A(BC))((DE)F))G</code> 去匹配，<code>(?:pattern)</code> 不参与分组，也就是 <code>(?:(A(BC))((DE)F))</code> 不参与分组，所以：</p><table><thead><tr><th align="center">编号</th><th align="center">组</th><th align="center">匹配内容</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">(A(BC)(DE)F)G</td><td align="center">ABCDEFG</td></tr><tr><td align="center">1</td><td align="center">(A(BC))</td><td align="center">ABC</td></tr><tr><td align="center">2</td><td align="center">(BC)</td><td align="center">BC</td></tr><tr><td align="center">3</td><td align="center">((DE)F)</td><td align="center">DEF</td></tr><tr><td align="center">4</td><td align="center">(DE)</td><td align="center">DE</td></tr></tbody></table><h4 id="前瞻-amp-后瞻"><a href="#前瞻-amp-后瞻" class="headerlink" title="前瞻 &amp; 后瞻"></a>前瞻 &amp; 后瞻</h4><p>我们一般把文本开头的方向称之为 <code>前</code> 面，文本结尾称之为 <code>后</code> 面。而 <code>正则表达式解析引擎默认是从左往右解析的，因此对于解析引擎来说，文本尾部方向就是前方</code> 。 其实通过英文 <code>lookahead</code> 和 <code>lookbehind</code> 也能快速理解 <code>前</code> <code>后</code> 的正确含义。</p><p><code>前瞻</code> 和 <code>后瞻</code> 都分别包含 <code>肯定</code> 和 <code>否定</code>，都属于 <code>非捕获型分组</code>。值得注意的是，<span style="color:#ff4081">并非所有的计算机语言都支持正则表达式的后瞻</span>。 </p><ul><li><p><code>肯定前瞻</code>，用 <code>(?=pattern)</code> 表示。通俗解释： <code>匹配到的文本后面要跟着 pattern 代表的文本</code>，也就是说 <code>(?=pattern)</code> 本身仅参与文本匹配时的<strong>预测</strong>，匹配到的文本不会包含 <code>pattern</code> 的内容。</p><p>比如 <code>ab(?=cd)</code>，表示 匹配文本中包含的 ab 字符串，且该 ab 字符串后面要紧跟着 cd，否则无法匹配。比如该表达式能匹配到 <code>abcd</code> 中的 <code>ab</code>, 但不能匹配到 <code>abef</code> 中的 <code>ab</code>。注意到匹配到的文本（ab）并不会包含 <code>pattern</code>（(?=cd)） 的内容。</p></li></ul><p>其他三种 <code>否定前瞻</code>， <code>肯定后瞻</code>， <code>否定后瞻</code> 概念可以类比出来，就不再赘述。</p><p>前瞻 &amp; 后瞻 匹配规则及其匹配内容举例：</p><table><thead><tr><th align="center"></th><th align="center">表达式</th><th align="center">肯定前瞻 ab(?=cd)</th><th align="center">否定前瞻 ab(?!cd)</th><th align="center">肯定后瞻(?&lt;=ab)cd</th><th align="center">否定后瞻 (?&lt;!ab)cd</th></tr></thead><tbody><tr><td align="center">文本</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">abcdefgh</td><td align="center"></td><td align="center">ab</td><td align="center">空</td><td align="center">cd</td><td align="center">空</td></tr><tr><td align="center">abefcdgh</td><td align="center"></td><td align="center">空</td><td align="center">ab</td><td align="center">空</td><td align="center">cd</td></tr></tbody></table><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>那么，针对文章开头的 <code>匹配 4 位数字字符串，且其前后都不再有数字</code> 的正则表达式的书写就迎刃而解了：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(?&lt;![0-9])[0-9]&#123;4&#125;(?![0-9])</span><br></pre></td></tr></table></figure></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.runoob.com/java/java-regular-expressions.html" target="_blank" rel="noopener">Java 正则表达式</a><br><a href="https://segmentfault.com/a/1190000004429477" target="_blank" rel="noopener">JavaScript 正则表达式的分组匹配</a><br><a href="http://www.imkevinyang.com/2009/08/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%BE%E5%87%BA%E4%B8%8D%E5%8C%85%E5%90%AB%E7%89%B9%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9D%A1%E7%9B%AE.html" target="_blank" rel="noopener">使用正则表达式找出不包含特定字符串的条目</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Regular Expression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xposed 碎碎念</title>
      <link href="/post/xposed-ramble/"/>
      <url>/post/xposed-ramble/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最早接触 <a href="https://github.com/rovo89/Xposed" target="_blank" rel="noopener">Xposed</a> 是在 <a href="https://www.coolapk.com" target="_blank" rel="noopener">酷安网</a> 上，约摸是2014年，那个时候的酷安还叫酷市场。当时手里就一台小米2s，由于热衷于刷机尝鲜，稀里糊涂地就接触到了Xposed。当时最震撼的莫过于 <a href="https://www.coolapk.com/apk/ce.hesh.wechatUI" target="_blank" rel="noopener">WechatUI(链接已失效)</a>，我们知道，在 <code>Materail Design</code> 未流行的时候，国内市场通行各式各样的美化主题和美化App，也就是那个时候的 <code>MIUI</code> 还有其它的国产 Rom 或者 App 来进行主题美化。而 Android 版微信还有很大的 iOS 风格，WeChatUI 却能将微信修改为 MD 风格，着实惊艳。</p><a id="more"></a><p>Xposed 的功能非常强大，不光能对其他 App 的 UI 进行修改，同时也能对其他 App 内部的逻辑进行修改，这些修改称之为 Hook，具体的修改方式包含增加，删减，替换等。Xposed 可以对几乎所有的 App 通过 Hook 的方式修改代码逻辑，应用方向也很广阔，基于 Xposed 开发的 App 一般称之为 <code>Xposed 模块</code> 或者 <code>Xposed 插件</code>。Xposed 模块可以增强系统功能（如 <a href="https://www.coolapk.com/apk/github.tornaco.xposedmoduletest" target="_blank" rel="noopener">应用管理</a> 治理国内毒瘤），能增删第三方 App 的功能（如 <a href="https://github.com/Gh0u1L5/WechatMagician" target="_blank" rel="noopener">Wechat Magician</a> 实现微信防撤回、增加图片发送上限、朋友圈关键字屏蔽功能等），甚至可以能用于第三方的逆向破解等。Xposed 功能非常强大，几乎无所不能，所以也是一把双刃剑。优点前面已说明，缺点也不少：</p><ul><li>Xposed 模块安装多了之后，手机会变卡，并且会因为 Xposed 插件没跟上App版本等缘故时不时出现FC的异常</li><li>Xposed 插件权限相当高，会被不良商家所利用（点名批评，斗恶龙的勇者最终成为恶龙的典型，也是良心App商业化后黑化的典型：<a href="https://www.coolapk.com/apk/me.piebridge.forcestopgb" target="_blank" rel="noopener">阻止运行</a>），所以使用时需要注意。</li><li>Xposed 权限高，所以忌惮。目前部分 App 会检测系统中是否安装了 Xposed 框架，如果安装则不让运行（如 下厨房，摩拜单车等），甚至可以引起封号（微信？ 此处存疑）。当然了，完全可以用 Xposed 去替换这些软件中检测 Xposed 框架是否存在的代码块，XD</li></ul><p>所以，合理的使用 Xposed，能让自己的手机和 App 用起来更舒心。</p><h3 id="Xposed-原理"><a href="#Xposed-原理" class="headerlink" title="Xposed 原理"></a>Xposed 原理</h3><p>Xposed 相关的三个核心项目均出自 <a href="https://github.com/rovo89" target="_blank" rel="noopener">rovo89</a> 大佬之手：</p><ul><li><a href="https://github.com/rovo89/Xposed" target="_blank" rel="noopener">Xposed</a>：Xposed的C++部分，用来替换 <code>/system/bin/app_process</code>，进而控制 <code>Zygote(受精卵)</code> 进程。同时为 XposedBridge 提供 JNI 方法调用，并在启动 <code>Zygote</code> 进程的过程中加载 XposedBridge.jar。Android 系统中所有的其他进程都由 <code>Zygote</code> 孵化（fork）而来，所以其他应用所在进程在加载启动过程中都会含有 XposedBridge。</li><li><a href="https://github.com/rovo89/XposedBridge" target="_blank" rel="noopener">XposedBridge</a>：加载 Xposed Modules（模块），并为 Xposed Modules（模块） 提供 API 用于开发。API 主要包括:<ol><li><code>IXposedHookZygoteInit</code>: 在 <code>Zygote</code> 进程启动（即 Android 启动）过程中 Hook 的接口</li><li><code>IXposedHookLoadPackage</code>: 在新的 App 加载过程中 Hook 的接口，可以 Hook 当前应用的 Java 方法</li><li><code>IXposedHookInitPackageResources</code>: 在初始化资源过程中 Hook 的接口，可以替换当前应用的资源（图标，样式等等）。</li></ol></li><li><a href="https://github.com/rovo89/XposedInstaller" target="_blank" rel="noopener">XposedInstaller</a>：Xposed 的安装程序，内含 <code>Xposed</code> 和 <code>XposedBridge</code>，并提供对 Xposed Modules 管理。</li></ul><h3 id="Xposed-模块推荐"><a href="#Xposed-模块推荐" class="headerlink" title="Xposed 模块推荐"></a>Xposed 模块推荐</h3><p>在这里推荐一些实用的或者有意思的 Xposed 模块：</p><ul><li><a href="https://www.coolapk.com/apk/github.tornaco.xposedmoduletest" target="_blank" rel="noopener">应用管理Xposed</a>  已开源 <a href="https://github.com/Tornaco/X-APM" target="_blank" rel="noopener">X-APM</a>，应用控制类（绿色守护，黑阈，MyAndroidTools等）模块应用，神器。</li><li><a href="https://www.coolapk.com/apk/fi.veetipaananen.android.disableflagsecure" target="_blank" rel="noopener">启用截图DisableFlagSecure</a> 已开源 <a href="https://github.com/veeti/DisableFlagSecure" target="_blank" rel="noopener">DisableFlagSecure</a>，关掉系统底层的 FLAG_SECURE ，这样之前不能截屏/录屏的都能截屏/录屏了，比如 QQ 里面的闪图。</li><li><a href="https://www.coolapk.com/apk/top.jowanxu.scanlogin" target="_blank" rel="noopener">ScanLogin</a> 已开源 <a href="https://github.com/wangzailfm/ScanLogin" target="_blank" rel="noopener">ScanLogin</a>，扫码自动登录，免去 PC 端微信登录后还需要在手机端再点一下确认登录的尴尬。</li><li><a href="https://play.google.com/store/apps/details?id=com.jozein.xedge" target="_blank" rel="noopener">Xposed Edge</a> 边缘手势操作模块，功能强大，有 pro 版。</li><li><a href="https://www.coolapk.com/apk/com.specher.music163" target="_blank" rel="noopener">网易云音乐插件</a> 如今的网易云音乐 Android 端越来越臃肿了，是时候用这个模块精简精简了。</li><li><a href="https://github.com/GravityBox/GravityBox" target="_blank" rel="noopener">GravityBox</a> 重力工具箱，非常棒的系统设置模块，按照自己喜欢的样子定制 Rom，需要下载对应 Android 版本的模块。</li><li><a href="https://www.coolapk.com/apk/com.surcumference.fingerprintpay" target="_blank" rel="noopener">指纹支付</a> 已开源 <a href="https://github.com/eritpchy/Xposed-Fingerprint-pay" target="_blank" rel="noopener">Xposed-Fingerprint-pay</a>, 指纹支付模块，让不支持微信，支付宝，QQ等指纹支付的原生Rom 也能体验指纹支付。</li><li><a href="https://github.com/Gh0u1L5/WechatMagician" target="_blank" rel="noopener">WechatMagician</a> 微信巫师，用于微信防撤回等众多有意思的扩展功能。特别值得一提的是，源码设计的很棒，汲取了其他微信相关模块每逢微信更新必崩溃的教训，自行设计一套 API，极大提高插件稳定性。</li><li><a href="https://github.com/Blankeer/MDWechat" target="_blank" rel="noopener">MDWechat</a> Material Design 的微信，很棒。</li></ul><p>最后再推荐一下自己开发的 Xposed 模块（凑表脸，还是后面再发文详细详解吧，摊手）：</p><ul><li><a href="https://github.com/tianma8023/XposedSmsCode" target="_blank" rel="noopener">验证码提取Xposed</a> 识别短信验证码，复制到系统剪切板，并能自动输入。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xposed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 笔记：AIDL进阶</title>
      <link href="/post/android-notes-AIDL-advanced/"/>
      <url>/post/android-notes-AIDL-advanced/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在上一篇博客 <a href="/post/3352500871#AIDL">Android 笔记：IPC - AIDL</a> 中讲到的 IPC 方式之一 AIDL 的基本用法，本文主要记录一下 AIDL 的进阶。 &nbsp; <a id="more"></a></p><h3 id="AIDL-中的注册与反注册"><a href="#AIDL-中的注册与反注册" class="headerlink" title="AIDL 中的注册与反注册"></a>AIDL 中的注册与反注册</h3><p>之前的 <code>IBookManager</code> 中只提供了获取 书籍列表(getBookList) 和 添加书籍(addBook) 的方法，现在我们将其扩展一下，希望能加入“当新的书本被添加之后，能够通知出去”。这是一种 <code>观察者模式</code>：</p><p>由于 <code>AIDL</code> 中无法使用普通接口，所以添加新的 <code>IOnNewBookArrived.aidl</code> 接口，用于回调新书的到来：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.tianma8023.ipclearn.aidl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.tianma8023.ipclearn.aidl.Book;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IOnNewBookArrivedListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(in Book newBook)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>IBookManager.aidl</code> 接口中添加新的注册监听/取消监听的方法：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.tianma8023.ipclearn.aidl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.tianma8023.ipclearn.aidl.Book;</span><br><span class="line"><span class="keyword">import</span> com.github.tianma8023.ipclearn.aidl.IOnNewBookArrivedListener;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookArrivedListener listener)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(IOnNewBookArrivedListener listener)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>远程服务端实现 <code>BookManagerService</code>, 实现新加的两个方法，在 Service 中开启线程，定时加入一本新书通知所有注册者：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BMS"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前Service是否被销毁</span></span><br><span class="line">    <span class="keyword">private</span> AtomicBoolean mIsServiceDestroyed = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 书籍列表</span></span><br><span class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 观察者列表</span></span><br><span class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;IOnNewBookArrivedListener&gt; mListenerList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mBookList;      </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            mBookList.add(book);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!mListenerList.contains(listener)) &#123;</span><br><span class="line">                mListenerList.add(listener);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"listener already exists "</span> + listener);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(IOnNewBookArrivedListener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mListenerList.contains(listener)) &#123;</span><br><span class="line">                mListenerList.remove(listener);</span><br><span class="line">                Log.d(TAG, <span class="string">"unregister listener succeed."</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"listener not found, unregiser failed"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">"Think in Java"</span>));</span><br><span class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">2</span>, <span class="string">"Android Programming"</span>));</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> ServiceWorker).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mIsServiceDestroyed.set(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        mBookList.add(book);</span><br><span class="line">        <span class="comment">// 通知所有Listener</span></span><br><span class="line">        Log.d(TAG, <span class="string">"new book arrived, notify all listeners"</span>);</span><br><span class="line">        <span class="keyword">for</span> (IOnNewBookArrivedListener listener : mListenerList) &#123;</span><br><span class="line">            listener.onNewBookArrived(book);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceWorker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 每5s在后台生成一本新书</span></span><br><span class="line">            <span class="keyword">while</span>(!mIsServiceDestroyed.get()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> bookId = mBookList.size() + <span class="number">1</span>;</span><br><span class="line">                Book newBook = <span class="keyword">new</span> Book(bookId, <span class="string">"new book#"</span> + bookId);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    onNewBookArrived(newBook);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemoteExcption e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>BookManagerServicce</code> 置于独立进程中：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">android:name</span>=<span class="string">".aidl.BookManagerService"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:process</span>=<span class="string">":remote"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>客户端 <code>BookManagerActivity</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BookManagerActivity"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_NEW_BOOK_ARRIVED = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IBookManager mRemoteBookManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">            IBookManager bookManager = IBookManager.Stub.asInterface(service);</span><br><span class="line">            mRemoteBookManager = bookManager;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 服务端的 getBookList() 方法可能会比较耗时，所以需要酌情考虑是否在子线程中进行访问</span></span><br><span class="line">                List&lt;Book&gt; bookList = bookManager.getBookList();</span><br><span class="line">                Log.i(TAG, <span class="string">"book list type: "</span> + bookList.getClass().getCanonicalName());</span><br><span class="line">                Log.i(TAG, <span class="string">"query book list: "</span> + bookList);</span><br><span class="line"></span><br><span class="line">                bookManager.registerListener(mOnNewBookArrivedListener);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(RemoteException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">          mRemoteBookManager = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> MSG_NEW_BOOK_ARRIVED:</span><br><span class="line">                    String message = <span class="string">"received new book: "</span> + msg.obj;</span><br><span class="line">                    Log.d(TAG, message);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IOnNewBookArrivedListener mOnNewBookArrivedListener = <span class="keyword">new</span> IOnNewBookArrivedListener.Stub() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(Book newBook)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            mHandler.obtainMessage(MSG_NEW_BOOK_ARRIVED, newBook).sendToTarget();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_book_manager);</span><br><span class="line"></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, BookManagerService.class);</span><br><span class="line">        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        preDestroy();</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// unregister listener</span></span><br><span class="line">        <span class="keyword">if</span> (mRemoteBookManager != <span class="keyword">null</span> &amp;&amp; mRemoteManager.asBinder().isBinderAlive()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"unregister listener: "</span> + mOnNewBookArrivedListener);</span><br><span class="line">                mRemoteBookManager.unregisterListener(mOnNewBookArrivedListener);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// unbind service</span></span><br><span class="line">        unbindService(mConnection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>log日志：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.github.tianma8023.ipclearn:remote I/BMS: new book arrived, notify all listeners</span><br><span class="line">com.github.tianma8023.ipclearn D/BookManagerActivity: received new book: Book&#123;bookId=3, bookName=&apos;new book#3&apos;&#125;</span><br><span class="line"></span><br><span class="line">com.github.tianma8023.ipclearn I/BookManagerActivity: unregister listener: com.github.tianma8023.ipclearn.aidl.BookManagerActivity$4@80e21c1</span><br><span class="line">com.github.tianma8023.ipclearn:remote D/BMS: listener not found, unregister failed</span><br></pre></td></tr></table></figure></div><p>通过日志，可以看出，服务端每次的书籍推送确实收到，<span style="color:#ff4081">但是在服务端执行 <code>unregisterListener</code> 的时候却并没有正确执行</span>。问题的原因在于， <code>Binder</code> 会把客户端传递过来的对象重新转化成新的对象，在客户端注册/反注册过程中使用的是同一个客户端对象，但是通过 <code>Binder</code> 传递到服务端的对象则不一样，所以会存在反注册失败的现象。</p><p>上述问题的解决方案就是使用 <code>RemoteCallbackList</code>。<code>RemoteCallbackList</code> 由系统提供，专门用来删除跨进成的 listener 接口。</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteCallbackList</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">IInterface</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">interface</span> <span class="title">IOnNewBookArrivedListener</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">IInterface</span></span></span><br></pre></td></tr></table></figure></div><p>可以看出来，<code>RemoteCallbackList</code> 是一个泛型，可以管理任意的 AIDL 接口。</p><p><code>RemoteCallbackList</code> 部分源码：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteCallbackList</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">IInterface</span>&gt; </span>&#123;</span><br><span class="line">    ArrayMap&lt;IBinder, Callback&gt; mCallbacks = <span class="keyword">new</span> ArrayMap&lt;IBinder, Callback&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Callback</span> <span class="keyword">implements</span> <span class="title">IBinder</span>.<span class="title">DeathRecipent</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> E mCallback;</span><br><span class="line">        <span class="keyword">final</span> Object mCookie;</span><br><span class="line">        Callback(E callback, Object cookie) &#123;</span><br><span class="line">            mCallback = callback;</span><br><span class="line">            mCookie = cookie;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 省略...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以看出来 <code>RemoteCallbackList</code> 内部其实是一个 <code>Map</code>，建立起 <code>IBinder</code> 到 <code>Callback</code> 的映射，而 <code>Callback</code> 又封装了真正的 <code>IInterface</code> 的 <code>listener</code>，也就是实际上建立起了 <code>IBinder</code> 到 <code>listener</code> 的映射。</p><p>虽然之前的 <code>IOnNewBookArrivedListener</code> 会由客户端的一个对象会在服务端生成不一样的对象，但是其底层的 <code>Binder</code> 是一样的，所以 <code>RemoteCallbackListener</code> 正是利用了这个特性，真正地实现反注册。</p><p>正确姿势：<br>用 <code>RemoteCallbackList</code> 替换前面的 <code>CopyOnWriteArrayList</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// private CopyOnWiteArrayList&lt;IOnNewBookArrivedListener&gt; mListenerList = new CopyOnWriteArrayList&lt;&gt;();</span></span><br><span class="line"><span class="keyword">private</span> RemoteCallbackList&lt;IOnNewBookArrivedListener&gt; mListenerList = <span class="keyword">new</span> RemoteCallbackList&lt;&gt;();</span><br></pre></td></tr></table></figure></div><p>修改 <code>registerListener</code> 和 <code>unregisterListener</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerListener</span><span class="params">(IOnNewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    mListenerList.register(listener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterListener</span><span class="params">(IOnNewBookArrivedListener listener)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    mListenerList.unregister(listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>修改通知所有已注册的 listener 的 <code>onNewBookArrived</code> 方法：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onNewBookArrived</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    mBookList.add(book);</span><br><span class="line">    <span class="comment">// 通知所有listener</span></span><br><span class="line">    Log.i(TAG, <span class="string">"new book arrived, notify all listeners"</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> N = mListenerList.beginBroadcast();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        IOnNewBookArrivedListener listener = mListenerList.getBroadcastItem(i);</span><br><span class="line">        <span class="keyword">if</span>(listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            listener.onNewBookArrived(book);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mListenerList.finishBroadcast();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>注意，遍历 <code>RemoteCallbackList</code> 必须要用上述方式进行，即 <code>begiinBroadcast</code> 和 <code>finishBroadcast</code> 必须配对使用。</p><h3 id="AIDL-重连-Service"><a href="#AIDL-重连-Service" class="headerlink" title="AIDL 重连 Service"></a>AIDL 重连 Service</h3><p>当服务端程序意外停止时，<code>Binder</code> 会意外死亡，需要重新连接 <code>Service</code>，有两种解决方案：</p><ol><li>给 <code>Binder</code> 设置 <code>DeathRecipient</code> 监听，当 <code>Binder</code> 死亡时，会回调 <code>DeathRecipient#binderDied()</code>，这时可以重连 Service；</li><li>在 <code>ServiceConnection#onServiceDisconnected()</code> 中重连 Service。</li></ol><p>两者的区别在于在 <code>bindDied</code> 中是在客户端的 <code>Binder</code> 线程池被调用，而 <code>onServiceDisconnected</code> 是在UI线程中被回调。</p><p><code>BookManagerActivity</code> 中加入：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">private</span> IBookManager mRemoteBookManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IBinder.DeathRecipient mDeathRecipient = <span class="keyword">new</span> IBinder.DeathRecipient() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">binderDied</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 子线程，binder线程</span></span><br><span class="line">            <span class="keyword">if</span> (mRemoteBookManager == <span class="keyword">null</span>) </span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            mRemoteBookManager.asBinder().unlinkToDeath(mDeathRecipient, <span class="number">0</span>);</span><br><span class="line">            mRemoteBookManager = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 重新绑定 Service</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">            IBookManager bookManager = IBookManager.Stub.asInterface(service);</span><br><span class="line">            mRemoteBookManager = bookManager;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mRemoteBookManager.asBinder().linkToDeath(mDeathRecipient, <span class="number">0</span>); </span><br><span class="line">                <span class="comment">// ... 省略</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">            mRemoteBookManager = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">// 主线程</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 重连 Service</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h3><p>默认情况下，远程服务可以被其他外部组件连接上，所以，必要的时候需要加入权限验证。通常有以下几种方案：</p><ol><li><p>在远程 Service 的 onBind 中进行验证，这里的验证方式也有很多，常用的是使用 <code>permission</code> 进行验证：<br>在 AndroidManifest 中声明所需要的权限：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">permission</span> </span></span><br><span class="line"><span class="tag">   <span class="attr">android:name</span>=<span class="string">"com.github.tianma8023.ipclearn.permission.ACCESS_BOOK_SERVICE"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:level</span>=<span class="string">"normal"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>在 <code>BookManagerService</code> 的 <code>onBind</code> 中做权限验证：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 权限验证</span></span><br><span class="line">   <span class="keyword">int</span> result = checkCallingOrSelfPermission (com.github.tianma8023.ipclearn.permission.ACCESS_BOOK_SERVICE);</span><br><span class="line">   <span class="keyword">if</span> (result == PackageManager.PERMISSION_DENIED)</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">return</span> mBinder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这样就完成了权限的验证，当有客户端需要连接该服务时，需要申请权限：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:name</span>=<span class="string">"com.github.tianma8023.ipclearn.permission.ACCESS_BOOK_SERVICE"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>在服务端的 <code>Binder#onTransact()</code> 中进行权限验证：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, Parcel data, Parcel reply, <span class="keyword">int</span> flags)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">      <span class="comment">// 权限验证</span></span><br><span class="line">      <span class="comment">// 1. 需要声明自定权限 "com.github.tianma8023.ipclearn.permission.ACCESS_BOOK_SERVICE"</span></span><br><span class="line">      <span class="comment">// 2. 包名前缀必须是 "com.github.tianma8023"</span></span><br><span class="line">      <span class="keyword">int</span> check = checkCallingOrSelfPermission(<span class="string">"com.github.tianma8023.ipclearn.permission.ACCESS_BOOK_SERVICE"</span>);</span><br><span class="line">      <span class="keyword">if</span> (check == PackageManager.PERMISSION_DENIED)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      String packageName = <span class="keyword">null</span>;</span><br><span class="line">      String[] packages = getPackageManager().getPackagesForUid(getCallingUid());</span><br><span class="line">      <span class="keyword">if</span> (packages != <span class="keyword">null</span> &amp;&amp; packages.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          packageName = packages[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (packageName == <span class="keyword">null</span> || !packageName.startsWith(<span class="string">"com.github.tianma8023"</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.onTransact(code, data, reply, flags);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述代码片段，验证了 permission，还验证了包名前缀，只有都满足要求的才能验证通过。</p></li><li><p>为 <code>Service</code> 指定 <code>android:permission</code> 属性。</p></li></ol><h3 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h3><p><a href="https://github.com/tianma8023/IPCLearn" target="_blank" rel="noopener">IPCLearn</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android notes </tag>
            
            <tag> AIDL </tag>
            
            <tag> IPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android笔记：IPC</title>
      <link href="/post/android-notes-IPC/"/>
      <url>/post/android-notes-IPC/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><code>IPC</code> (Interprocess Communication) 即进程间通信，需要用到 <code>IPC</code> 主要有以下原因：</p><ul><li>应用内自身原因需要采用多进程，比如，大应用模块多，需要的内存大，而 Android 对单进程内存有大小限制，所以需要多进程获取更多的内存空间；</li><li>当前应用需要获取其他应用数据。</li></ul><a id="more"></a><h2 id="Android-多进程模式"><a href="#Android-多进程模式" class="headerlink" title="Android 多进程模式"></a>Android 多进程模式</h2><h3 id="开启多进程模式"><a href="#开启多进程模式" class="headerlink" title="开启多进程模式"></a>开启多进程模式</h3><p>Android 中开启多进程有两种方式：</p><ol><li>给四大组件在 <code>AndroidManifest</code> 中指定 <code>android:process</code> 属性</li><li>通过 JNI 在 <code>native</code> 层 <code>fork</code> 子进程（属于Linux处理方式）</li></ol><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".FirstActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"FirstActivity"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SecondActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"SecondActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:process</span>=<span class="string">":remote"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".ThirdActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">"ThirdActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:process</span>=<span class="string">"com.github.tianma8023.ipclearn.remote"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p>这里，应用程序的包名是 <code>com.github.tianma8023.ipclearn</code>，其中 <code>FirstActivity</code> 运行在以包名为进程名的默认进程中；而<code>SecondActivity</code> 在启动时，会运行在名为 <code>com.github.tianma8023.ipclearn:remote</code> 的进程中；<code>ThirdActivity</code> 在启动时，会运行在名为 <code>com.github.tianma8023.ipclearn.remote</code> 的进程中。<br>以 <code>:</code> 开头的进程是当前应用的私有进程，其他应用程序的四大组件不会和它跑在同一个进程中；不以 <code>:</code> 开头的进程是全局进程，其他应用可以通过 <code>ShareUID</code> 的方式和其跑在同一个进程中。</p><h3 id="多进程模式弊端"><a href="#多进程模式弊端" class="headerlink" title="多进程模式弊端"></a>多进程模式弊端</h3><p>多进程模式会造成如下问题：</p><ol><li>静态成员变量以及单例模式失效：<br> Android系统为每个进程都分配有独立的虚拟机，不同的虚拟机有着不同的内存空间分配，在不同虚拟机下访问同一个类对象会分配到不同的地址空间，也就是属于不同的对象。</li><li>线程同步机制失效：<br> 在不同的内存地址空间中，同步锁（无论是对象锁还是全局锁）也不一样，故没办法在不同进程间进行线程同步。</li><li><code>SharedPreferences</code> 可靠性降低<br> <code>SharedPreferences</code> 底层通过读写 XML 文件来实现，在不同进程中并发读写是会产生同步问题的。</li><li><code>Application</code> 会多次创建：<br> 每个进程有独立的虚拟机，自然也有独立的 <code>Application</code> 对象</li></ol><p>从以上信息可以得出：位于不同进程的四大组件之间，但凡通过内从共享数据、变量的，都会共享失败。</p><h2 id="Android-中的-IPC-方式"><a href="#Android-中的-IPC-方式" class="headerlink" title="Android 中的 IPC 方式"></a>Android 中的 IPC 方式</h2><h3 id="Bundle"><a href="#Bundle" class="headerlink" title="Bundle"></a>Bundle</h3><p><code>Activity</code>, <code>Service</code>, <code>BroadcastReceiver</code> 都支持在 <code>Intent</code> 中传递 <code>Bundle</code> 数据，而因为 <code>Bundle</code> 实现了 <code>Parcelable</code> 接口，所以可以在不同的进程间传输，也就是进行了进程间单向通信。</p><h3 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a>共享文件</h3><p>既然共享内存会失效，那就通过共享文件的方式，但是也会存在并发读写的问题，所以文件共享方式适合对数据同步要求不高的进程间通信。<br>虽然 <code>SharedPreferences</code> 本质是文件读写，但由于 Android 系统对其有缓存策略，即在内存中也会持有 <code>SharedPreferences</code> 的缓存，因此进程间通信不宜用 <code>SharedPreferences</code>。</p><h3 id="AIDL"><a href="#AIDL" class="headerlink" title="AIDL"></a>AIDL</h3><p>AIDL(Android Interface Definition Language) 的进程间通信方式主要依靠 <code>Binder</code> 实现。</p><p>定义一个实体类 <code>Book</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Book.java</span></span><br><span class="line"><span class="keyword">package</span> com.github.tianma8023.ipclearn.aidl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Parcelable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> bookId;</span><br><span class="line">    <span class="keyword">public</span> String bookName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// constructor ...</span></span><br><span class="line">    <span class="comment">// implements Parcelable ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>创建 <code>Book.aidl</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Book.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.github.tianma8023.ipclearn.aidl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明自定义的Parcelable对象</span></span><br><span class="line">parcelable Book;</span><br></pre></td></tr></table></figure></div><p>创建 <code>IBookManager.aidl</code> 欲实现对 <code>Book</code> 的管理操作：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IBookManager.aidl</span></span><br><span class="line"><span class="keyword">package</span> com.github.tianma8023.ipclearn.aidl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显式导入自定义的数据类型</span></span><br><span class="line"><span class="keyword">import</span> com.github.tianma8023.ipclearn.aidl.Book;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBook</span><span class="params">(in Book book)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>AIDL 中仅支持一下几种数据类型：</p><ol><li>基本数据类型(int, long, char, boolean, double 等)；</li><li>String 和 CharSequence；</li><li>List：只支持 ArrayList，且 List 中的每个元素必须是 AIDL 支持的数据类型;</li><li>Map：只支持 HashMap，且 Map 中的每个元素都必须是 AIDL 支持的数据类型；</li><li>Parcelable：实现了Parcelable的对象；</li><li>AIDL：所有的 AIDL 接口本身也可以在其他 AIDL 文件中使用。</li></ol><p>需要注意：</p><ul><li>自定义的 <code>Parcelable</code> 对象 和 <code>AIDL</code> 对象必须显式的 import 进来，无论它们是否在同一个包内。</li><li>如果 <code>AIDL</code> 文件中引用了自定义的 <code>Parcelable</code> 对象，则该 <code>Parcelable</code> 对象必须创建一个与它同名的 <code>AIDL</code> 文件，并在其中声明它为 <code>parcelable</code> 类型</li><li><code>AIDL</code> 文件中除了基本数据类型之外，其他类型参数都需标上：<code>in</code>(输入型参数), <code>out</code>(输出型参数) 或者 <code>inout</code>(输入输出型参数)。因为不同标识的参数底层开销不一样，所以最好别滥用 <code>inout</code></li></ul><p>之后 <code>build</code> 操作，Android Studio 会在模块 <code>/build</code> 目录下面生成对应的 <code>IBookManager.java</code> 文件，大致内容如下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IBookManager.java</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This file is auto-generated.  DO NOT MODIFY.</span></span><br><span class="line"><span class="comment"> * Original file: F:\\AndroidStudio\\IPCLearn\\app\\src\\main\\aidl\\com\\github\\tianma8023\\ipclearn\\aidl\\IBookManager.aidl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">package</span> com.github.tianma8023.ipclearn.aidl;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookManager</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">IInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Local-side IPC implementation stub class. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Stub</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">os</span>.<span class="title">Binder</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">github</span>.<span class="title">tianma8023</span>.<span class="title">ipclearn</span>.<span class="title">aidl</span>.<span class="title">IBookManager</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String DESCRIPTOR = <span class="string">"com.github.tianma8023.ipclearn.aidl.IBookManager"</span>;</span><br><span class="line">        <span class="comment">/** Construct the stub at attach it to the interface. */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Stub</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Cast an IBinder object into an com.github.tianma8023.ipclearn.aidl.IBookManager interface,</span></span><br><span class="line"><span class="comment">        * generating a proxy if needed.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> com.github.tianma8023.ipclearn.aidl.<span class="function">IBookManager <span class="title">asInterface</span><span class="params">(android.os.IBinader obj)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTransact</span><span class="params">(<span class="keyword">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class="keyword">int</span> flags)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">com</span>.<span class="title">github</span>.<span class="title">tianma8023</span>.<span class="title">ipclearn</span>.<span class="title">aidl</span>.<span class="title">IBookManager</span> </span>&#123;</span><br><span class="line">            <span class="keyword">private</span> android.os.IBinder mRemote;</span><br><span class="line"></span><br><span class="line">            Proxy(android.os.IBinder remote) &#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> android.os.<span class="function">IBinder <span class="title">asBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mRemote;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> java.lang.<span class="function">String <span class="title">getInterfaceDescriptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> DESCRIPTOR:</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> java.util.List&lt;com.github.tianma8023.ipclearn.aidl.Book&gt; getBookList() <span class="keyword">throws</span> android.os.RemoteException &#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(com.github.tianma8023.ipclearn.aidl.Book book)</span> <span class="keyword">throws</span> android.os.RemoteException </span>&#123;</span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> java.util.List&lt;com.github.tianma8023.ipclearn.aidl.Book&gt; getBookList() <span class="keyword">throws</span> android.os.RemoteException;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(com.github.tianma8023.ipclearn.aidl.Book book)</span> <span class="keyword">throws</span> android.os.RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><span style="color:#ff4081"> AS 自动生成的 aidl 对应的 java 类，可以很好的了解 Binder 的工作机制，所以有必要读一读这里的源码。</span> 这里大致介绍下各个字段及方法的含义：</p><ul><li><code>Stub#DESCRIPTOR</code>: <code>Binder</code> 的唯一标识</li><li><code>Stub#asInterface(android.os.IBinader obj)</code>:<br>将 <strong>服务端</strong> 的 Binder 对象转化成 <strong>客户端</strong> 所需要的 AIDL 接口类型的对象。当服务端和客户端位于同一进程中时，此方法返回的就是服务端对象本身。当它们不在同一个进程中时，返回的是由系统封装后的 <code>Stub.Proxy</code> 对象（也就是需要转换）</li><li><code>Stub#asBinder()</code>: 返回当前 Binder 对象</li><li><code>Stub#onTransact(int code, Parcel data, Parcel reply, int flags)</code>：<br>该方法会运行在<strong>服务端</strong>的 Binder 线程池中。客户端发起的跨进程请求会通过系统底层封装后交由此方法处理。服务端通过 code 参数确认接下来调用执行的目标方法。<br>如果该方法返回 false，则客户端的请求会失败，所以可以利用此特性进行权限认证。</li><li><code>Proxy#getBookList()</code>:<br>此方法运行在<strong>客户端</strong>。客户端使用此方法进行跨进程调用时，会转化为让服务端（远端）的 Binder 执行 <code>transact</code> 方法，与此同时客户端线程挂起，并最终调用服务端的 <code>onTransact</code>，即调用上一条的 <code>Stub#onTransact()</code> 方法，当服务端相应方法执行完毕后返回结果后，客户端当前线程结束挂起，继续执行，并取出服务端返回的结果。</li><li><code>Proxy#addBook()</code>：与上述的 <code>Proxy#getBookList()</code> 类似</li></ul><p><code>Binder</code> 的工作机制图：</p><img alt="Binder 工作机制" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Binder-works-principle.jpg@!w540"><p>当客户端发起远程请求时，客户端当前线程会被挂起，等待服务端进程返回结果，所以，如果服务端进程很耗时，则不能在 UI 线程中发起远程请求。</p><p>远程服务端实现 <code>Service</code>：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BookManagerService"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CopyOnWriteArrayList&lt;Book&gt; mBookList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;Book&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Binder mBinder = <span class="keyword">new</span> IBookManager.Stub() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBookList</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> mBookList;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBook</span><span class="params">(Book book)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">            mBookList.add(book);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookManagerService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">1</span>, <span class="string">"Think In Java"</span>));</span><br><span class="line">        mBookList.add(<span class="keyword">new</span> Book(<span class="number">2</span>, <span class="string">"Android Programing"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在 <code>AndroidManifest</code> 中将 <code>BookManagerService</code> 置于独立进程中，实现对进程间通信的模拟：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".aidl.BookManagerService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:process</span>=<span class="string">":remote"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>因为 <code>IBookManager.Stub</code> 类是 <code>Binder</code> 的一个抽象子类，所以在 <code>Serivce</code> 中实现 <code>IBookManager.Stub</code> 即可在 <code>onBind()</code> 中返回相应的 <code>Binder</code> 对象。</li><li>考虑到 AIDL 中的方法是在服务端的 <code>Binder</code> 线程池中执行的，所以考虑同步就使用了 <code>CopyOnWriteArrayList</code>。注意到 <code>CopyOnWriteArrayList</code> 并不是 <code>ArrayList</code> 的子类，但其实现的最基本的底层原理和 <code>ArrayList</code> 一致（基于数组，可以通过下标 index 进行访问等）。虽然服务端返回的是 <code>CopyOnWriteArrayList</code>，但 <code>Binder</code> 可以通过相同的机理去访问 <code>CopyOnWriteArrayList</code> 中的数据并最终形成新的 <code>ArrayList</code> 返回给客户端。这就与之前提到的 <code>AIDL支持的 List 只有 ArrayList</code> 并不冲突了。</li></ul><p>客户端跟绑定普通服务的客户端一致，比较简单：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookManagerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BookManagerActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">            IBookManager bookManager = IBookManager.Stub.asInterface(service);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 服务端的 getBookList() 方法可能会比较耗时，所以需要酌情考虑是否在子线程中进行访问</span></span><br><span class="line">                List&lt;Book&gt; bookList = bookManager.getBookList();</span><br><span class="line">                Log.i(TAG, <span class="string">"book list type: "</span> + bookList.getClass().getCanonicalName());</span><br><span class="line">                Log.i(TAG, <span class="string">"query book list: "</span> + bookList);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(RemoteException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.activity_book_manager);</span><br><span class="line"></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, BookManagerService.class);</span><br><span class="line">        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        unbindService(mConnection);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>以上是 <code>AIDL</code> 的基本用法，进阶用法请参考 <a href="/post/3246519744">Android 笔记：AIDL进阶</a></p><h3 id="Messenger"><a href="#Messenger" class="headerlink" title="Messenger"></a>Messenger</h3><p>使用 <code>Messenger</code> 可以在不同的进程之间传递 <code>Message</code> 对象，实现进程间数据交互通信。</p><p><code>Messenger</code> 的构造函数：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span><span class="params">(Handler target)</span> </span>&#123;</span><br><span class="line">    mTarget = target.getIMessenger();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Messenger</span><span class="params">(IBinder target)</span> </span>&#123;</span><br><span class="line">    mTarget = IMessenger.Stub.asInterface(target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>通过第二个构造函数可以看出来，<code>Messegner</code> 的底层就是 <code>AIDL</code>。</p><p><code>Messenger</code> 对 <code>AIDL</code> 做了封装，由于 <code>Messenger</code> 机制一次只能处理一个请求，因此在服务端不需要考虑线程同步。</p><p><code>Messenger</code> 远程服务端 <code>Service</code>:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerServerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MessengerServerService"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Messenger mMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span>(msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> TConstants.MSG_FROM_CLIENT:</span><br><span class="line">                    <span class="comment">// 服务端接收客户端消息</span></span><br><span class="line">                    Log.i(TAG, <span class="string">"msg from client: "</span> + msg.getData().get(TConstants.KEY_MSG));</span><br><span class="line">                    <span class="comment">// 服务端向客户端发送消息</span></span><br><span class="line">                    Messenger client = msg.replyTo;</span><br><span class="line">                    Bundle replyBundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">                    replyBundle.putString(TConstants.KEY_SERVER, <span class="string">"Okay, I'm server, your message has been received."</span>);</span><br><span class="line">                    Message replyMsg = Message.obtain(<span class="keyword">null</span>, TConstants.MSG_FROM_SERVER);</span><br><span class="line">                    replyMsg.setData(replyBundle);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        client.send(replyMsg);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMessenger.getBinder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>注册 <code>Service</code> 运行在单独进程中：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".messenger.MessengerServerService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:process</span>=<span class="string">":remote"</span> /&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>Messenger</code> 客户端 <code>Activity</code> ：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerClientActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MessengerClientActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端向服务端发送消息的Messenger</span></span><br><span class="line">    <span class="keyword">private</span> Messenger mMessenger;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServiceConnection mConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 客户端向服务端发送消息</span></span><br><span class="line">            mMessenger = <span class="keyword">new</span> Messenger(service);</span><br><span class="line">            Message msg = Message.obtain(<span class="keyword">null</span>, TConstants.MSG_FROM_CLIENT);</span><br><span class="line">            Bundle data = <span class="keyword">new</span> Bundle();</span><br><span class="line">            data.putString(TConstants.KEY_MSG, <span class="string">"Hello, this is client."</span>);</span><br><span class="line">            msg.setData(data);</span><br><span class="line">            <span class="comment">// 指定message的replyTo为Messenger对象</span></span><br><span class="line">            msg.replyTo = mGetReplyMessenger;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mMessenger.send(msg);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 客户端接收服务端消息的Messenger</span></span><br><span class="line">    <span class="keyword">private</span> Messenger mGetReplyMessenger = <span class="keyword">new</span> Messenger(<span class="keyword">new</span> MessengerHandler());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessengerHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> TConstants.MSG_FROM_SERVER:</span><br><span class="line">                    Log.i(TAG, <span class="string">"msg from server: "</span> + msg.getData().getString(TConstants.KEY_REPLY));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_messenger_client);</span><br><span class="line"></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MessengerServerService.class);</span><br><span class="line">        bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        unbindService(mConnection);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><span style="color:#ff4081">注意：</span> <code>Message</code> 的 <code>obj</code> 字段，在 Android 2.0 以前不支持跨进程传输，在 Android 2.0 以后也仅仅在系统提供的实现了 <code>Parcelable</code> 接口的对象上才能支持跨进程传输。</p><img alt="Messenger 原理" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Messenger-principle.jpg@!w540"><h3 id="ContentProvider"><a href="#ContentProvider" class="headerlink" title="ContentProvider"></a>ContentProvider</h3><p><code>ContentProvider</code> 底层也是由 <code>AIDL</code> 实现，其主要有6个抽象方法：<code>onCreate</code>, <code>getType</code>, <code>query</code>, <code>update</code>, <code>insert</code>, <code>delete</code>, 其中除了 <code>onCreate</code> 由系统调用运行在主线程之外，其他的都由外界回调运行在 <code>Binder</code> 线程池中。</p><p>注意，<code>ContentProvider</code> 底层依赖的数据存储没有要求，可以用 SQLite 数据库，也可以用普通文件，亦可以用 SharedPreferences，不过通常情况下底层存储都是依赖的数据库。</p><p>在客户端要观察 <code>ContentProvider</code> 中的数据变化情况，可以通过 <code>ContentResolver#registerContentObserver</code> 方法来注册观察者，<code>ContentResolver#unregisterContentObserver</code> 取消注册。</p><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><p><code>Socket</code> 也可以实现进程间通信，可以凭借 <code>TCP</code> 或者 <code>UDP</code> 的套接字来实现。与一般的 <code>Socket</code> 编程没有太大区别，主要是在 Android 编程中需要考虑在主线程上更新UI，在子线程发起 <code>Socket</code> 请求即可。</p><h3 id="各个-IPC-方式对比"><a href="#各个-IPC-方式对比" class="headerlink" title="各个 IPC 方式对比"></a>各个 IPC 方式对比</h3><table><thead><tr><th align="center">名称</th><th align="center">优点</th><th align="center">缺点</th><th align="center">适用场景</th></tr></thead><tbody><tr><td align="center">Bundle</td><td align="center">简单</td><td align="center">只能传输Bundle支持的数据</td><td align="center">四大组件间的进程间通信</td></tr><tr><td align="center">文件共享</td><td align="center">简单易用</td><td align="center">不适合并发场景，无法做到进程间即时通信</td><td align="center">无并发访问的情景，交换简单的数据，实时性要求不高的场景</td></tr><tr><td align="center">AIDL</td><td align="center">功能强大，支持一对多并发通信，支持即时通信</td><td align="center">使用稍复杂，需要处理线程同步</td><td align="center">一对多通信，有RPC需求</td></tr><tr><td align="center">Messenger</td><td align="center">功能一般，支持一对多串行通信，支持即时通信</td><td align="center">不适用于高并发场景，数据只能通过Message进行传输，只能传输Bundle支持的数据类型</td><td align="center">适用于低并发的一对多的即时通信，无RPC需求，或者不需要返回结果的PRC需求</td></tr><tr><td align="center">ContentProvider</td><td align="center">在数据源访问方面功能强大，支持一对多并发数据共享，可以通过Call扩展其他方法操作</td><td align="center">受约束的AIDL，主要提供数据源的CRUD操作</td><td align="center">一对多进程间的数据共享</td></tr><tr><td align="center">Socket</td><td align="center">功能强大，可以通过网络传输字节流，支持一对多并发即时通信</td><td align="center">实现起来稍微麻烦，不支持直接的RPC</td><td align="center">网络数据交换</td></tr></tbody></table><h2 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h2><p><a href="https://github.com/tianma8023/IPCLearn" target="_blank" rel="noopener">IPCLearn</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android notes </tag>
            
            <tag> IPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018一月新番推荐</title>
      <link href="/post/anime-recommendation-in-January-2018/"/>
      <url>/post/anime-recommendation-in-January-2018/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>狗年吉祥，狗年汪汪汪 (┬＿┬) </p><a id="more"></a><p>2018年1月新番季已经过了不少时间了，这里安利下我觉得ok的（没列出来的有可能是没看XD），可以讨论但不接受反驳（笑）：</p><ul><li><p>《Darling in the Franxx》<br>  <s>10.0 &nbsp;★★★★★★★★★★</s><br>  5.0 &nbsp; ★★★★★</p><blockquote><ul><li>你是我的 darling 吗？</li><li>02，驾驶望鹤兰的理由，我还有一个，我想成为你的翅膀。</li><li>我们没有天空，她没有翅膀。</li></ul></blockquote><p>  <s>在“大人”们的思维禁锢下，“爱”和“个性”被无视，青春的骚动被压制，“孩子”们像比翼鸟一样，即便是撞的头破血流也要飞向光明的天空寻找自己的 Darling …</s></p><blockquote><p>2018.07.06 更新： 看完23话，基本已经是烂尾了。前13话所构建的世界是反乌托邦的，故事跌宕起伏，很有心意。然而后面的引入外星人（wtf???），整部番从 “热血少年追求真理反抗反乌托邦的世界” 变成了 “星球大战环保番” 喵喵喵？？？ 前13话10分满分，后11话0分，所以综合5分 （手动微笑）</p></blockquote><blockquote><p>我现在除了看dift第24集，什么都想干。</p></blockquote><blockquote><p>锦织敦史：<s>只要我思维跳的够快，我观众的刀片就扔不到我。</s></p></blockquote>  <img alt="Zero Two" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Zero_Two_01.jpg@!w480">  <div class="aplayer" data-id="531051597" data-server="netease" data-type="song" data-theme="#FF4081" data-loop="none"><br></div></li><li><p>《摇曳露营△》<br>  9.5 &nbsp;&nbsp;&nbsp;★★★★★★★★★☆<br>  如果说，之前诸君的 Waifu 穿着单薄，稍微卖肉，能露胖次，会秀欧派，卖萌耍嗲。抚子和凛酱则会告诉你即便穿着严实我也是你喜爱的 Waifu<br>  <span style="color:#ff4081;">抚子和凛实在是太可爱了。</span></p>  <img alt="Yuru Camp" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Yuru_Camp_10.jpg@!w480"></li><li><p>《紫罗兰永恒花园》<br>  9.5 &nbsp;&nbsp;&nbsp;★★★★★★★★★☆</p><blockquote><ul><li>我想知道，爱是什么？</li><li>连缀人们的思念，为了知晓爱为何物。</li></ul></blockquote>  <img alt="薇尔莉特" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Violet_Evergarden_06.jpg@!w480">  <div class="aplayer" data-id="534065323" data-server="netease" data-type="song" data-theme="#FF4081" data-loop="none"><br></div></li><li><p>《擅长捉弄人的高木同学》<br>  9.0 &nbsp;&nbsp;&nbsp;★★★★★★★★★<br>  别名：<s>《擅长调情的西片太太》</s>、<s>《与空气斗智斗勇的西片同学》</s>、<s>《擅长虐狗的西片夫妇》</s><br>  回想起来，自己初高中时代也会捉弄心仪的女生呐~ (✿◡‿◡)</p>  <img alt="高木同学" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Tagaki_San_01.jpg@!w480">  <div class="aplayer" data-id="536624399" data-server="netease" data-type="song" data-theme="#FF4081" data-loop="none"><br></div></li><li><p>《比宇宙更远的地方》<br>  9.0 &nbsp;&nbsp;&nbsp;★★★★★★★★★<br>  只要有梦想，比宇宙更遥远的地方，也一定能抵达。这就是青春啊~ ヾ(o◕∀◕)ﾉヾ</p>  <img alt="玉木真理" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Tamaki_Mari_01.jpg@!w480"></li><li><p>《龙王的工作！》<br>  8.0 &nbsp;&nbsp;&nbsp;★★★★★★★★<br>  表面将棋，实则萝莉。八嘎师父，大萝卜鸡。</p>  <img alt="雏鹤爱" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Hinatsu_Ai_06.jpg@!w480"></li><li><p>《Slow Start》<br>  8.0 &nbsp;&nbsp;&nbsp;★★★★★★★★</p><ul><li>芳文社 &amp; A-1 Pictures</li><li>一月是你的百合</li><li>小玉挺可爱<br>&nbsp;<img alt="百地玉手" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Momochi_Tamate_01.png@!w480"></li></ul></li><li><p>《Citrus～柑橘味香气～》<br>  7.5 &nbsp;&nbsp;&nbsp;★★★★★★★☆<br>  橘里橘气 (｡･∀･)ﾉﾞ</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 漫谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 番剧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 笔记：Activity 二三事</title>
      <link href="/post/android-notes-Things-about-Acitivity/"/>
      <url>/post/android-notes-Things-about-Acitivity/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文主要记录一些与 <code>Activity</code> 相关的，并不是很容易弄清楚的点。</p><a id="more"></a><h2 id="Activity-生命周期"><a href="#Activity-生命周期" class="headerlink" title="Activity 生命周期"></a>Activity 生命周期</h2><p>先上 Google 官方的图： </p><img alt="Activity 生命周期" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/activity_lifecycle.png@!w540"><ul><li><code>onCreate()</code>：当前 Activity 实例第一次被创建时调用</li><li><code>onStart()</code>：Activity 不可见到可见 时调用</li><li><code>onResume()</code>： Activity 获取焦点，可以进行交互时调用</li><li><code>onPause()</code>：Activity 失去焦点，无法交互时调用</li><li><code>onStop()</code>：Activity 完全不可见时调用</li><li><code>onDestroy()</code>：Activity 即将销毁前调用</li><li><code>onRestart()</code>：Activity 正在被重新启动时调用</li></ul><p>这里又引申出 Activity 相关的三个生存期：</p><ul><li>完整生存期： <code>onCreate() -&gt; onDestroy()</code></li><li>可见生存期： <code>onStart() -&gt; onStop()</code></li><li>前台（可交互）生存期： <code>onResume() -&gt; onPause()</code><br>&nbsp;</li><li>Q：Activity A 启动 Activity B 时，A 的 <code>onPause()</code> 先执行还是 B 的 <code>onResume()</code> 先执行呢？<br>A：A 的 <code>onPause()</code> 先执行。<br>结论：考虑到只有在当前 Activity 的 <code>onPause()</code> 执行完毕之后，新的 Activity 的 <code>onResume()</code> 才执行，所以，<strong>在 <code>onPause()</code> 中尽量别做重量级操作</strong>。</li></ul><h3 id="异常情况下的生命周期"><a href="#异常情况下的生命周期" class="headerlink" title="异常情况下的生命周期"></a>异常情况下的生命周期</h3><img alt="Activity 异常情况重建过程" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Activity_recreate_diagram.jpg@!w540"><p>这里的 异常情况 主要指以下两种情况：</p><ol><li><p>系统相关的资源配置发生改变产生的异常：<br> 如果Activity不作特殊处理，当系统配置发生改变（比如屏幕方向发生改变），Activity就会被销毁并重建，<code>onSaveInstanceState()</code> 和 <code>onRestoreInstanceState()</code> 这两个方法就会在这一过程中被调用。</p></li><li><p>内存资源不足导致 Activity 被回收的异常：<br>Activity会有优先级分级情况，优先级依次降低：</p><ul><li>前台 Acitivty，即正在交互的 Activity</li><li>可见但非前台 Activity</li><li>不可见后台 Activity</li></ul><p>内存资源不足导致 Activity 被回收，在后续也会通过 <code>onSaveInstanceState()</code> 和 <code>onRestoreInstanceState()</code> 存储和恢复数据。<br>没有四大组件在运行的进程很容易被系统杀死，所以，一些后台工作不适合脱离四大组件独自后台运行，最佳实践是依赖 Service 以保证进程有较高的优先级。</p></li></ol><p><code>Activity</code> 在异常情况下进行重建时，系统会默认对 <code>View</code> 相关的状态进行存储和恢复，具体会恢复特定 <code>View</code> 的什么状态数据需要去查阅源码。也就是说，非 <code>View</code> 相关的数据，需要自行存储和恢复。</p><p>针对上面的第一种情况，<code>Activity</code> 的 <code>configChanges</code> 可以指定一些资源配置属性，当这些资源配置发生改变之后，<code>Activity</code> 不会重建，不会调用 <code>onSaveInstanceState()</code> 和 <code>onRestoreInstanceState()</code>，取而代之的是回调 <code>onConfigurationChanged()</code> 方法。最常用的 <code>configChanges</code> 选项有：</p><ul><li><code>locale</code>：设备的本地位置发生改变，一般指切换系统语言；</li><li><code>orientation</code>：屏幕方向发生改变，比如旋转手机屏幕；</li><li><code>keyboardHidden</code>：键盘的可访问性发生改变，比如用户调出键盘。</li></ul><h2 id="Activity-启动模式"><a href="#Activity-启动模式" class="headerlink" title="Activity 启动模式"></a>Activity 启动模式</h2><p><code>Activity</code> 的 <code>launchMode</code> 由四种：</p><ol><li><p><code>standard</code>：默认启动方式，每次启动这样的 <code>Activity</code> 都会生成创建新实例。<strong>谁启动以 <code>standard</code> 为 <code>launchMode</code> 的 <code>Activity</code>, 该 <code>Activity</code> 就会运行在它的那个任务栈中</strong>；</p></li><li><p><code>singleTop</code>：栈顶复用模式，要启动的 <code>Activity</code> 已经有实例在栈顶，则不会生成新实例，不会调用 <code>onCreate()</code> 和 <code>onStart()</code> 而会调用该 <code>Activity</code> 的 <code>onNewIntent()</code> 方法；其他情况，参考 <code>standard</code> 模式；</p></li><li><p><code>singleTask</code>：栈内复用模式。比如 <code>Activity</code> A 的 <code>TaskAffinity</code> 属性指定的任务栈为 a，当启动 A 时，如果任务栈 a 不存在，则创建 a 任务栈，并创建 <code>Activity</code> A 让其入栈；如果任务栈 a 存在，且 A 实例不存在，则 A 入栈；如果任务栈 a 存在，且 A 实例存在，则清空（pop）在 A 之上的所有 <code>Activity</code> 让 A 置于栈顶，并回调 A 的 <code>onNewIntent()</code> 方法；<br><br><code>TaskAffinity</code> 即 任务相关性，这个参数标识 <code>Activity</code> 所需要的任务栈的名字，默认情况下，这个值是应用包名。 <code>TaskAffinity</code> 主要和 <code>singleTask</code> 启动模式配对使用，<code>singleTask</code> 启动模式的 <code>Activity</code> 会启动在 <code>TaskAffinity</code> 指定的任务栈中。比如：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:name</span>=<span class="string">"com.example.ExampleActivity"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:taskAffinity</span>=<span class="string">"com.exmple.exampleTask"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span>/&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p><code>singleInstance</code>：单实例模式。可以看做是特殊的 <code>singleTask</code> 模式，除了具有 <code>singleTask</code> 特性外，此种模式的 <code>Activity</code> 只能单独在一个任务栈。</p></li></ol><h2 id="IntentFilter-匹配规则"><a href="#IntentFilter-匹配规则" class="headerlink" title="IntentFilter 匹配规则"></a>IntentFilter 匹配规则</h2><p><code>IntentFilter</code> 用在 <code>Activity</code> 的隐式调用上，先看 <code>IntentFilter</code> 示例：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.example.ExampleActivity"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SEND"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">"text/plain"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SEND"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SEND_MULTIPLE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.example.intent.category.CUSTOM_1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"com.example.intent.category.CUSTOM_2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:host</span>=<span class="string">"com.example.com"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:port</span>=<span class="string">"4000"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:path</span>=<span class="string">"folder"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:mimeType</span>=<span class="string">"text/plain"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"content"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:host</span>=<span class="string">"com.example.project"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android.port</span>=<span class="string">"1080"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:path</span>=<span class="string">"images"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:mimeType</span>=<span class="string">"image/*"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>可以看出一个 <code>Activity</code> 可以包含多个 <code>IntentFilter</code>，即形成一个 <code>IntentFilter</code> 列表，只要匹配任何一个 <code>IntentFilter</code> 就可以启动该 <code>Activity</code>。而 <code>IntentFilter</code> 中可以包含 <code>action</code>、 <code>category</code>、 <code>data</code> 三元素，只有这三个都匹配成功，整个 <code>IntentFilter</code> 才能匹配成功。</p><h3 id="action-匹配规则"><a href="#action-匹配规则" class="headerlink" title="action 匹配规则"></a>action 匹配规则</h3><p><code>Intent</code> 中的 <code>action</code> 必须和 <code>IntentFilter</code> 中包含的 <code>action</code> 之一匹配就可以匹配成功。如果，把 <code>Intent</code> 中指定的 <code>action</code> 看做元素 a，把 <code>IntentFilter</code> 中指定的 <code>action</code> 所构成的集合看成集合 A，则 当 a ∈ A 时， <code>action</code> 匹配成功。</p><h3 id="category-匹配规则"><a href="#category-匹配规则" class="headerlink" title="category 匹配规则"></a>category 匹配规则</h3><ol><li>如果 <code>Intent</code> 指定 <code>category</code>，就必须被包含在 <code>IntentFilter</code> 中所指定的 <code>category</code>。如果，<code>Intent</code> 中指定的 <code>category</code> 元素构成集合 A, <code>IntentFilter</code> 中指定的 <code>category</code> 元素构成集合 S，则当 A ⊆ S 时， <code>category</code> 匹配成功；</li><li>如果 <code>Intent</code> 不指定 <code>category</code>, 则默认的 <code>category</code> 为 <code>android.intent.category.DEFAULT</code>, 也会匹配成功。</li></ol><h3 id="data-匹配规则"><a href="#data-匹配规则" class="headerlink" title="data 匹配规则"></a>data 匹配规则</h3><p><code>data</code> 部分由 <code>mimeType</code> 和 <code>URI</code> 组成，<code>mimeType</code> 表示媒体类型，比如图片、音频、视频、文本等格式，<code>URI</code> 的结构为：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scheme</span>&gt;</span>://<span class="tag">&lt;<span class="name">host</span>&gt;</span>:<span class="tag">&lt;<span class="name">port</span>&gt;</span>[<span class="tag">&lt;<span class="name">path</span>&gt;</span>|<span class="tag">&lt;<span class="name">pathPrefix</span>&gt;</span>|<span class="tag">&lt;<span class="name">pathPattern</span>&gt;</span>]</span><br></pre></td></tr></table></figure></div><p>比如：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://com.example.com:8080/search/info</span><br><span class="line">content://com.example.project:200/folder/subfolder/etc</span><br></pre></td></tr></table></figure></div><ul><li><code>scheme</code>：<code>URI</code> 的模式，比如 http、file、content，也可以是自定义字符串，如果没有指定 <code>scheme</code> 的值，则整个 <code>URI</code> 无效；</li><li><code>host</code>：<code>URI</code> 的主机名，如果没有指定，则整个 <code>URI</code> 无效；</li><li><code>port</code>：端口号；</li><li><code>path</code>、 <code>pathPrefix</code>、 <code>pathPattern</code> 分别代表 完整路径匹配、前缀路径匹配、正则路径匹配。它们必须需要以 <code>/</code> 开头。</li></ul><p><code>data</code> 的匹配规则跟 <code>action</code> 类似，也就是如果，把 <code>Intent</code> 中指定的 <code>data</code> 看做元素 d，把 <code>IntentFilter</code> 中指定的 <code>data</code> 元素所构成的集合看成集合 D，则 当 d ∈ D 时， <code>data</code> 匹配成功。</p><p>如果 <code>data</code> 节点中只指定了 <code>mimeType</code>，那么系统默认的 <code>URI</code> 的 <code>scheme</code> 为 content 和 file。也就是说，在这种情况下，比如 <code>intent</code> 指定的 <code>scheme</code> 为 <code>http</code> 则会出现 <code>Activity</code> 找不到的异常。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android notes </tag>
            
            <tag> Activity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 折腾记</title>
      <link href="/post/hexo-notes/"/>
      <url>/post/hexo-notes/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本博客以 <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">Hexo 3.2.2</a> 为静态博客框架，以 <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">material 1.3.0</a> 为主题搭建而成。 参阅这两个的官方文档便可以初步搭建一个美美哒的博客了。</p><p>本文主要记录一下所折腾的东西。&nbsp; <a id="more"></a></p><h2 id="个性化配置-amp-优化"><a href="#个性化配置-amp-优化" class="headerlink" title="个性化配置&amp;优化"></a>个性化配置&amp;优化</h2><p><a href="https://hexo.io/plugins/index.html" target="_blank" rel="noopener">这里</a> 是官方收录的 Hexo 插件。</p><p>这里列一下博客用到的插件，大部分都可以看其对应官方文档就能正确配置。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>固定链接插件：<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a><br>之前的 <code>permalink</code> 格式是：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="YAML"><figure class="highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">post/:year/:month/:day/:title/</span></span><br><span class="line"><span class="comment"># 例如  http://tianma.space/2018/02/08/Hello-World</span></span><br></pre></td></tr></table></figure></div><p>使用 <code>hexo-abbrlink</code> 插件格式是:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="YAML"><figure class="highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line"><span class="attr">  alg:</span> <span class="string">crc32</span>  <span class="comment">#算法 support crc16(default) and crc32</span></span><br><span class="line"><span class="attr">  rep:</span> <span class="string">dec</span>    <span class="comment">#进制 support dec(default) and hex</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如： http://tianma.space/post/3678283086/</span></span><br></pre></td></tr></table></figure></div><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>当访问博客网站 <a href="https://tianma.space">Tianma</a></p><ul><li>国内IP走的 <code>coding</code>:  <a href="http://tianma8023.coding.me" target="_blank" rel="noopener">tianma8023.coding.me</a></li><li>国外IP走的 <code>GitHub</code>:  <a href="http://tianma8023.github.io" target="_blank" rel="noopener">tianma8023.github.io</a></li></ul><p>这样一定程度上能加快网站加载速度。</p><p>达到以上效果，大致来说，需要以下步骤：</p><ol><li>将博客部署到 <code>GitHub</code> 和 <code>Coding</code>, 具体参阅   <a href="http://tengj.top/2016/03/06/hexo4/" target="_blank" rel="noopener">hexo干货系列：（四）将hexo博客同时托管到github和coding</a> 和 <a href="http://chitanda.me/2015/06/11/tips-for-setup-hexo/#git%E5%A4%9A%E7%BD%91%E7%AB%99ssh%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88" target="_blank" rel="noopener">git多网站ssh部署方案</a></li><li>注册域名,国内有 <a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">万网</a>，国外有 <a href="https://www.godaddy.com/" target="_blank" rel="noopener">GoDaddy</a> , 然后进行域名绑定，即国内走 <code>Coding</code> 国外走 <code>GitHub</code> ，相关教程很多就不赘述了。</li></ol><h3 id="静态资源压缩优化"><a href="#静态资源压缩优化" class="headerlink" title="静态资源压缩优化"></a>静态资源压缩优化</h3><p>使用 <a href="https://github.com/gulpjs/gulp" target="_blank" rel="noopener">gulp</a> 压缩 Hexo 静态资源</p><blockquote><p>gulp 的官方定义非常简洁：基于文件流的构建系统。<br><br>  说人话系列：gulp 是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成。</p></blockquote><p>更多详细配置请参考 <a href="https://clearsky.me/hexo-gulp-compress.html" target="_blank" rel="noopener">使用 gulp 压缩 hexo 静态资源</a></p><h3 id="CDN服务"><a href="#CDN服务" class="headerlink" title="CDN服务"></a>CDN服务</h3><p><code>CDN</code> 存储服务商使用的是 <a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云</a>，配合 <a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">hexo-qiniu-sync</a> 食用。</p><p>使用 <code>CDN</code> 存储服务的主要目的就是把 图片、视频、音乐等其他较大的静态资源 上传到七牛云，加速博客网站静态资源加载。</p><p>详细请参考 <a href="https://yuchen-lea.github.io/2016-01-21-use-qiniu-store-file-for-hexo/" target="_blank" rel="noopener">使用七牛为Hexo存储图片等资源</a>。</p><p>更新：由于七牛云现行规定是，使用了内容存储服务的必须要绑定在中国大陆已备案的域名，而我目前的域名是在 <code>GoDaddy</code> 上注册的，没法备案，所以已将 <code>CDN</code> 从七牛云迁移至 <a href="https://cn.aliyun.com/product/oss" target="_blank" rel="noopener">阿里云OSS</a>。</p><h3 id="音乐播放"><a href="#音乐播放" class="headerlink" title="音乐播放"></a>音乐播放</h3><p>音乐播放器采用的是 <a href="https://github.com/DIYgod" target="_blank" rel="noopener">DIYGod</a> 的 <a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">APlayer</a>, 以 <a href="https://github.com/metowolf/MetingJS" target="_blank" rel="noopener">MetingJS</a> 为辅助配合食用。</p><p>详情参考: <a href="http://tianma.space/post/3998746934/">Hexo 折腾：音乐播放</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><ol><li><p>图片描述(description)：因为 <code>material</code> 主题本身没有对图片做过多处理，当使用:</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="MARKDOWN"><figure class="highlight /markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">description</span>](<span class="link">xxx.jpg</span>)</span><br></pre></td></tr></table></figure></div><p> 插入图片时，最后的 <code>description</code> 是没有显示的。这里采用 <a href="https://github.com/wayou/hexo-image-caption" target="_blank" rel="noopener">hexo-image-caption</a> 插件将上述 markdown 生成如下元素：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="HTML"><figure class="highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"xxx.jpg"</span> <span class="attr">alt</span>=<span class="string">"description"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"image-caption"</span>&gt;</span>description<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p> 从而展示 <code>description</code>，当然了，出于美观，需要对 <code>.image-caption</code> 元素指定相应的 css 样式。</p><p> 更多配置参考其文档。</p></li><li><p>图片放大查看： 由于 <code>material</code> 主题没有该功能，这里便采用 <code>FancyBox</code> 库实现该功能，详情参考 <a href="http://tianma.space/post/2208308547/">Hexo 折腾：利用 Fancybox 添加图片放大预览查看功能</a></p></li></ol><h3 id="看板娘"><a href="#看板娘" class="headerlink" title="看板娘"></a>看板娘</h3><p>看板娘采用的以 <a href="http://www.live2d.com/en/" target="_blank" rel="noopener">live2d</a> 技术为核心，以 <a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">hexo-helper-live2d</a> 为插件，配合 <code>live2d</code> 模型制作而成。</p><p>详情参考： </p><ul><li><a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">hexo-helper-live2d</a></li><li>本博客给看板娘加入了 <code>鼠标滑动悬停</code> 和 <code>点击</code> 事件监听，以做出更多响应。 具体参考 <a href="https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02" target="_blank" rel="noopener">给博客添加能动的看板娘(Live2D)-将其添加到网页上吧</a></li></ul><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>由于 <code>material</code> 主题本身没有分页功能，而 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a> 提供了分页功能，在 <code>next</code> 主题启发下，其实 <code>hexo</code> 本身就提供了 <a href="https://hexo.io/zh-cn/docs/helpers.html#paginator" target="_blank" rel="noopener">paginator</a> 这一 <code>Helpers</code>(辅助函数)&nbsp;实现分页。<br>具体步骤为：</p><ol><li><p>在 <code>material/layout/index.ejs</code> 中的 <code>index nav</code> 模块中插入：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVASCRIPT"><figure class="highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (page.total &gt; <span class="number">1</span>) &#123; %&gt;</span><br><span class="line">  &lt;!-- Index nav --&gt;</span><br><span class="line">  &lt;nav <span class="class"><span class="keyword">class</span></span>=<span class="string">"material-nav mdl-cell mdl-cell--12-col"</span>&gt;</span><br><span class="line">    &lt;%- paginator(&#123;</span><br><span class="line">      prev_text: __(<span class="string">'&lt;button class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon"&gt;&lt;i class="material-icons" role="presentation"&gt;arrow_back&lt;/i&gt;&lt;/button&gt;'</span>),</span><br><span class="line">      next_text: __(<span class="string">'&lt;button class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon"&gt;&lt;i class="material-icons" role="presentation"&gt;arrow_forward&lt;/i&gt;&lt;/button&gt;'</span>),</span><br><span class="line">      space: <span class="string">'&amp;hellip;'</span>,</span><br><span class="line">      mid_size: <span class="number">1</span></span><br><span class="line">    &#125;) %&gt;</span><br><span class="line">  &lt;<span class="regexp">/nav&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure></div><p>在生成 html 文件的时候，会自动生成相应的页码，其中，当前页面是 <code>.page-number.current</code> 元素， 非当前页面是 <code>.page-number</code> 元素，还会根据 <code>paginator</code> 的 <code>space</code> 配置生成 <code>.space</code> 元素。</p></li><li><p>在 <code>material/source/css/style.min.css</code> 中加入相应的 css 样式，考虑到目前 <code>material</code> 主题的 <code>scheme</code> 是 <code>Paradox</code>, 所以只贴出了 <code>Paradox</code> 相关的 css 样式：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="CSS"><figure class="highlight /css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#scheme-Paradox</span> <span class="selector-class">.page-number</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0em</span> <span class="number">0.8em</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.3em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0em</span> <span class="number">0.2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">480px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#scheme-Paradox</span> <span class="selector-class">.page-number</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0em</span> <span class="number">0.4em</span>;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0em</span> <span class="number">0.2em</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#scheme-Paradox</span> <span class="selector-class">.space</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#scheme-Paradox</span> <span class="selector-class">.material-nav</span> <span class="selector-class">.page-number</span><span class="selector-class">.current</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FF4081</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h3 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h3><p>现在已经是大版权时代，对文章进行版权声明也是有必要的。文章类的版权声明主要通过 <code>知识共享许可协议</code>来进行，故声明之前有必要了解 <a href="https://zh.wikipedia.org/wiki/%E5%89%B5%E4%BD%9C%E5%85%B1%E7%94%A8%E6%8E%88%E6%AC%8A%E6%A2%9D%E6%AC%BE" target="_blank" rel="noopener">知识共享许可协议(Wiki)</a> 和 <a href="https://creativecommons.org/licenses/" target="_blank" rel="noopener">关于许可协议</a>。<br>考虑到有些网站会爬取他人博客，其实主要是针对 <code>body</code> 体内的内容，所以需要把版权声明部分写入 <code>body</code> 体中：</p><ol><li><p>自定义字段：考虑到有些博文可能是不需要版权声明的，比如转载、翻译之类的，所以自定义 <code>post_license</code> 作为开关：</p><ul><li><p>主题配置文件 <code>_config.yml</code> 中添加字段，作为总开关：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="YAML"><figure class="highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_license:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span> <span class="comment"># or false</span></span><br></pre></td></tr></table></figure></div></li><li><p>文章的 <code>Front-matter</code> 中添加字段，作为独立开关：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="YAML"><figure class="highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_license:</span> <span class="literal">true</span> <span class="comment"># or false</span></span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>创建 <code>material/layout/_partial/post_license.ejs</code>:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVASCRIPT"><figure class="highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;ul id=<span class="string">"post-license"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-license"</span>&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">"post-license-author"</span>&gt;</span><br><span class="line">            &lt;strong&gt;本文作者：&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">            &lt;a href="&lt;%= config.url %&gt;"&gt;&lt;%= theme.author %&gt;&lt;/</span>a&gt;</span><br><span class="line">        &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;li class="post-license-link"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;strong&gt;本文链接：&lt;/</span>strong&gt;</span><br><span class="line">            &lt;a href=<span class="string">"&lt;%= page.permalink %&gt;"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">page.title</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;li class="post-license-statement"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;strong&gt;版权声明： &lt;/</span>strong&gt;</span><br><span class="line">            本文由 &lt;%= config.author %&gt; 原创，采用 &lt;a href=<span class="string">"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh"</span> rel=<span class="string">"license"</span> target=<span class="string">"_blank"</span>&gt;署名-非商业性使用-相同方式共享（CC BY-NC-SA）<span class="number">4.0</span> 国际许可协议&lt;<span class="regexp">/a&gt; &lt;/</span>br&gt;转载请保留以上声明信息！</span><br><span class="line">        &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>在 <code>material/layout/_partial/post-content.ejs</code> 引入 <code>post_license.ejs</code>:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVASCRIPT"><figure class="highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span>(theme.post_license.enable &amp;&amp; page.post_license !== <span class="literal">false</span>)&#123;%&gt;</span><br><span class="line">    &lt;%- partial(<span class="string">'_partial/post_license'</span>) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></div></li><li><p>在 <code>material/source/css/style.min.css</code> 中添加 版权声明 样式：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="CSS"><figure class="highlight /css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#post-license</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">3px</span> solid <span class="number">#ff4081</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f9f9</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="工具推荐"><a href="#工具推荐" class="headerlink" title="工具推荐"></a>工具推荐</h2><ul><li>图片压缩：<a href="https://tinypng.com/" target="_blank" rel="noopener">tinypng</a> - 在压缩图片的同时尽可能保证图片质量</li><li>矢量图, 图标等：<a href="http://iconfont.cn/" target="_blank" rel="noopener">iconfont</a>,  <a href="https://www.iconfinder.com/" target="_blank" rel="noopener">IconFinder</a>, <a href="https://material.io/icons/" target="_blank" rel="noopener">material icons</a></li><li>图床工具：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo-theme-material </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 文字绘制中的 FontMetrics 和 drawText()</title>
      <link href="/post/FontMetrics_&amp;_drawText()/"/>
      <url>/post/FontMetrics_&amp;_drawText()/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在绘制文字的时候，不可避免的用到 <code>FontMetrics</code> 类和 <code>Canvas#drawText()</code> 方法，这里详细介绍下。 <a id="more"></a></p><h2 id="FontMetrics"><a href="#FontMetrics" class="headerlink" title="FontMetrics"></a>FontMetrics</h2><p>先看下面这张图：</p><img alt="FontMetrics Lines" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/android_fontmetrics_lines.jpeg@!w640"><p>图中有五条线，自上而下分别是：</p><ul><li>top line: 文字可绘制区域最顶部的线；</li><li>ascent line: 系统推荐的，文字可绘制区域顶部的线；</li><li>baseline: 文字绘制的基线（在四线格上书写英文字母时的第三条线）；</li><li>descent line: 系统推荐的，文字可绘制区域底部的线；</li><li>bottom line: 文字可绘制区域最底部的线。</li></ul><p>而 <code>FontMetrics</code> 类中有 <code>[top, ascent, descent, bottom, leading]</code> 字段，与上面 5 条线的关系是： <strong>FontMetrics对象中的字段值 = 对应线条的 Y 坐标值 - baseline的 Y 坐标值</strong> ，如果用 <code>Y(line A)</code> 表示线条 A 的 Y 坐标的话，那么以下等式成立：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FontMetrics::top = Y(top line) - Y(baseline);</span><br><span class="line">FontMetrics::ascent = Y(ascent line) - Y(baseline);</span><br><span class="line">FontMetrics::descent = Y(descent line) - Y(baseline);</span><br><span class="line">FontMetrics::bottom = Y(bottom line) - Y(baseline);</span><br></pre></td></tr></table></figure></div><p><font color="#ff4081">需要注意的是：</font> 通常情况下，Android 中的 y 轴的正方向是沿屏幕向下的，也就是越往下 y 坐标越大，所以 <code>FontMetrics</code> 的 <code>top</code> 和 <code>ascent</code> 值是负值， <code>descent</code> 和 <code>bottom</code> 的值是正值。</p><p>余下的字段 <code>leading</code> 表示 系统推荐的行间距。</p><p>在实际开发中，通常使用 <code>Paint</code> 的 <code>getFontMetrics()</code> 获得其对应的 <code>FontMetrics</code> 对象。</p><h2 id="drawText"><a href="#drawText" class="headerlink" title="drawText()"></a>drawText()</h2><p>绘制文字的时候，需要使用 <code>Canvas</code> 的 <code>drawText(String text, float x, float y, Paint paint)</code> 方法，其中的 <code>text</code> 表示 所需绘制的文字， <code>paint</code> 表示 画笔，这很好理解，那么 <code>x</code> 和 <code>y</code> 又是什么呢？</p><p>这里把 <code>x</code> 和 <code>y</code> 组成的点 <code>(x, y)</code> 称作 基点，用于控制文字绘制的基准位置，而 <code>Paint</code> 中的 <code>Align</code> 对象指定文字对齐方式。 基点 和 Align 共同作用从而成功绘制文字。特别地是：<font color="#ff4081">基点的 Y 坐标（也就是 y 值）其实就是前面提到的 baseline 的 Y 坐标</font>。</p><p>比如：上面图中 <code>baseline</code> 上的黄点就是基点，可以观察得出其对齐方式 <code>Align</code> 就是 <code>CENTER</code>。</p><h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><p>示例截图：</p><img alt="FontMetrics Sample" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/FontMetrics_Sample_ss.jpeg@!w640"><p>GitHub: <a href="https://github.com/tianma8023/FontMetricsSample" target="_blank" rel="noopener">FontMetricsSample</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/27631736/meaning-of-top-ascent-baseline-descent-bottom-and-leading-in-androids-font" target="_blank" rel="noopener">Meaning of top, ascent, baseline, descent, bottom, and leading in Android’s FontMetrics</a></li><li><a href="http://blog.csdn.net/harvic880925/article/details/50423762" target="_blank" rel="noopener">自定义控件之绘图篇（ 五）：drawText()详解</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FontMetrics </tag>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 折腾：音乐播放</title>
      <link href="/post/hexo-embed-aplayer/"/>
      <url>/post/hexo-embed-aplayer/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近想要在博客中插入音乐（网易云音乐），目前找到了三种解决方案：</p><ol><li>使用音乐平台自己的插件</li><li>结合 <a href="https://github.com/metowolf/MetingJS" target="_blank" rel="noopener">MetingJS</a> 使用 <a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">APlayer</a></li><li>使用 <a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a></li></ol><a id="more"></a><h3 id="使用音乐平台官方插件"><a href="#使用音乐平台官方插件" class="headerlink" title="使用音乐平台官方插件"></a>使用音乐平台官方插件</h3><p>以网易云音乐为例，在Web网页上找到 歌单/单曲/专辑 页面，点击 <code>生成外链播放器</code> 即可跳转到官方提供的音乐播放插件使用引导页面，比如这个 <a href="http://music.163.com/#/outchain/0/827122421/" target="_blank" rel="noopener">外链插件</a>。<br>可以在自己博客页面中嵌入插件:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="HTML"><figure class="highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">330</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=0&amp;id=827122421&amp;auto=0&amp;height=430"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>效果展示：</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="330" src="//music.163.com/outchain/player?type=0&id=827122421&auto=0&height=430"></iframe><p>缺点：</p><ul><li>网易音乐有些音乐因为版权保护，没办法生成外链</li><li>音乐平台众多，不同的平台可能插件规范不一样，插入不同平台来源的歌曲可能比较麻烦。</li></ul><h3 id="使用-APlayer-MetingJS"><a href="#使用-APlayer-MetingJS" class="headerlink" title="使用 APlayer + MetingJS"></a>使用 APlayer + MetingJS</h3><p><a href="https://github.com/MoePlayer/APlayer" target="_blank" rel="noopener">APlayer</a> 是目前广泛使用的 HTML5 音乐播放器，<a href="https://github.com/metowolf/MetingJS" target="_blank" rel="noopener">MetingJS</a> 用于解析歌曲链接。</p><p>以我目前的 <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">hexo-theme-material</a> 主题为例：</p><ol><li><p>引入JS（最新的CDN请参考官网），创建 <code>/layout/_widget/aplayer.ejs</code> ：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="HTML"><figure class="highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Import APlayer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer@1.9.0/dist/APlayer.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/aplayer@1.9.0/dist/APlayer.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Import meting.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/meting@1.1.1/dist/Meting.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>考虑到不是所有的博客页面都需要嵌入 <code>aplayer</code>, 所以在 <code>/_partial/head.ejs</code> 中加入：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JS"><figure class="highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Import APlayer.js --&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (page.aplayer === <span class="literal">true</span>) &#123; %&gt;</span><br><span class="line">    &lt;%- partial(<span class="string">'_widget/aplayer'</span>) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></div></li><li><p>使用，需要内嵌 <code>APlayer</code> 的页面中：<br> 在<code>Front-matter</code> 中加入：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="YAML"><figure class="highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><p> 嵌入 <code>APlayer</code>：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="HTML"><figure class="highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aplayer"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-id</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-server</span>=<span class="string">"server"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-type</span>=<span class="string">"type"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ol><p>参数：</p><table><thead><tr><th align="center">参数</th><th align="center">是否必须</th><th align="center">默认值</th><th align="center">描述&amp;可选值</th></tr></thead><tbody><tr><td align="center">data-id</td><td align="center">是</td><td align="center"></td><td align="center">单曲ID / 歌单ID / 专辑ID / 搜索关键词</td></tr><tr><td align="center">data-server</td><td align="center">是</td><td align="center"></td><td align="center">音乐平台：<code>netease</code>,<code>tencent</code>,<code>kugou</code>,<code>xiami</code>,<code>baidu</code></td></tr><tr><td align="center">data-type</td><td align="center">是</td><td align="center"></td><td align="center">音乐类型：<code>song</code>,<code>playlist</code>,<code>album</code>,<code>search</code>,<code>artist</code></td></tr><tr><td align="center"><s>data-mode</s></td><td align="center"><strong>已弃用</strong></td><td align="center"><code>circulation</code></td><td align="center"><s>播放模式：<code>circulation</code>,<code>random</code>,<code>single</code>,<code>order</code></s><br> 使用 <code>data-loop</code> <code>data-order</code> 字段代替</td></tr><tr><td align="center">data-autoplay</td><td align="center">否</td><td align="center"><code>false</code></td><td align="center">是否自动播放，移动端浏览器不支持该选项</td></tr><tr><td align="center">data-mutex</td><td align="center">否</td><td align="center"><code>true</code></td><td align="center">播放时是否暂停其他<code>APlayer</code>对象</td></tr><tr><td align="center">data-listmaxheight</td><td align="center">否</td><td align="center"><code>340px</code></td><td align="center">播放列表最高高度</td></tr><tr><td align="center">data-preload</td><td align="center">否</td><td align="center"><code>auto</code></td><td align="center">音乐预加载模式：<code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td align="center">data-theme</td><td align="center">否</td><td align="center"><code>#2980b9</code></td><td align="center">主题色</td></tr><tr><td align="center">data-mini</td><td align="center">否</td><td align="center"><code>false</code></td><td align="center">是否开启迷你模式</td></tr><tr><td align="center">data-loop</td><td align="center">否</td><td align="center"><code>all</code></td><td align="center">循环方式：<code>all</code>, <code>one</code>, <code>none</code></td></tr><tr><td align="center">data-order</td><td align="center">否</td><td align="center"><code>list</code></td><td align="center">播放顺序：<code>list</code>, <code>random</code></td></tr><tr><td align="center">data-lrc</td><td align="center">否</td><td align="center"><code>false</code></td><td align="center"></td></tr><tr><td align="center">data-list-folded</td><td align="center">否</td><td align="center"><code>false</code></td><td align="center">歌单列表初始时是否折叠</td></tr><tr><td align="center">data-volume</td><td align="center">否</td><td align="center"><code>0.7</code></td><td align="center">用户未自定义前的默认初始化音量</td></tr></tbody></table><p>更多参数参考:<br><a href="https://github.com/metowolf/MetingJS#option" target="_blank" rel="noopener">MetingJS Options</a> &nbsp;&nbsp;<a href="https://aplayer.js.org/docs/#/?id=options" target="_blank" rel="noopener">APlayer Options</a></p><p>效果展示：</p><ol><li><p>单曲:</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="HTML"><figure class="highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"aplayer"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-id</span>=<span class="string">"33911781"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-server</span>=<span class="string">"netease"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-type</span>=<span class="string">"song"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-mutex</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-loop</span>=<span class="string">"none"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div> <div class="aplayer" data-id="33911781" data-server="netease" data-type="song" data-mutex="false" data-loop="none"> </div></li><li><p>歌单：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="HTML"><figure class="highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"aplayer"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-id</span>=<span class="string">"775701065"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-server</span>=<span class="string">"netease"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-type</span>=<span class="string">"playlist"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-order</span>=<span class="string">"random"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">data-listmaxheight</span>=<span class="string">"240px"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-theme</span>=<span class="string">"#FF4081"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div> <div class="aplayer" data-id="775701065" data-server="netease" data-type="playlist" data-order="random" data-listmaxheight="240px" data-theme="#FF4081"> </div></li></ol><h3 id="使用-hexo-tag-aplayer-插件"><a href="#使用-hexo-tag-aplayer-插件" class="headerlink" title="使用 hexo-tag-aplayer 插件"></a>使用 hexo-tag-aplayer 插件</h3><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a> 就是将 <a href="https://github.com/DIYgod/APlayer" target="_blank" rel="noopener">APlayer</a> 内嵌入博客页面的 Hexo 插件。</p><ol><li><p>安装</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure></div></li><li><p>使用</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure></div><p> 还支持其他参数，同时支持歌词、歌曲列表等功能，详情参考该项目主页。</p></li></ol><p><s>缺点：</s></p><ul><li><s>目前不支持在线播放（其他音乐网站歌曲），具体参考这个 <a href="https://github.com/MoePlayer/hexo-tag-aplayer/issues/29" target="_blank" rel="noopener">issue 29</a></s></li></ul><p><span style="color:#ff4081">2018.03.31更新：</span><br>目前 <code>3.0</code> 版本的 <code>hexo-tag-aplayer</code> 已经支持了 <code>MetingJS</code>，因此可以解析网络平台的歌曲/歌单了。</p><ol><li><p>在<strong>站点配置文件</strong>中开启 <code>meting</code> 模式：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="YAML"><figure class="highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line"><span class="attr">  meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div></li><li><p>使用 <code>meting</code> 标签插入在线音乐，例如：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;27684881&quot; &quot;netease&quot; &quot;song&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure></div><p> 效果如下：</p>     <div id="aplayer-AlEPWcHg" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="27684881" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#FF4081"></div><p> <span style="color:#ff4081">需要注意：</span></p><ul><li>到目前为止，<code>meting</code> 标签参数中必须包含 <code>id</code>, <code>server</code>, <code>type</code> 且有序，剩余的参数除了 <code>autoplay</code> 之外其他的都需要按照 <code>参数名:xxx</code> 的格式。<br>更多细节具体请参考这个 <a href="https://github.com/MoePlayer/hexo-tag-aplayer/issues/37" target="_blank" rel="noopener">issue</a> 已经该插件的官方文档。</li><li>同一个html中不能同时出现 <code>melting</code> 和 <code>aplayer</code> 标签。如果同时使用，<code>aplayer</code> 标签就会失效。参见 <a href="https://github.com/MoePlayer/hexo-tag-aplayer/issues/52" target="_blank" rel="noopener">issue 52</a></li></ul></li></ol><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>考虑到我最初的需求是 能播放在线歌单 ，再考虑到便利性，所以最终选择了 <code>hexo-tag-aplayer</code> 方案。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> APlayer </tag>
            
            <tag> hexo-tag-aplayer </tag>
            
            <tag> music player </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JitPack - 发布Android库</title>
      <link href="/post/publish-an-Android-lib-on-JitPack-md/"/>
      <url>/post/publish-an-Android-lib-on-JitPack-md/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><a href="https://jitpack.io/" target="_blank" rel="noopener">JitPack.io</a> 是一个 JVM/Android 工程的包管理仓库。<a id="more"></a>开发者可以在上面发布自己的库，一旦成功发布，就可以方便的在 <code>Gradle</code> 中引用。 当然了，<code>Andriod</code> 相关的包管理仓库除了 <code>JitPack</code> 之外，还有 <code>jCenter</code> 等，但 <code>JitPack</code> 应该发布起来是最简单的了。</p><h2 id="发布-Android-Library"><a href="#发布-Android-Library" class="headerlink" title="发布 Android Library"></a>发布 Android Library</h2><h4 id="1-Gradle"><a href="#1-Gradle" class="headerlink" title="1. Gradle"></a>1. Gradle</h4><p>为了让 <code>JitPack</code> 能正确的构建 Android 工程，需要添加 <a href="https://github.com/dcendents/android-maven-gradle-plugin" target="_blank" rel="noopener">android-maven-gradle-plugin</a> 插件：</p><ul><li><p>如果使用的 <code>Gradle</code> 版本 &gt;= <em>4.1</em> （即使用的 <code>com.android.build.gradle</code> 版本 &gt;= <em>3.0.0</em>）:</p><ol><li><p>在<strong>项目根目录</strong>的 <code>build.gradle</code> 中如下配置：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="GROOVY"><figure class="highlight /groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">'com.github.dcendents:android-maven-gradle-plugin:2.0'</span> <span class="comment">// 添加这行配置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>在<strong>库工程</strong>的 <code>build.gradle</code> 中如下配置：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="GROOVY"><figure class="highlight /groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.github.dcendents.android-maven'</span></span><br><span class="line">group = <span class="string">'com.github.YourUsername'</span></span><br></pre></td></tr></table></figure></div></li></ol></li><li><p>如果使用的其他版本的 Gradle 配置会有所变化，因为 <code>android-maven-gradle-plugin</code> 和 <code>Gradle</code> 版本有个对应关系。具体配置和上面的相似，只不过对应版本，详情可以戳这里 <a href="https://github.com/dcendents/android-maven-gradle-plugin#note-on-releases" target="_blank" rel="noopener">android maven gradle plugin - Note on Releases</a></p></li></ul><h4 id="2-GitHub"><a href="#2-GitHub" class="headerlink" title="2. GitHub"></a>2. GitHub</h4><p>在Github对应项目上发布release包或者添加一个tag，网上教程很多，略过。</p><h4 id="3-JitPack"><a href="#3-JitPack" class="headerlink" title="3. JitPack"></a>3. JitPack</h4><p>参照下图，将项目提交到 <a href="http://jitpack.io/" target="_blank" rel="noopener">JitPack</a> ，让其构建对应的工程：</p><img alt="提交到JitPack" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/JitPack_Publish_Steps.png"><p>点击 <code>Get it</code> 按钮，<code>JitPack</code> 会给出指定库的引用配置信息：</p><img alt="JitPack库的配置信息" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/JitPack_Import_Guide.png"><h2 id="使用-Android-Library"><a href="#使用-Android-Library" class="headerlink" title="使用 Android Library"></a>使用 Android Library</h2><h4 id="Dependency-格式构成"><a href="#Dependency-格式构成" class="headerlink" title="Dependency 格式构成"></a>Dependency 格式构成</h4><p>发布到 <code>JitPack</code> 的库的 dependency 的格式如下：</p><ul><li><code>Group</code>(组) ： com.github.Username </li><li><code>Artifact</code>(产品) ： Repository Name (Github Repo 名)</li><li><code>Version</code>(版本) ：<code>Release 的 tag</code> 或者 <code>commit hash 值</code> 或者 <code>-SNAPSHOT</code></li></ul><h4 id="JitPack-中的-Snapshot"><a href="#JitPack-中的-Snapshot" class="headerlink" title="JitPack 中的 Snapshot"></a>JitPack 中的 Snapshot</h4><p><code>snapshot(快照)</code> 版本在开发中很有用。<code>snapshot</code> 可以表示那些没有正式发布的版本。 <em>指定的版本</em> 和 <em>snapshot版本</em> 区别在于后者可能可以不断的更新版本，即可能指向最新的版本。所以<em>snapshot版本</em>在项目开发过程中很实用。 <code>snapshot</code> 版本格式如下：</p><ul><li><code>branch-SNAPSHOT</code> （分支名-SNAPSHOT）</li></ul><p>例如：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;com.github.Username:RepoName:master-SNAPSHOT&apos;   </span><br><span class="line">// eg &apos;com.github.tianma8023:SimpleLineChart:master-SNAPSHOT&apos;</span><br></pre></td></tr></table></figure></div><p>通过添加 <code>-SNAPSHOT</code> 字段可以每次构建 master 分支上最新的 commit。<br><font color="#FF4081">注意</font>： 考虑到 <code>Gradle</code> 会缓存 <code>SNAPSHOT</code> 的版本，所以当使用 <code>snapshot</code> 的形式，并且有新的版本更新时，需要在 <code>Android Studio</code> 中通过 <code>File -&gt; Synchronize</code> 进行更新和同步。</p><h4 id="Gradle-中导入-Library"><a href="#Gradle-中导入-Library" class="headerlink" title="Gradle 中导入 Library"></a>Gradle 中导入 Library</h4><ol><li><p>使用你的库，需要把 <code>jitpack.io</code> 添加入仓库列表中去，在 <strong>项目根目录</strong> 的 <code>build.gradle</code> 中添加：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="GROOVY"><figure class="highlight /groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url <span class="string">'https://jitpack.io'</span> &#125; <span class="comment">// 添加这行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p> <font color="#FF4081">注意</font>：不要把 <code>jitpack.io</code> 添加到 <code>buildscript</code> 闭包中去。</p></li><li><p>在<strong>模块</strong>的 <code>build.gradle</code> 中添加库的依赖：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="GROOVY"><figure class="highlight /groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">// 方式1. SNAPSHOT</span></span><br><span class="line">    compile <span class="string">'com.github.Username:RepoName:branch-SNAPSHOT'</span></span><br><span class="line">    <span class="comment">// eg. complie 'com.github.tianma8023:SimpleLineChart:master-SNAPSHOT'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方式2. Release Tag</span></span><br><span class="line">    <span class="comment">// compile 'com.github.Username:RepoName:ReleaseTag'</span></span><br><span class="line">    <span class="comment">// eg. compile 'com.github.tianma8023:SimpleLineChart:0.0.2'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 方式3. Commit Hash</span></span><br><span class="line">    <span class="comment">// compile 'com.github.Username:RepoName:CommitHash' </span></span><br><span class="line">    <span class="comment">// eg. compile 'com.github.tianma8023:SimpleLineChart:015b8d6aff'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><ol><li><p>在导入 <code>JitPack</code> 的库工程的时候，会出现资源不能被获取的报错信息，但是 <code>JitPack</code> 上面的 Build 是成功的。这个时候，其实是是本地网络问题，因为 <code>jitpack.io</code> 走的是 https。 所以，可以添加网络代理，因为本身我用的 <code>SS</code> 科学上网的，所以在项目的 <code>gradle.properties</code> 文件中添加代理：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># http</span><br><span class="line">systemProp.http.proxyHost=127.0.0.1</span><br><span class="line">systemProp.http.proxyPort=1080</span><br><span class="line"># https</span><br><span class="line">systemProp.https.proxyHost=127.0.0.1</span><br><span class="line">systemProp.https.proxyPort=1080</span><br></pre></td></tr></table></figure></div></li><li><p>按照之前的 Punlish 流程，引用 <code>JitPack</code> 库之后，并<font color="#FF4081">不能很好的阅读源码和查看注释</font>，这是发布前的配置问题。参考 <code>Maven</code> 的配置，在 build 过程中执行文档化操作即可。在 <strong>library</strong> 模块下新建 <code>javadoc-sources-build.gradle</code> 文件：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="GROOVY"><figure class="highlight /groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Specify encoding - 指定编码方式</span></span><br><span class="line">tasks.withType(JavaCompile) &#123;</span><br><span class="line">    options.encoding = <span class="string">'UTF-8'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Package source code - 打包源码</span></span><br><span class="line">task sourcesJar(<span class="string">type:</span> Jar) &#123;</span><br><span class="line">    from android.sourceSets.main.java.srcDirs</span><br><span class="line">    classifier = <span class="string">'sources'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task javadoc(<span class="string">type:</span> Javadoc) &#123;</span><br><span class="line">    failOnError <span class="literal">false</span></span><br><span class="line">    source = android.sourceSets.main.java.sourceFiles</span><br><span class="line">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class="line">    classpath += configurations.compile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// generate javadoc - 生成Javadoc</span></span><br><span class="line">task javadocJar(<span class="string">type:</span> Jar, <span class="string">dependsOn:</span> javadoc) &#123;</span><br><span class="line">    classifier = <span class="string">'javadoc'</span></span><br><span class="line">    from javadoc.destinationDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">artifacts &#123;</span><br><span class="line">    archives sourcesJar</span><br><span class="line">    archives javadocJar</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p> 然后在 <strong>library</strong> 模块下的 <code>build.gradle</code> 引入之前的配置：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="GROOVY"><figure class="highlight /groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">from:</span> <span class="string">'javadoc-sources-build.gradle'</span></span><br></pre></td></tr></table></figure></div><p> 之后按照正常发布流程即可。</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/jitpack/jitpack.io" target="_blank" rel="noopener">GitHub - JitPack.io</a></li><li><a href="https://github.com/jitpack/jitpack.io/blob/master/ANDROID.md" target="_blank" rel="noopener">JitPack - Publish an Android library</a></li><li><a href="https://github.com/dcendents/android-maven-gradle-plugin" target="_blank" rel="noopener">android-maven-gradle-plugin</a></li><li><a href="https://github.com/GcsSloop/AndroidNote/blob/master/Course/jitpack-javadoc.md" target="_blank" rel="noopener">用JitPack发布时附加文档和源码</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JitPack </tag>
            
            <tag> Package Repository </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Goodbye 2017 Welcome 2018</title>
      <link href="/post/bye-2017-and-hello-2018/"/>
      <url>/post/bye-2017-and-hello-2018/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>白驹过隙，2017已离我而去，2018也匆匆而至。 <a id="more"></a></p><p>2017败犬般浑浑噩噩地过日子，浑然不觉一年过去了。</p><p>2017的主题应该就是 <strong>逃避</strong> 了吧，自己是真的蠢。</p><p>自闭，逃避，废柴，死宅，咸鱼，鶸 给2017的自己。</p><p>2018本命插旗：</p><ul><li><input disabled type="checkbox"> 要敢于面对惨淡的人生</li><li><input disabled type="checkbox"> 别再囿于往事，固步自封</li><li><input disabled type="checkbox"> 规律作息，好好学习，好好工作</li><li><input checked disabled type="checkbox"> 摆脱 SAO MD</li><li><input disabled type="checkbox"> 向前看</li></ul><blockquote><p>2018-02-03：在帮助前团员打完最后一场公会战之后完全弃坑。再见 SAO MD，再也不见 :)</p></blockquote><p>希望2018年的总结，能像模像样，以上。</p>]]></content>
      
      
      <categories>
          
          <category> 漫谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Annual Review </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度云资源加速下载</title>
      <link href="/post/baidu-net-disk-tricks/"/>
      <url>/post/baidu-net-disk-tricks/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>基于某些特殊的原因，非会员的情况下，百度云网盘客户端在下载资源时会进行限速。<a id="more"></a>据可能不准确猜测，此行为的目的是推广其vip业务。因而产生了不少的应对策略来突破其下载限制。比较简单粗暴的就是破解版的PC客户端，然而破解版一是涉及到版权问题，而是可能破解版客户端会夹带私货不够安全，就不多bb了。</p><p>在这里介绍一些其他的解决方案。</p><h2 id="Aria2-BaiduExporter"><a href="#Aria2-BaiduExporter" class="headerlink" title="Aria2 + BaiduExporter"></a>Aria2 + BaiduExporter</h2><p>使用 <code>Aira2</code> 结合 <code>BaiduExporter</code> 越过度娘网盘下载速度限制，具体参考之前的：</p><ul><li><a href="/post/141514420">下载工具aria2 - 配置和使用</a></li><li><a href="/post/3364832428">BaiduExporter 介绍与使用</a></li></ul><h2 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h2><p><code>Tampermonkey</code>(油猴，简称TM) 是 <code>Chrome</code> 浏览器上的一款插件，是一款脚本管理器，用于管理 <code>JavaScript</code> 脚本。通过 <code>JS</code> 脚本可以实现特定网页/网域内容的定制化操作。</p><p>正确姿势：</p><ol><li>Chrome 浏览器安装 <a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener">Tampermonkey</a> 扩展插件；</li><li>去 <a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">GreaskyFork</a> 安装第三方的用户脚本，当然 TM 支持的用户脚本源不止这一个了，但 <code>GreaskyFork</code> 是目前受众最广最受欢迎的脚本源网站了；</li><li>以 <code>百度/云/网盘</code> 为关键字，可以搜到很多实用扩展。然后安装 <s><a href="https://greasyfork.org/zh-CN/scripts/35421-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B%E6%94%B9" target="_blank" rel="noopener">百度网盘直接下载助手改</a><s> 扩展脚本。</s></s></li></ol><p>访问自己百度云盘网页，会发现多了一个 <code>下载助手</code> 按钮：</p><img alt="点击下载助手&nbsp;选择下载方式" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/DownloadHelper_on_BaiduNetdisk.png"><blockquote><p>2018.01.18 更新：因百度网盘已经修改相关代码，故而 <code>百度网盘直接下载助手改</code> 目前版本已失效，最新有效的扩展脚本是 <a href="https://greasyfork.org/zh-CN/scripts/37078-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E8%AF%B7%E7%9C%8B%E8%84%9A%E6%9C%AC%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">百度网盘直接下载</a>，在网盘页面点击 <em>下载</em> 按钮即可直接下载。</p></blockquote><p>至于外链下载的话，我用的是 <code>迅雷极速版</code>，有需要的可以参考前面的文章 <a href="/post/2806688193">迅雷极速版 - 时代的眼泪</a></p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BaiduExporter </tag>
            
            <tag> 百度云 </tag>
            
            <tag> Tampermonkey </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迅雷极速版 - 时代的眼泪</title>
      <link href="/post/thunder-speed-memory/"/>
      <url>/post/thunder-speed-memory/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>如果说提供 高效迅捷的P2P 下载服务是迅雷的核心业务，那迅雷产品中从一而终的就是 <strong>迅雷极速版</strong>。然而，伴随着与QQ旋风 PK 的胜利，迅雷的产品理念逐渐多了些杂乱无章的东西，引发的的恶果之一就有 迅雷极速版 的下架。 <a id="more"></a></p><p>迅雷极速版 下架其实已经有很长一段时间了，之所以后知后觉，是因为 PC 上“绝版”的 迅雷极速版 仍然提供着高效的下载服务。最近手抽卸载了极速版，却发现她已经下架了。知乎上也有关于此事件的讨论， <a href="https://www.zhihu.com/question/52853014" target="_blank" rel="noopener">如何看待迅雷极速版下架？</a>。然后又尝试着下载了所谓的 <code>迅雷9</code>，整个一 浏览器 是闹哪样呢？呜呼哀哉！</p><p>最终还是找到了极速版的最后一版，版本号 <code>1.0.35.366</code> ，也许这个版本号应该被我们所铭记，毕竟又是一滴时代的眼泪不是吗？ :(   </p><p>这里我提供最后一版的百度云链接: <a href="https://pan.baidu.com/s/1cyDJbg" target="_blank" rel="noopener">百度云 - ThunderSpeed-1.0.35.366.zip</a>, 提取密码 <code>vhxa</code> 。 </p><p>我想，极速版我会用到其服务被关停为止，嗯。</p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 下载工具 </tag>
            
            <tag> 迅雷极速版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 折腾：利用 Fancybox 添加图片放大预览查看功能</title>
      <link href="/post/hexo-material-intergrate-image-display-feature/"/>
      <url>/post/hexo-material-intergrate-image-display-feature/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在之前的博客中，有的图片因为页面宽度或者高度的限制，显得比较小，不是很清晰，而我目前使用的主题是 <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">hexo-theme-material</a> ，版本为 <code>1.5.2</code>，该版本主题本身未加入图片预览功能，所以就自己折腾来加入图片点击放大预览效果。<a id="more"></a></p><p>考虑到之前使用的主题 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">hexo-theme-next</a> 中已经有了图片预览功能。<code>next</code> 主题使用 <a href="(https://github.com/fancyapps/fancybox">Fancybox</a> 库实现图片预览。<a href="https://github.com/fancyapps/fancybox" target="_blank" rel="noopener">Fancybox</a> 是一个基于 <code>jQuery</code> 的可高度定制化的轻量级库，可以用于显示图片、视频，并可以响应很多交互操作。因为 <code>next</code> 主题使用的 v2 版本的 <code>fancybox</code>，而官方弃用了 <code>fancybox v2</code> 并推荐使用 <code>fancybox v3</code>，所以本文主要参照 <code>fancybox</code> 的 <a href="http://fancyapps.com/fancybox/3/docs" target="_blank" rel="noopener">官方文档</a> 并结合 <code>material</code> 主题结构特点折腾出图片查看功能。</p><h2 id="折腾"><a href="#折腾" class="headerlink" title="折腾"></a>折腾</h2><h3 id="主题配置配置中新增-fancybox-配置项"><a href="#主题配置配置中新增-fancybox-配置项" class="headerlink" title="主题配置配置中新增 fancybox 配置项"></a>主题配置配置中新增 fancybox 配置项</h3><p>为了提高 <code>material</code> 主题的可扩展性和可控制性，在 <code>主题配置</code> 文件中加入 <code>fancybox</code> 字段：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="YAML"><figure class="highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Fancybox support</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><h3 id="下载fancybox库"><a href="#下载fancybox库" class="headerlink" title="下载fancybox库"></a>下载fancybox库</h3><p>点击<a href="https://github.com/fancyapps/fancybox/releases/latest" target="_blank" rel="noopener">这里</a> 下载最新的 <code>fancybox</code> 库， 解压缩至 <code>/theme/material/source/js/fancybox/</code> 目录下，这里贴出目录结构：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">js</span><br><span class="line">└── fancybox</span><br><span class="line">      ├── jquery.fancybox.min.css</span><br><span class="line">      └── jquery.fancybox.min.js</span><br></pre></td></tr></table></figure></div><p>下载下来的 <code>fancybox</code> 只保留了 <code>jquery.fancybox.min.css</code> 和 <code>jquery.fancybox.min.js</code> 文件，其他的非必需。</p><h3 id="编写js将fancybox应用到页面中"><a href="#编写js将fancybox应用到页面中" class="headerlink" title="编写js将fancybox应用到页面中"></a>编写js将fancybox应用到页面中</h3><p>参考 <code>next</code> 主题的 <code>/next/source/js/src/utils.js</code> , 我在 <code>/material/source/js/</code> 下新增了 <code>wrapImage.js</code> 用于在指定的 <code>&lt;img&gt;</code> 外裹一层 <code>fancybox</code> 所需要的属性（前端不熟，js写的<s>可能</s>很次 ORZ ）：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVASCRIPT"><figure class="highlight /javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    wrapImageWithFancyBox();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wrap images with fancybox support.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapImageWithFancyBox</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'img'</span>).not(<span class="string">'.sidebar-image img'</span>).not(<span class="string">'#author-avatar img'</span>).not(<span class="string">".mdl-menu img"</span>).not(<span class="string">".something-else-logo img"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $image = $(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">var</span> imageCaption = $image.attr(<span class="string">'alt'</span>);</span><br><span class="line">        <span class="keyword">var</span> $imageWrapLink = $image.parent(<span class="string">'a'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($imageWrapLink.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> src = <span class="keyword">this</span>.getAttribute(<span class="string">'src'</span>);</span><br><span class="line">            <span class="keyword">var</span> idx = src.lastIndexOf(<span class="string">'?'</span>);</span><br><span class="line">            <span class="keyword">if</span> (idx != <span class="number">-1</span>) &#123;</span><br><span class="line">                src = src.substring(<span class="number">0</span>, idx);</span><br><span class="line">            &#125;</span><br><span class="line">            $imageWrapLink = $image.wrap(<span class="string">'&lt;a href="'</span> + src + <span class="string">'"&gt;&lt;/a&gt;'</span>).parent(<span class="string">'a'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $imageWrapLink.attr(<span class="string">'data-fancybox'</span>, <span class="string">'images'</span>);</span><br><span class="line">        <span class="keyword">if</span> (imageCaption) &#123;</span><br><span class="line">            $imageWrapLink.attr(<span class="string">'data-caption'</span>, imageCaption);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $().fancybox(&#123;</span><br><span class="line">        selector: <span class="string">'[data-fancybox="images"]'</span>,</span><br><span class="line">        thumbs: <span class="literal">false</span>,</span><br><span class="line">        hash: <span class="literal">true</span>,</span><br><span class="line">        loop: <span class="literal">false</span>,</span><br><span class="line">        fullScreen: <span class="literal">false</span>,</span><br><span class="line">        slideShow: <span class="literal">false</span>,</span><br><span class="line">        protect: <span class="literal">true</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述代码中，<code>thumbs</code>, <code>hash</code>, <code>loop</code> 等都是 <code>fancybox</code> 支持的属性，更多具体属性可参考 <a href="http://fancyapps.com/fancybox/3/docs/#options" target="_blank" rel="noopener">Fancybox Options</a></p><h3 id="head模版中引入-fancybox-库"><a href="#head模版中引入-fancybox-库" class="headerlink" title="head模版中引入 fancybox 库"></a>head模版中引入 fancybox 库</h3><p>由于我们需要在 <code>html</code> 的 <code>&lt;head&gt;</code> 标签中引入 <code>fancybox</code> js库，所以我们找到 <code>&lt;head&gt;</code> 标签对应的模版文件 <code>/material/layout/_partial/head.ejs</code>, 利用之前配置的 <code>fancybox</code> 配置项在 <code>head.ejs</code> 中引入 <code>fancybox</code>:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JS"><figure class="highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- fancybox support --&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span>(theme.fancybox === <span class="literal">true</span> &amp;&amp; page.fancybox !== <span class="literal">false</span>) &#123; %&gt;</span><br><span class="line">  &lt;!-- <span class="keyword">for</span> theme: <span class="keyword">default</span> is <span class="literal">false</span> --&gt;</span><br><span class="line">  &lt;!-- <span class="keyword">for</span> page: <span class="keyword">default</span> is <span class="literal">true</span> --&gt;</span><br><span class="line">  &lt;%- jsLsload(&#123;<span class="attr">path</span>:(<span class="string">'js/fancybox/jquery.fancybox.min.js'</span>), <span class="attr">key</span>:<span class="string">'fancybox_js'</span>&#125;) %&gt;</span><br><span class="line">  &lt;%- jsLsload(&#123;<span class="attr">path</span>:(<span class="string">'js/wrapImage.js'</span>), <span class="attr">key</span>:<span class="string">'wrap_image_js'</span>&#125;) %&gt;</span><br><span class="line">  &lt;%- cssLsload(&#123;<span class="attr">path</span>:(<span class="string">'js/fancybox/jquery.fancybox.min.css'</span>), <span class="attr">key</span>:<span class="string">'fancybox_css'</span>&#125;) %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></div><p><strong>注意</strong>：如果有单独的页面不需要使用 <code>fancybox</code>，可以在页面的 <a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="noopener"><code>front-matter</code></a> 中关闭：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fancybox: false</span><br></pre></td></tr></table></figure></div><p>以上，重新生成静态网页，会发现网页源码中会新增类似如下内容：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="HTML"><figure class="highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- fancybox support --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">lsloader.load(<span class="string">"fancybox_js"</span>,<span class="string">"/js/fancybox/jquery.fancybox.min.js?t2LXoiIDGJmos9j6jmohzw=="</span>, <span class="literal">true</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">lsloader.load(<span class="string">"wrap_image_js"</span>,<span class="string">"/js/wrapImage.js?2z+b2rMZFAJ9HG9/nm3U9g=="</span>, <span class="literal">true</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>至此，图片点击放大预览效果已实现，撒花 ✿✿ヽ(ﾟ▽ﾟ)ノ✿</p><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p>点击图片进行浏览：</p><img alt="蕾姆" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Rem_03.jpg@!w300"><img alt="宫园薰" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Miyazono%20_Kaori_01.png@!w300"><img alt="雏鹤爱" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/Hinatsuru_Ai_01.png@!w400"><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://fancyapps.com/fancybox/3/docs" target="_blank" rel="noopener">fancyBox3 Documentation</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> hexo-theme-material </tag>
            
            <tag> Fancybox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打包导入BaiduExporter到Chrome教程（译）</title>
      <link href="/post/guide-on-packing-and-importing-BaiduExporter-to-Chrome-md/"/>
      <url>/post/guide-on-packing-and-importing-BaiduExporter-to-Chrome-md/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><blockquote><p>本文主要译自 <a href="https://hencolle.com/2016/10/16/baidu_exporter/" target="_blank" rel="noopener">Guide on Packaging and Import Baidu Exporter to Chrome</a>，并在一些细微之处做了补充或修改，所有解释权归属于原作者，侵删。</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为侵权的原因，Google 将 <a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="noopener">BaiduExporter</a> 从 Chrome Web Store 下架。出于安全的原因， Chrome 会禁用从本地导入的未知来源的扩展。每次启动 Chrome 时，如果 Chrome 加载了已解压的扩展程序，都会出现提示禁用的弹窗。</p><p>所以本文提供了一个通过使用 Windows 组策略来加载最新版本 BaiduExporter 的解决方案。</p><h2 id="下载BaiduExporter扩展"><a href="#下载BaiduExporter扩展" class="headerlink" title="下载BaiduExporter扩展"></a>下载BaiduExporter扩展</h2><p>从 <a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="noopener">这里</a> 克隆或者下载最新的 BaiduExporter 扩展。</p><h2 id="打包扩展"><a href="#打包扩展" class="headerlink" title="打包扩展"></a>打包扩展</h2><p>如果你有编译好的版本，以下步骤不需要：</p><ol><li>启动 Chrome, 打开 <code>chrome://extensions</code>， 勾选 <code>开发者模式</code>，在上方选择 <code>打包扩展程序</code>；</li><li>定位到之前下载的 BaiduExporter 源码（选择 <code>/BaiduExporter/chrome/</code> 目录），点击 <code>打包扩展程序</code>；</li><li>源码目录下将会新生成 <code>*.pem</code> 文件，<strong>保留这些文件</strong>，如果以后要更新扩展将会用到 <code>*.pem</code> 文件；</li><li>将生成的 <code>*.crx</code> 文件拖到 <code>chrome://extensions</code> 页面来安装扩展。勾选 <code>开发者模式</code> 来显示和获取 <code>扩展ID</code></li></ol><h2 id="使用组策略编辑器来应用Chrome策略"><a href="#使用组策略编辑器来应用Chrome策略" class="headerlink" title="使用组策略编辑器来应用Chrome策略"></a>使用组策略编辑器来应用Chrome策略</h2><ol><li>从 <a href="https://dl.google.com/dl/edgedl/chrome/policy/policy_templates.zip" target="_blank" rel="noopener">这里</a> 下载 Chrome 模版的压缩文件</li><li>将以下文件或者文件夹下所有文件拷贝到以 <code>%SystemRoot%\PolicyDefinitions</code>（通常是 <code>C:\Windows\PolicyDefinitions</code> ） 为根目录的对应目录下：<ul><li><code>./windows/admx/chrome.admx</code>;</li><li><code>./windows/admx/google.admx</code>;</li><li><code>./windows/admx/en-US/</code>;</li><li><code>./windows/admx/zh-CN/</code>。</li></ul></li><li>按下 <code>Win+R</code> 组合键并运行 <code>gpedit.msc</code> 打开组策略编辑器，如果在 <code>本地计算机策略 -&gt; 计算机配置 -&gt; 管理模版</code> 下看到 <code>Google/Google Chrome</code> 子目录，则说明Chrome策略添加成功。（PS. 简易版和家庭版的 Windows 系统没有内置组策略编辑器。如果你使用的是这些 Windows 版本，你应该先参考这个<a href="https://www.itechtics.com/enable-gpedit-windows-10-home/" target="_blank" rel="noopener">教程</a>来安装组策略编辑器）</li></ol><h2 id="将BaiduExporter的扩展ID添加至白名单"><a href="#将BaiduExporter的扩展ID添加至白名单" class="headerlink" title="将BaiduExporter的扩展ID添加至白名单"></a>将BaiduExporter的扩展ID添加至白名单</h2><p>通过以下步骤将扩展ID添加至白名单：</p><ol><li>组策略编辑器中，导航至 <code>本地计算机配置 -&gt; 管理模版 -&gt; Google -&gt; Google Chrome -&gt; 扩展程序</code> 部分；</li><li>在右侧双击并打开 <code>配置扩展程序安装白名单</code>；</li><li>勾选左上角的 <code>已启用</code>，点击左下方的 <code>显示</code>，将 BaiduExporter 的扩展ID添加进去。</li></ol><p>添加至白名单的扩展将会在 Chrome 重启之后默认加载。</p>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BaiduExporter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BaiduExporter 介绍与使用</title>
      <link href="/post/baidu-exporter-introduction-and-instructions/"/>
      <url>/post/baidu-exporter-introduction-and-instructions/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="noopener">BaiduExporter</a> 是一款可以方便地将百度网盘的下载地址导出为 <code>aria2/aria2-rpc</code> 链接的工具。 <a id="more"></a></p><p>其原本是作为 Chrome 扩展而存在，但是因为某些原因而被 Google 从 Chrome Web Store 下架。所以需要自己依据 <code>BaiduExporter</code> 源码安装其 Chrome 扩展。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>将 <a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="noopener">BaiduExporter</a> 扩展源码下载或克隆下来；</li><li>启动 Chrome, 打开　<code>chrome://extensions</code> 扩展页面，勾选 <code>开发者模式</code>，点击 <code>加载已解压的扩展程序</code>，导航至 <code>/BaiduExporter/chrome/</code> 并选中 <code>chrome</code> 目录，点击确认。</li></ol><img class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/import_BaiduExporter_by_loading_unpacked_extension.png"><p>上图便是 BaiduExporter(网盘助手) 加载成功的截图。</p><p>虽然上述方式安装 BaiduExporter 扩展是OK的，但是，<font color="#FF4081">每次重新打开 Chrome 后就会弹出警示对话框</font>，内容如下：</p><img alt="停用开发者模式运行扩展的提示" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/chrome_disable_debug_mode_popup.png"><p>为解决上述问题，可以参考 <a href="/post/934692094">打包导入BaiduExporter到Chrome教程</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>BaiduExporter</code> Chrome 插件安装并启用完毕后，我们在访问自己的百度网盘网页时会在上方多出 <code>导出下载</code> 的按钮（如下图所示），勾选需要下载的资源，点击 <code>导出下载 -&gt; ARIA2 RPC</code> 便可导出至 aria2 下载，当然，前提是你已经开启 aria2 并启用了 RPC 模式。</p><img alt="百度网盘页面" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/BaiduExporter_on_BaiduNetDisk.png"><p>至于如何查看和管理下载进度，则可参考 <a href="/post/141514420/#下载管理">aria2 下载管理</a>。</p><h2 id="相关链接或参考"><a href="#相关链接或参考" class="headerlink" title="相关链接或参考"></a>相关链接或参考</h2><ol><li><a href="https://github.com/acgotaku/BaiduExporter" target="_blank" rel="noopener">BaiduExporter</a></li><li><a href="https://blog.icehoney.me/posts/2015-01-31-Aria2-download" target="_blank" rel="noopener">使用Aria2下载百度网盘和115的资源</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aria2 </tag>
            
            <tag> BaiduExporter </tag>
            
            <tag> 百度网盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>下载工具aria2 - 配置和使用</title>
      <link href="/post/aria2-introduction-and-instruction/"/>
      <url>/post/aria2-introduction-and-instruction/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>aria2 是一款支持跨平台、多源、多协议的轻量级的命令行式的下载工具。它支持 HTTP/HTTPS、FTP、SFTP、磁力链接以及 Medialink等多种下载方式。不仅如此，更值得称赞的是，<a href="https://github.com/aria2/aria2" target="_blank" rel="noopener">aira2</a> 还是一款开源免费的软件。 <a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>最新的 aria2 release版本下载地址 <a href="https://github.com/aria2/aria2/releases/latest" target="_blank" rel="noopener">aria2 release</a>。</p><blockquote><p><strong>注意</strong>：之前网上好多关于 aria2 的下载地址是在 sourceforge 上的，但是由于 aria2 已开源迁移至 GitHub，所以下载最新版本的还是需要找准地址。</p></blockquote><img alt="aria2下载列表" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/aria2_download_list.png"><p>通过上方官方给的下载列表可以看出，aria2支持的平台有 Windows、MacOS、Linux、Android。注意，<font color="#FF4081">本文只介绍 Windows 平台下的，其他平台烦请另行查阅资料</font>。 Windows 平台只需下载对应位数的zip压缩包，解压缩即可。</p><p>解压后的目录结构如下，其体积是相当小的：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aria2-1.32/</span><br><span class="line">├── aria2c.exe</span><br><span class="line">├── AUTHORS</span><br><span class="line">├── ChangeLog</span><br><span class="line">├── COPYING</span><br><span class="line">├── LICENSE.OpenSSL</span><br><span class="line">├── NEWS</span><br><span class="line">├── README.html</span><br><span class="line">└── README.mingw</span><br></pre></td></tr></table></figure></div><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>接下来，在 aria2 目录下新建如下几个<strong>空文件</strong>来进行后续配置：</p><ul><li>aria2.conf - 配置文件</li><li>aria2.log - 日志文件</li><li>aria2.session - 下载记录文件</li><li>HideRun.vbs - 隐藏cmd窗口运行aria2所需要的文件</li></ul><p>之后 aria2 的目录结构如下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">aria2-1.32/</span><br><span class="line">├── aria2.conf</span><br><span class="line">├── aria2.log</span><br><span class="line">├── aria2.session</span><br><span class="line">├── aria2c.exe</span><br><span class="line">├── AUTHORS</span><br><span class="line">├── ChangeLog</span><br><span class="line">├── COPYING</span><br><span class="line">├── HideRun.vbs</span><br><span class="line">├── LICENSE.OpenSSL</span><br><span class="line">├── NEWS</span><br><span class="line">├── README.html</span><br><span class="line">└── README.mingw</span><br></pre></td></tr></table></figure></div><h3 id="配置-aria2-conf"><a href="#配置-aria2-conf" class="headerlink" title="配置 aria2.conf"></a>配置 aria2.conf</h3><p>aria2.conf 文件用于配置 aria2 运行时的相关参数，相关配置项可以参考 <a href="https://aria2c.com/archiver/aria2.conf" target="_blank" rel="noopener">aria2配置示例</a>。</p><p>aria2 有两种下载模式，一种是命令行下载模式，一种是 RPC Server 模式，前者不方便故不建议使用； RPC Server 模式就是把 aria2 当作服务端，通过 RPC 接口接受客户端的下载请求，因为是 Server 模式，aria2 下载完成并不会退出，会一直等待后续的下载请求。所以，需要在 aria2.conf 配置文件中将与 RPC 相关的配置项打开(enable)。 这里我贴出自己的配置文件：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="INI"><figure class="highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## '#'开头为注释内容, 选项都有相应的注释说明, 根据需要修改 ##</span></span><br><span class="line"><span class="comment">## 被注释的选项填写的是默认值, 建议在需要修改时再取消注释  ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 文件保存相关 ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件的保存路径(可使用绝对路径或相对路径), 默认: 当前启动位置</span></span><br><span class="line"><span class="attr">dir</span>=E:\Downloads</span><br><span class="line"><span class="comment"># 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M</span></span><br><span class="line"><span class="comment">#disk-cache=32M</span></span><br><span class="line"><span class="comment"># 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc</span></span><br><span class="line"><span class="comment"># 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc</span></span><br><span class="line"><span class="comment"># falloc和trunc则需要文件系统和内核支持</span></span><br><span class="line"><span class="comment"># NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项</span></span><br><span class="line"><span class="attr">file-allocation</span>=falloc</span><br><span class="line"><span class="comment"># 断点续传</span></span><br><span class="line"><span class="attr">continue</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 下载连接相关 ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最大同时下载任务数, 运行时可修改, 默认:5</span></span><br><span class="line"><span class="attr">max-concurrent-downloads</span>=<span class="number">4</span></span><br><span class="line"><span class="comment"># 同一服务器连接数, 添加时可指定, 默认:1</span></span><br><span class="line"><span class="attr">max-connection-per-server</span>=<span class="number">5</span></span><br><span class="line"><span class="comment"># 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M</span></span><br><span class="line"><span class="comment"># 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载</span></span><br><span class="line"><span class="attr">min-split-size</span>=<span class="number">10</span>M</span><br><span class="line"><span class="comment"># 单个任务最大线程数, 添加时可指定, 默认:5</span></span><br><span class="line"><span class="attr">split</span>=<span class="number">5</span></span><br><span class="line"><span class="comment"># 整体下载速度限制, 运行时可修改, 默认:0</span></span><br><span class="line"><span class="comment">#max-overall-download-limit=0</span></span><br><span class="line"><span class="comment"># 单个任务下载速度限制, 默认:0</span></span><br><span class="line"><span class="comment">#max-download-limit=0</span></span><br><span class="line"><span class="comment"># 整体上传速度限制, 运行时可修改, 默认:0</span></span><br><span class="line"><span class="comment">#max-overall-upload-limit=0</span></span><br><span class="line"><span class="comment"># 单个任务上传速度限制, 默认:0</span></span><br><span class="line"><span class="comment">#max-upload-limit=0</span></span><br><span class="line"><span class="comment"># 禁用IPv6, 默认:false</span></span><br><span class="line"><span class="attr">disable-ipv6</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 进度保存相关 ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从会话文件中读取下载任务</span></span><br><span class="line"><span class="attr">input-file</span>=D:\aria2\aria2-<span class="number">1.32</span>\aria2.session</span><br><span class="line"><span class="comment"># 在Aria2退出时保存`错误/未完成`的下载任务到会话文件</span></span><br><span class="line"><span class="attr">save-session</span>=D:\aria2\aria2-<span class="number">1.32</span>\aria2.session</span><br><span class="line"><span class="comment"># 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0</span></span><br><span class="line"><span class="attr">save-session-interval</span>=<span class="number">60</span></span><br><span class="line"><span class="comment"># log日志路径 默认没有log</span></span><br><span class="line"><span class="comment"># log=D:\aria2\aria2-1.32\aria2.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## RPC相关设置 ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用RPC, 默认:false</span></span><br><span class="line"><span class="attr">enable-rpc</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 允许所有来源, 默认:false</span></span><br><span class="line"><span class="attr">rpc-allow-origin-all</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 允许非外部访问, 默认:false</span></span><br><span class="line"><span class="attr">rpc-listen-all</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 事件轮询方式, 取值:[epoll, kqueue, port, poll, select], 不同系统默认值不同</span></span><br><span class="line"><span class="comment">#event-poll=select</span></span><br><span class="line"><span class="comment"># RPC监听端口, 端口被占用时可以修改, 默认:6800</span></span><br><span class="line"><span class="comment">#rpc-listen-port=6800</span></span><br><span class="line"><span class="comment"># 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项</span></span><br><span class="line"><span class="comment">#rpc-secret=&lt;TOKEN&gt;</span></span><br><span class="line"><span class="comment"># 设置的RPC访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span></span><br><span class="line"><span class="comment">#rpc-user=&lt;USER&gt;</span></span><br><span class="line"><span class="comment"># 设置的RPC访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项</span></span><br><span class="line"><span class="comment">#rpc-passwd=&lt;PASSWD&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## BT/PT下载相关 ##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:true</span></span><br><span class="line"><span class="comment">#follow-torrent=true</span></span><br><span class="line"><span class="comment"># BT监听端口, 当端口被屏蔽时使用, 默认:6881-6999</span></span><br><span class="line"><span class="attr">listen-port</span>=<span class="number">51413</span></span><br><span class="line"><span class="comment"># 单个种子最大连接数, 默认:55</span></span><br><span class="line"><span class="comment">#bt-max-peers=55</span></span><br><span class="line"><span class="comment"># 打开DHT功能, PT需要禁用, 默认:true</span></span><br><span class="line"><span class="attr">enable-dht</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment"># 打开IPv6 DHT功能, PT需要禁用</span></span><br><span class="line"><span class="comment">#enable-dht6=false</span></span><br><span class="line"><span class="comment"># DHT网络监听端口, 默认:6881-6999</span></span><br><span class="line"><span class="comment">#dht-listen-port=6881-6999</span></span><br><span class="line"><span class="comment"># 本地节点查找, PT需要禁用, 默认:false</span></span><br><span class="line"><span class="comment">#bt-enable-lpd=false</span></span><br><span class="line"><span class="comment"># 种子交换, PT需要禁用, 默认:true</span></span><br><span class="line"><span class="attr">enable-peer-exchange</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment"># 每个种子限速, 对少种的PT很有用, 默认:50K</span></span><br><span class="line"><span class="comment">#bt-request-peer-speed-limit=50K</span></span><br><span class="line"><span class="comment"># 客户端伪装, PT需要</span></span><br><span class="line"><span class="attr">peer-id-prefix</span>=-TR2770-</span><br><span class="line"><span class="attr">user-agent</span>=Transmission/<span class="number">2.77</span></span><br><span class="line"><span class="comment"># 当种子的分享率达到这个数时, 自动停止做种, 0为一直做种, 默认:1.0</span></span><br><span class="line"><span class="attr">seed-ratio</span>=<span class="number">0</span></span><br><span class="line"><span class="comment"># 强制保存会话, 即使任务已经完成, 默认:false</span></span><br><span class="line"><span class="comment"># 较新的版本开启后会在任务完成后依然保留.aria2文件</span></span><br><span class="line"><span class="comment">#force-save=false</span></span><br><span class="line"><span class="comment"># BT校验相关, 默认:true</span></span><br><span class="line"><span class="comment">#bt-hash-check-seed=true</span></span><br><span class="line"><span class="comment"># 继续之前的BT任务时, 无需再次校验, 默认:false</span></span><br><span class="line"><span class="attr">bt-seed-unverified</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 保存磁力链接元数据为种子文件(.torrent文件), 默认:false</span></span><br><span class="line"><span class="attr">bt-save-metadata</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div><p>更多更详尽的配置项请参考官方 <a href="https://aria2.github.io/manual/en/html/aria2c.html#options" target="_blank" rel="noopener">manual</a></p><h3 id="配置-HideRun-vbs"><a href="#配置-HideRun-vbs" class="headerlink" title="配置 HideRun.vbs"></a>配置 HideRun.vbs</h3><p>HideRun.vbs 文件的目的是就是让 aria2 隐藏 cmd 窗口运行。<br>往 HideRun.vbs 写入如下脚本内容：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="VBSCRIPT"><figure class="highlight /vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CreateObject</span>(<span class="string">"WScript.Shell"</span>).Run <span class="string">"aria2c.exe --conf-path=aria2.conf -D"</span>,<span class="number">0</span></span><br></pre></td></tr></table></figure></div><p>通过 HideRun.vbs 内容我们可以知道， aria2c.exe 每次在运行时是要去加载 aria2.conf 配置文件的，所以<font color="#FF4081">需要双击  HideRun.vbs 来启动aria2，而不是双击 aria2c.exe</font>。</p><h2 id="下载管理"><a href="#下载管理" class="headerlink" title="下载管理"></a>下载管理</h2><p>aria2 是基于命令行的下载工具，本身是没有用于管理的界面的，一切都基于命令行，但有基于网页的管理界面（webui）：</p><ol><li>aria2官网提及的 <a href="https://github.com/ziahamza/webui-aria2" target="_blank" rel="noopener">webui-aria2</a> 项目</li><li>Binux大大的 <a href="http://binux.github.io/yaaw/demo/" target="_blank" rel="noopener">YAAW</a></li></ol><p>在这里我推荐 aria2 官网提及的 <code>webui-aria2</code> 作为Web管理界面，因为就目前看来它更好用 XD。</p><h3 id="webui-aria2-的使用"><a href="#webui-aria2-的使用" class="headerlink" title="webui-aria2 的使用"></a>webui-aria2 的使用</h3><p>有以下方式使用 webui-aria2：</p><ol><li>直接访问 <a href="https://ziahamza.github.io/webui-aria2/" target="_blank" rel="noopener">在线的 webui-aria2 页面</a> 来进行 aria2 的下载管理，一般来说选用这个就行；</li><li>通过将 <a href="https://github.com/ziahamza/webui-aria2" target="_blank" rel="noopener">webui-aria2</a> 这个repo下载下来，然后打开 index.html 来进行 aria2 的下载管理；</li></ol><p>在使用 webui-aria2 进行 aria2 的下载管理前，可能需要在web管理页面进行相关配置：<br><code>设置 -&gt; 连接设置 -&gt; Aria2 RPC 主机和端口</code>，需要根据提示完成相应的配置（具体需要填什么内容取决于之前的 aria2.conf的配置）。</p><p>在这里贴上我的 webui-aria2 的连接设置，因为令牌等都未启用，所以都是空：</p><img alt="webui-aria2" 连接设置="undefined" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/aria2_webui_conn_config.png@!w580"><p>在 webui-aria2 管理界面上，可以点击 <code>添加</code> 来添加链接、种子或 Medialink，来新增 aria2 的下载任务。更多其他操作（包括暂定、删除、重新下载等），在web界面上都有相应的入口，很简单，这里就不再详细介绍了。</p><p>最后附一张 <code>webui-aria2</code> 管理界面截图：</p><img alt="webui-aria2 管理界面" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/aria2_webui_screenshot.png"><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><ul><li>结合 <code>BaiduExporter(网盘助手)</code> 越过某(bai)度网盘下载速度限制，从而高速下载网盘文件，详情请戳 <a href="/post/3364832428">BaiduExporter 介绍与使用</a></li></ul><h2 id="相关链接或参考"><a href="#相关链接或参考" class="headerlink" title="相关链接或参考"></a>相关链接或参考</h2><ul><li><a href="http://bbs.kafan.cn/thread-1686205-1-1.html" target="_blank" rel="noopener">用火狐我喜欢用aria2下载，写写windows下教程吧</a></li><li><a href="https://aria2c.com/usage.html" target="_blank" rel="noopener">Aria2 &amp; YAAW 使用说明</a></li><li><a href="https://github.com/aria2/aria2" target="_blank" rel="noopener">aria2</a></li><li><a href="https://github.com/ziahamza/webui-aria2" target="_blank" rel="noopener">webui-aria2</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 下载工具 </tag>
            
            <tag> aria2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>炉石开包引发的血案（雾</title>
      <link href="/post/bernoulli-experiment-in-hearthstone-pack-opening/"/>
      <url>/post/bernoulli-experiment-in-hearthstone-pack-opening/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>昨天<a href="http://weibo.com/u/3826238638" target="_blank" rel="noopener">星苏</a>直播开炉石卡包，并发起对应的竞猜，竞猜内容大致是： 50包卡包中，出现橙卡数目的奇偶性。 然后就有弹幕说：“哎呀，猜单双多没意思呀，可能性一样，赔率不会悬殊，没意思。” 那么，奇偶出现的可能性是一样吗？ <a id="more"></a></p><h2 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h2><p>暴雪爸爸前段时间发布了<a href="http://hs.blizzard.cn/articles/20/9546" target="_blank" rel="noopener">关于《炉石传说》卡牌包抽取概率公告</a>，其中有两条关键信息：</p><blockquote><p>平均20个炉石卡牌包，可获得一张传说品质卡牌。<br>此外，需要说明的是：随着卡牌包抽取数量的增多，玩家实际获得高品质卡牌的概率也将同步提高。</p></blockquote><p>通过官方的说明，加上对开包已有的认知，可以将 <em>卡牌包抽取</em>&nbsp; 行为近似抽象为 <a href="http://baike.baidu.com/item/%E4%BC%AF%E5%8A%AA%E5%88%A9%E8%AF%95%E9%AA%8C" target="_blank" rel="noopener">伯努利试验(或 重复独立试验)</a>。由于卡牌包抽取数量的增大，获得传说（橙卡）的概率也会相应提高，也就是前面的试验结果会对后续的试验结果产生一定影响，故而这里的 <em>伯努利试验</em>&nbsp; 模型并不十分精确。但在开包数目相对较小的情况下，我们还是可以使用 <em>伯努利试验</em>&nbsp; 进行近似建模抽象的。毕竟，官方没有透露任何关于卡牌包出传说概率模型的消息，也只能用 <em>伯努利试验</em>&nbsp; 对其进行简单抽象了。</p><p>另外，这里也可以得知，单包出橙卡的概率为 1/20 即 0.05。</p><p>在 n 次重复独立试验中，用 $\xi$ 表示事件A发生的次数，用 p 表示事件A在单次试验中发生的概率，则事件A发生 k 次的概率 P 为：<br>$$P(\xi = k) = C_n^k \cdot p^k \cdot (1-p)^{n-k}$$<br>建立了数学模型，可以方便解决问题了。<del>\(≧▽≦)/</del></p><h2 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h2><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重复独立试验</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tianma</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BernoulliExperiment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重复独立试验(伯努利试验)，单次出现概率为p(0&lt;p&lt;1)的情况下，重复独立试验n次，返回命中k次的概率</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * P(k,n,p) = C(n,k)*(p^k)*((1-p)^(n-k)),其中(k = 0,1,2,...,n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">probability</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">double</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> combination(n, k) * Math.pow(p, k) * Math.pow(<span class="number">1</span> - p, n - k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算C(n,m)组合数的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">combination</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span>[] arr = <span class="keyword">new</span> <span class="keyword">long</span>[m + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">arr[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - m; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">arr[j] += arr[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr[m];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BernoulliExperiment bernoulli = <span class="keyword">new</span> BernoulliExperiment();</span><br><span class="line"><span class="keyword">double</span> p = <span class="number">0.05</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">double</span> oddProbability = <span class="number">0</span>, evenProbability = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">double</span> probability = bernoulli.probability(n, i, p);</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">evenProbability += probability;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">oddProbability += probability;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"Odd probability : "</span> + oddProbability);</span><br><span class="line">System.out.println(<span class="string">"Even probability : "</span> + evenProbability);</span><br><span class="line">        System.out.println(<span class="string">"Odd + Even : "</span> + (evenProbability + oddProbability));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述代码中涉及到组合数的计算，详情可以看之前的博客 <a href="/post/285069090">组合数的计算</a>。</p><p>运行结果如下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Odd probability : <span class="number">0.497423112396339</span></span><br><span class="line">Even probability : <span class="number">0.502576887603659</span></span><br><span class="line">Odd + Even : <span class="number">0.999999999999998</span></span><br></pre></td></tr></table></figure></div><p>从运行结果我们可以看出，50个卡包开出橙卡数目的奇偶性的概率大致一样，但还是有略微差别。如果对 n 和 p 取不同的值，得到的奇偶性概率差又会不一致。也就是说，需要经过一定的计算才能判断最终结论走向。</p><p>最后的最后，想说一句，芝士就是力量（大雾） ╰(￣▽￣)╮</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 伯努利试验 </tag>
            
            <tag> 概率学 </tag>
            
            <tag> Hearth Stone </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合数的计算</title>
      <link href="/post/calculate-combination-number-efficiently/"/>
      <url>/post/calculate-combination-number-efficiently/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>组合数的计算虽然在一般的编程领域中不太能用到，但是在数学相关领域及ACM中还是有其用武之地的。那么，如何在程序中计算组合数呢？ <a id="more"></a></p><h2 id="累乘计算"><a href="#累乘计算" class="headerlink" title="累乘计算"></a>累乘计算</h2><p>我们知道：<br>$$C_{n}^{m}=\frac {A_{n}^{m}}{m!}=\frac {n!}{m!\left(n-m\right)!} , (0\leq m\leq n) \tag{1}$$<br>$$C_{n}^{m}=\frac {n\cdot(n-1)\ldots(n-m+1)}{m!}, (0\leq m\leq n) \tag{2}$$</p><p>通过公式(1)和公式(2)，可以简单的依据公式来进行组合数的计算。但因为公式中涉及到阶乘运算（准确说是连乘运算），故而会存在数据溢出的问题，因而不推荐。</p><h2 id="累加计算"><a href="#累加计算" class="headerlink" title="累加计算"></a>累加计算</h2><p>为了避免直接计算阶乘，可以对公式（1）两边取对数：<br>$$\ln(C_{n}^{m}) = \ln(n!) - \ln(m!) - \ln((n-m)!) = \sum_{i=1}^{n}\ln(i) - \sum_{i=1}^{m}\ln(i) - \sum_{i=1}^{n-m}\ln(i) \tag{3}$$<br>又因为：<br>$$\sum_{i=1}^{n}\ln(i) = \sum_{i=1}^{m}\ln(i) + \sum_{i=m+1}^{n}\ln(i) \tag{4}$$<br>将（4）代入等式右边可得：<br>$$\ln(C_{n}^{m}) = \sum_{i=m+1}^{n}\ln(i) - \sum_{i=1}^{n-m}\ln(i) \tag{5}$$</p><p>观察式（5）右侧，其累加的次数为 $[n-(m+1)+1]+[(n-m)-1+1]=2×(n-m)$次，在n的值一定的情况下，m越小，累加次数越多。<br>而我们知道：$C_{n}^{m}=C_{n}^{n-m}$，当 $m&lt;n/2$ 时，直接计算 $C_n^m$ 则累加次数较多，此时，我们可以通过计算 $C_{n}^{n-m}$ 来间接得到 $C_{n}^{m}$ 的值，从而减少累加次数，提高运算效率。</p><p>最后，我们可以通过两边取e的指数幂，最终计算出组合数 $C_{n}^{m}$ 的值。</p><p>Java实现：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 计算C(n,m)组合数的值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">combination1</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (m &gt; n) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; n / <span class="number">2</span>) &#123;</span><br><span class="line">      m = n - m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      result += Math.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - m; i++) &#123;</span><br><span class="line">      result -= Math.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.round(Math.exp(result));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述方案相较于之前的累乘计算方案有明显的优化提高。值得注意的是，虽然自然常数 e 是常数，但因其为无限不循环小数，在Java代码中，实际计算时 e 取的是其近似值，所以上述代码在 n 的值较大时，会出现计算结果的偏差。n 的值较小的情况下，其准确性还是可以保障的。</p><h2 id="精确计算"><a href="#精确计算" class="headerlink" title="精确计算"></a>精确计算</h2><p>组合数公式中，还有一个恒等式：<br>$$C_{n}^{m} = C_{n-1}^{m} + C_{n-1}^{m-1}, (1&lt;m&lt;n) \tag{6}$$</p><p>又因为：$C_{n}^{0} = C_{n}^{n} = 1$, 所以最终可以得到：<br>$$<br>C_{n}^{m} =<br>\begin{cases}<br> 1 &amp; (m = 0)\\<br> C_{n-1}^{m} + C_{n-1}^{m-1} &amp; (1\leq m&lt;n)\\<br> 1 &amp; (m = n)<br>\end{cases}<br>\tag{7}<br>$$</p><p>看到公式（7）我们很容易想到可以用递归去计算 $C_{n}^{m}$ 的值，这也不失为一种方案，然而因为在递归过程中会出现不少重复值（存在重复计算），且递归过程较为浪费栈内存，在这里就不详细介绍该方案。</p><p>我们以 $C_{5}^{3}$ 为例，建立如下矩阵：<br>$$<br>\begin{matrix}<br>C_0^0 &amp; C_1^1 &amp; C_2^2 &amp; C_3^3 \\<br>C_1^0 &amp; C_2^1 &amp; C_3^2 &amp; C_4^3 \\<br>C_2^0 &amp; C_3^1 &amp; C_4^1 &amp; C_5^3<br>\end{matrix}<br>$$<br>在这上述矩阵中，依据公式（6），我们可以看出，每个位置上的组合数的值都等于其左边和其上边的组合数之和。也就是说，只要知道第一行和第一列各组合数的值，则可以以加法的形式计算出整个矩阵其他位置的组合值。而根据公式（7），我们知道，第一行和第一列各组合数的值均为1。</p><p>我们归纳出 $C_n^m$ 对应的矩阵：<br>$$<br>\begin{matrix}<br>C_0^0 &amp; C_1^1 &amp; C_2^2 &amp; \cdots &amp; C_m^m   \\<br>C_1^0 &amp; C_2^1 &amp; C_3^2 &amp; \cdots &amp; C_{m+1}^m \\<br>C_2^0 &amp; C_3^1 &amp; C_4^2 &amp; \cdots &amp; C_{m+2}^m \\<br>\vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots   \\<br>C_{n-m}^0 &amp; C_{n-m+1}^1 &amp; C_{n-m+2}^2 &amp; \cdots &amp; C_n^m<br>\end{matrix}<br>$$<br>第1行和第1列的值均为1，可以根据第1行计算出第2行各位置的值，再可由第2行计算出第3行各位置的值，如此循环，便可计算出 $C_n^m$ 的值。</p><p>Java实现</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 计算C(n,m)组合数的值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">combination2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span>[] arr = <span class="keyword">new</span> <span class="keyword">long</span>[m + <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - m; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">      arr[j] += arr[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述方法，只开辟了 m+1 个长度的长整型数组，空间占有率较小，空间复杂度小。因为有两层循环，其平均时间效率不如累加的计算方案，但它是精准计算，计算出的组合数值没有偏差。综合来看，较为推荐最后这种方案来计算组合数值。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.wikipedia.org/wiki/%E7%B5%84%E5%90%88" target="_blank" rel="noopener">组合-维基百科</a><br><a href="http://baike.baidu.com/item/%E7%BB%84%E5%90%88%E6%95%B0" target="_blank" rel="noopener">组合数-百度百科</a><br><a href="http://blog.sina.com.cn/s/blog_4298002e0100eko0.html" target="_blank" rel="noopener">大数量级组合数的快速计算方法</a><br><a href="https://my.oschina.net/psaux0/blog/214013" target="_blank" rel="noopener">基础算法学习-求组合数</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排列组合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>熊猫tv竞猜引发的组合问题</title>
      <link href="/post/combination-problems-caused-by-Panda-Quiz/"/>
      <url>/post/combination-problems-caused-by-Panda-Quiz/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天晚上在看<a href="http://weibo.com/qiurilushi" target="_blank" rel="noopener">秋日</a>播炉石的时候，发现最近熊猫tv加入了竞猜活动，可以通过该活动来获取竹子（熊猫tv中货币之一），嘛~ 这就是一娱乐活动嘛。 <a id="more"></a></p><p>这次秋日主要竞猜的内容有两个：</p><ol><li>远古雕文发现的三张法术牌费用总和是否小于某一值</li><li>秘法宝典开出来的三张法术牌费用总和是否小于某一值</li></ol><p>看到这个我就心血来潮了，这并不是以往的只能靠运气来赢得奖励的竞猜活动，而是可以通过<strong>数学分析</strong>进行量化的，因为其实这就是排列组合中的组合问题嘛：</p><ul><li>当前版本标准模式下，法师的法术牌一共有31张（除去任务橙 “打开时空之门”）</li><li>远古雕文发现的三张法术不可重复，也就是不可重复取的组合问题：从n个元素中不可重复抽m次</li><li>秘法宝典开出的三张法术牌可重复，也就是可重复取的组合问题：从m个元素中可重复抽m次</li></ul><p>上述问题可以用数学手段去解决，亦可以用编程去解决，因为懒得去分析各种可能的有效情况，所以直接用代码去解决了…</p><h2 id="代码解决"><a href="#代码解决" class="headerlink" title="代码解决"></a>代码解决</h2><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tianma.exercise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Combination</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 总组合数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> globalCounter = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 合法组合数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> validCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从n个数据中选取m个的组合（不可重复取）, 小于临界值的有效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">combineUnrepeatable</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> m, <span class="keyword">int</span> threshold)</span> </span>&#123;</span><br><span class="line">combine(input, m, threshold, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从n个数中选取m次的组合（可重复取），小于临界值的有效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">combineRepeatable</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> m, <span class="keyword">int</span> threshold)</span> </span>&#123;</span><br><span class="line">combine(input, m, threshold, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> m, <span class="keyword">int</span> threshold, <span class="keyword">boolean</span> repeatable)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (input == <span class="keyword">null</span> || input.length == <span class="number">0</span> || m &lt;= <span class="number">0</span> || m &gt; input.length) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"参数错误"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] out = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line">innerCombine(input, m, <span class="number">0</span>, out, <span class="number">0</span>, threshold, repeatable);</span><br><span class="line"><span class="keyword">float</span> ratio = <span class="number">1.0f</span> * validCounter / globalCounter;</span><br><span class="line">System.out.println(<span class="string">"总次数 = "</span> + globalCounter + <span class="string">", 小于 "</span> + threshold + <span class="string">"的命中次数 = "</span> + validCounter + <span class="string">", 命中率 = "</span> + ratio);</span><br><span class="line">globalCounter = validCounter = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">innerCombine</span><span class="params">(<span class="keyword">int</span>[] input, <span class="keyword">int</span> m, <span class="keyword">int</span> beginIdx, <span class="keyword">int</span>[] out, <span class="keyword">int</span> index, <span class="keyword">int</span> threshold, <span class="keyword">boolean</span> repeatable)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">System.out.print(out[i] + <span class="string">" "</span>);</span><br><span class="line">total += out[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (total &lt; threshold) &#123;</span><br><span class="line">validCounter++;</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line">globalCounter++;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = repeatable ? <span class="number">0</span> : beginIdx; i &lt; input.length; i++) &#123;</span><br><span class="line">out[index] = input[i];</span><br><span class="line">innerCombine(input, m - <span class="number">1</span>, i + <span class="number">1</span>, out, index + <span class="number">1</span>, threshold, repeatable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 法师31张法术法力值数组</span></span><br><span class="line"><span class="keyword">int</span>[] in = &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> threshold = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">boolean</span> repeatable = <span class="keyword">true</span>;</span><br><span class="line">Combination combination = <span class="keyword">new</span> Combination();</span><br><span class="line">combination.combine(in, m, threshold, repeatable);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="花絮"><a href="#花絮" class="headerlink" title="花絮"></a>花絮</h2><p>在后续的竞猜中我发现一个有趣的现象：</p><img alt="某次秘法宝典竞猜截图" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/panda-quiz.png"><p>程序跑出的结果：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总次数 = <span class="number">29791</span>, 小于 <span class="number">11</span>的命中次数 = <span class="number">16193</span>, 命中率 = <span class="number">0.5435534</span></span><br></pre></td></tr></table></figure></div><p>也就是说 “小于11” 的概率其实比 “大于10” 的概率要高，但是前者的”赔率”却比后者高。因为参加竞猜的大多数观众是凭直觉下注的，所以可以得出的结论是，有时候凭借直觉往往是错的，数学理论的支持才是王道，红红火火恍恍惚惚 ╰_╯</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率学 </tag>
            
            <tag> Hearth Stone </tag>
            
            <tag> 排列组合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android 跳转至微博用户个人信息页面</title>
      <link href="/post/jump-to-show-user-info-in-weibo/"/>
      <url>/post/jump-to-show-user-info-in-weibo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近需要去实现应用内跳转至微博的个人信息页面（用户个人主页），其本质就是打开并跳转至第三方App指定的页面。显然，我们可以通过调用 <code>startActivity(intent)</code> 来实现该功能，其关键就是 <code>intent</code> 中需要携带哪些信息。 <a id="more"></a></p><h2 id="反编译-AndroidManifest-xml"><a href="#反编译-AndroidManifest-xml" class="headerlink" title="反编译 AndroidManifest.xml"></a>反编译 AndroidManifest.xml</h2><p>将新浪微博的apk文件中的 <code>AndroidManifest.xml</code> 文件解压提取出来，然后使用 <a href="https://code.google.com/archive/p/android4me/downloads" target="_blank" rel="noopener">AXMLPrinter2.jar</a> 对清单文件进行反编译：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar AXMLPrinter2.jar AndroidManifest.xml &gt; weibo.xml</span><br></pre></td></tr></table></figure></div><p>其中 <code>weibo.xml</code> 即反编译成功的清单文件。</p><h2 id="获取微博个人页-Activity"><a href="#获取微博个人页-Activity" class="headerlink" title="获取微博个人页 Activity"></a>获取微博个人页 Activity</h2><p>因为之前 <code>weibo.xml</code> 中的 <code>Activity</code> 过多，我们需要知道微博的用户个人信息页面对应的 <code>Activity</code> 全称。这里有两种方法：</p><ol><li>使用辅助App来获取当前的 Activity ，例如 <a href="http://coolapk.com/apk/com.toshiba.packagenamedetector" target="_blank" rel="noopener">当前界面(当前Activity)</a> ，具体用法这里就不介绍了。</li><li>使用 adb 命令获取当前 Activity： <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity activities | grep mFocusedActivity</span><br></pre></td></tr></table></figure></div></li></ol><p>当我们把新浪微博的个人信息页面切至前台时， adb 命令的结果为：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="SHELL"><figure class="highlight /shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mFocusedActivity: ActivityRecord&#123;9063f6f u0 com.sina.weibo/.page.ProfileInfoActivity t1578&#125;</span><br></pre></td></tr></table></figure></div><p>也就是说，新浪微博的个人信息页对应的 Activity 为 <code>com.sina.weibo.page.ProfileInfoActivity</code>, 那我们看 <code>weibo.xml</code> 中与该 Activity 对应的 xml 节点：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@7F0B0011"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.sina.weibo.page.ProfileInfoActivity"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">"0x000004A0"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:windowSoftInputMode</span>=<span class="string">"0x00000020"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>&gt;</span><span class="tag">&lt;/<span class="name">category</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>&gt;</span><span class="tag">&lt;/<span class="name">category</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"sinaweibo"</span> <span class="attr">android:host</span>=<span class="string">"userinfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>&gt;</span><span class="tag">&lt;/<span class="name">category</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>&gt;</span><span class="tag">&lt;/<span class="name">category</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> <span class="attr">android:host</span>=<span class="string">"weibo.cn"</span> <span class="attr">android:path</span>=<span class="string">"/qr/userinfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>&gt;</span><span class="tag">&lt;/<span class="name">category</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">"vnd.android.cursor.item/vnd.com.sina.weibo.profile"</span>&gt;</span><span class="tag">&lt;/<span class="name">data</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>上面的 xml 节点中，可以看到 <code>android:exported=&quot;true&quot;</code>，也就是说 <code>ProfileInfoActivity</code> 可以被外部程序调用打开。有三个 <code>intent-filter</code> 节点，其中第三个 <code>intent-filter</code> 与 <code>ContentProvider</code> 有关，可以忽略第三个只考虑前两个。<br>第一个 <code>intent-filter</code> 接受的 data 格式为 <code>sinaweibo:userinfo</code>， 第二个 <code>intent-filter</code> 接受的 data 格式为 <code>http://weibo.cn/qr/userinfo</code>。 我们通过 data 节点的数据可以判断除，第二个除了可以被新浪微博响应，也可以被浏览器之类的应用响应，但第一个只能被新浪微博响应，<strong>所以在使用第一个之前，需要判断新浪微博是否已经安装，否则会崩溃</strong>。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>通过查阅相关文档，<code>ProfileInfoActivity</code> 可以接受的参数为 <code>uid=xxx</code>, 也就是 <code>sinaweibo://userinfo?uid=xxx</code> 和 <code>http://weibo.cn/qr/userinfo?uid=xxx</code>，所以最终代码实现：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳转至微博个人页</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jumpToWeiboProfileInfo</span><span class="params">(Context context, String uid)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">    intent.addCategory(Intent.CATEGORY_DEFAULT);</span><br><span class="line">    intent.addCategory(Intent.CATEGORY_BROWSABLE);</span><br><span class="line">    <span class="keyword">boolean</span> weiboInstalled = PackageUtils.isSinaWeiboInstalled(context);</span><br><span class="line">    <span class="keyword">if</span> (weiboInstalled) &#123;</span><br><span class="line">        intent.setData(Uri.parse(<span class="string">"sinaweibo://userinfo?uid="</span> + uid));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        intent.setData(Uri.parse(<span class="string">"http://weibo.cn/qr/userinfo?uid="</span> + uid));</span><br><span class="line">    &#125;</span><br><span class="line">    context.startActivity(intent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PackageUtils.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">PackageUtils</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新浪微博是否安装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSinaWeiboInstalled</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isPackageInstalled(context, <span class="string">"com.sina.weibo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包名对应的App是否安装</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPackageInstalled</span><span class="params">(Context context, String packageName)</span> </span>&#123;</span><br><span class="line">        PackageManager packageManager = context.getPackageManager();</span><br><span class="line">        <span class="keyword">if</span> (packageManager == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        List&lt;PackageInfo&gt; packageInfoList = packageManager.getInstalledPackages(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(PackageInfo info : packageInfoList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (info.packageName.equals(packageName))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://beginor.github.io/2014/02/19/show-userinfo-with-sina-weibo.html" target="_blank" rel="noopener">调用新浪微博显示用户信息</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weibo </tag>
            
            <tag> Decompile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RecyclerView添加分割线</title>
      <link href="/post/add-divider-for-recyclerview/"/>
      <url>/post/add-divider-for-recyclerview/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>RecyclerView 并没有 divider 属性，但是我们可以通过 RecyclerView 的 addItemDecoration() 来添加分割线，该方法参数为 RecyclerView.ItemDecoration。 <a id="more"></a></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>当 RecyclerView 添加 ItemDecoration 后，RecyclerView 在绘制每个 item 的时候，会去绘制 decorator，也就是会调用 ItemDecoration 的 onDraw() 和 onDrawOver() 方法。</p><p>RecyclerView.ItemDecoration 是抽象类，主要提供三个方法：</p><ul><li>onDraw(Canvas c, RecyclerView parent, State state)： 在绘制item（drawChild） 前调用</li><li>onDrawOver(Canvas c, RecyclerView parent, State state): 在绘制item（drawChild） 后调用</li><li>getItemOffsets(Rect outRect, View view, RecyclerView parent, State state)：outRect设置 item 的偏移量，用于绘制 decorator（也就是divider）</li></ul><p>关于 getItemOffsets 函数：<br>RecyclerView 添加分割线，实际上就是 RecyclerView 的 item 之间添加了用作分割线的View，自然而然后续的 item 就会有偏移量，所以用 getItemOffsets 中的 outRect 来保存 item 的偏移量，从而便于绘制 decorator。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>实际上在当前版本的 <code>RecyclerView (25.3.1)</code> 中已经有 <code>ItemDecoration</code> 关于分割线的默认实现类 <code>DividerItemDecoration</code>:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> android.support.v7.widget;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Rect;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.ViewCompat;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.LinearLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DividerItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HORIZONTAL = LinearLayout.HORIZONTAL;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERTICAL = LinearLayout.VERTICAL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不设置，则默认的分割线为 android.R.attr.listDivider 指定的 drawable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123; android.R.attr.listDivider &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Drawable mDivider;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Current orientation. Either &#123;<span class="doctag">@link</span> #HORIZONTAL&#125; or &#123;<span class="doctag">@link</span> #VERTICAL&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mOrientation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Rect mBounds = <span class="keyword">new</span> Rect();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a divider &#123;<span class="doctag">@link</span> RecyclerView.ItemDecoration&#125; that can be used with a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> LinearLayoutManager&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context Current context, it will be used to access resources.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orientation Divider orientation. Should be &#123;<span class="doctag">@link</span> #HORIZONTAL&#125; or &#123;<span class="doctag">@link</span> #VERTICAL&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DividerItemDecoration</span><span class="params">(Context context, <span class="keyword">int</span> orientation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(ATTRS);</span><br><span class="line">        mDivider = a.getDrawable(<span class="number">0</span>);</span><br><span class="line">        a.recycle();</span><br><span class="line">        setOrientation(orientation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the orientation for this divider. This should be called if</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> RecyclerView.LayoutManager&#125; changes orientation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orientation &#123;<span class="doctag">@link</span> #HORIZONTAL&#125; or &#123;<span class="doctag">@link</span> #VERTICAL&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(<span class="keyword">int</span> orientation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (orientation != HORIZONTAL &amp;&amp; orientation != VERTICAL) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                    <span class="string">"Invalid orientation. It should be either HORIZONTAL or VERTICAL"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mOrientation = orientation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the &#123;<span class="doctag">@link</span> Drawable&#125; for this divider.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> drawable Drawable that should be used as a divider.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDrawable</span><span class="params">(@NonNull Drawable drawable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (drawable == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Drawable cannot be null."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mDivider = drawable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent.getLayoutManager() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL) &#123;</span><br><span class="line">            drawVertical(c, parent);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            drawHorizontal(c, parent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制 RecyclerView 为垂直布局时的分割线，此时分割线为水平分割线</span></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas canvas, RecyclerView parent)</span> </span>&#123;</span><br><span class="line">        canvas.save();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right;</span><br><span class="line">        <span class="comment">// 需要考虑clipToPadding的boolean值</span></span><br><span class="line">        <span class="keyword">if</span> (parent.getClipToPadding()) &#123;</span><br><span class="line">            left = parent.getPaddingLeft();</span><br><span class="line">            right = parent.getWidth() - parent.getPaddingRight();</span><br><span class="line">            canvas.clipRect(left, parent.getPaddingTop(), right,</span><br><span class="line">                    parent.getHeight() - parent.getPaddingBottom());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = <span class="number">0</span>;</span><br><span class="line">            right = parent.getWidth();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</span><br><span class="line">            parent.getDecoratedBoundsWithMargins(child, mBounds);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = mBounds.bottom + Math.round(ViewCompat.getTranslationY(child));</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = bottom - mDivider.getIntrinsicHeight();</span><br><span class="line">            mDivider.setBounds(left, top, right, bottom);</span><br><span class="line">            mDivider.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制 RecyclerView 为水平布局时的分割线，此时分割线为垂直分割线</span></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawHorizontal</span><span class="params">(Canvas canvas, RecyclerView parent)</span> </span>&#123;</span><br><span class="line">        canvas.save();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> top;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bottom;</span><br><span class="line">        <span class="comment">// 需要考虑clipToPadding的boolean值</span></span><br><span class="line">        <span class="keyword">if</span> (parent.getClipToPadding()) &#123;</span><br><span class="line">            top = parent.getPaddingTop();</span><br><span class="line">            bottom = parent.getHeight() - parent.getPaddingBottom();</span><br><span class="line">            canvas.clipRect(parent.getPaddingLeft(), top,</span><br><span class="line">                    parent.getWidth() - parent.getPaddingRight(), bottom);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            top = <span class="number">0</span>;</span><br><span class="line">            bottom = parent.getHeight();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</span><br><span class="line">            parent.getLayoutManager().getDecoratedBoundsWithMargins(child, mBounds);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = mBounds.right + Math.round(ViewCompat.getTranslationX(child));</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = right - mDivider.getIntrinsicWidth();</span><br><span class="line">            mDivider.setBounds(left, top, right, bottom);</span><br><span class="line">            mDivider.draw(canvas);</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent,</span></span></span><br><span class="line"><span class="function"><span class="params">            RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL) &#123; <span class="comment">// 垂直方向的RecyclerView, item 的 bottom 偏移量 = 分割线高度</span></span><br><span class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 水平方向的RecyclerView， item 的 right 偏移量 = 分割线宽度</span></span><br><span class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在代码中添加：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(recyclerView.getContext(), mLayoutManager.getOrientation()));</span><br></pre></td></tr></table></figure></div><p>就有了分割线。 默认的分割线效果是系统自带的 <code>listDivider</code> 的效果，我们也可以在主题配置文件中自定义全局的分割线，或者调用 <code>setDivider</code> 为每个 <code>RecyclerView</code> 设置单独的分割线。</p><h2 id="网络流行代码存在的问题"><a href="#网络流行代码存在的问题" class="headerlink" title="网络流行代码存在的问题"></a>网络流行代码存在的问题</h2><p>目前好多博客中关于 <code>DividerItemDecoration</code> 中 <code>drawVertical()</code> 和 <code>drawHorizontal()</code> 方法与官方的方法其实是有出入的：</p><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>{    <span class="keyword">final</span> <span class="keyword">int</span> left = parent.getPaddingLeft();    <span class="keyword">final</span> <span class="keyword">int</span> right = parent.getWidth() - parent.getPaddingRight();    <span class="comment">// 网上的方法最主要的问题是没有考虑 clipToPadding 这个参数，所以说这里缺少相应代码片段</span>    <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();    <span class="comment">// 下面这块没什么问题，和官方方案殊途同归</span>    <span class="comment">// 官方的getDecoratedBoundsWithMargins实际上也是通过 LayoutParams 来获取分割线边界的</span>    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) {        <span class="keyword">final</span> View child = parent.getChildAt(i);        <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child                .getLayoutParams();        <span class="keyword">final</span> <span class="keyword">int</span> top = child.getBottom() + params.bottomMargin;        <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();        mDivider.setBounds(left, top, right, bottom);        mDivider.draw(c);    }}<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawHorizontal</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>{    <span class="keyword">final</span> <span class="keyword">int</span> top = parent.getPaddingTop();    <span class="keyword">final</span> <span class="keyword">int</span> bottom = parent.getHeight() - parent.getPaddingBottom();    <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) {        <span class="keyword">final</span> View child = parent.getChildAt(i);        <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child                .getLayoutParams();        <span class="keyword">final</span> <span class="keyword">int</span> left = child.getRight() + params.rightMargin;        <span class="keyword">final</span> <span class="keyword">int</span> right = left + mDivider.getIntrinsicHeight();        mDivider.setBounds(left, top, right, bottom);        mDivider.draw(c);    }}</code></pre><p>注释中说的比较明确了，网上好多方法主要的问题在于 <strong>没有考虑 clipToPadding 属性值</strong> 。 <code>clipToPadding</code> 表示控件的绘制区域是否在 padding 区域外面，其默认值为 <code>true</code>。比如，垂直方向的 RecyclerView，当 <code>clipToPadding=false</code> 时，其初始绘制区域与 padding 值有关，但向上滑动时，RecylerView 的 item 会滑到 padding 区域里面。 </p><p>下面用示意图来进行解释，RecyclerView 的 <code>paddingTop = 40dp</code>, <code>clipToPadding = false</code>, 下图中白色区域为 <code>paddingTop</code> 区域：</p><img alt="初始状态下" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/demo-clipToPadding-init.png@!w400"><img alt="向上滑动" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/demo-clipToPadding-scroll.png@!w400"><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总的来说，目前添加分割线只需要使用 <code>recyclerview-v7</code> 包下的 <code>DividerItemDecoration</code> 类即可，分割线可以通过 setDivider 来个性化指定，也可以通过配置主题中的 <code>android:listDivider</code> 来全局指定。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/lmj623565791/article/details/45059587" target="_blank" rel="noopener">Android RecyclerView 使用完全解析 体验艺术般的控件</a><br><a href="http://www.jianshu.com/p/64a0021394bb" target="_blank" rel="noopener">RecyclerView系列之二：添加分隔线</a><br><a href="http://jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0317/2613.html" target="_blank" rel="noopener">android:clipToPadding和android:clipChildren</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Android Studio中使用Lambda表达式</title>
      <link href="/post/using-lambda-expression-in-Android-md/"/>
      <url>/post/using-lambda-expression-in-Android-md/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p> Lambda 表达式是 Java 8 的新特性之一，本文主要介绍如何让 Android 项目集成 Labmda 表达式功能。<a id="more"></a></p><p>已知的集成方式有两种：</p><ol><li>使用官方的 <a href="https://developer.android.com/guide/platform/j8-jack.html" target="_blank" rel="noopener">Jack 工具链</a> 启用Java 8 功能</li><li>使用第三方库 <a href="https://github.com/orfjackal/retrolambda" target="_blank" rel="noopener">Retrolambda</a> 启用 Java 8功能</li></ol><p>在本人使用过程中发现，通过 Jack 集成的方式，存在一些问题（不仅仅是官方声明的问题），所以在这里 <del>推荐使用 Retrolambda</del> 来集成 Lambda 功能。</p><blockquote><p><strong>2017-06-05 更新</strong>： 通过在不同的SDK版本上测试发现，Android M (api 23)以下版本中，不论是 Jack 还是 Retrolambda 的集成方式均会偶现 NoClassDefFoundError，并都没有成型的解决方案，所以以下诸君看看便可，不太能付诸实际项目中~ :(</p></blockquote><h2 id="官方Jack集成"><a href="#官方Jack集成" class="headerlink" title="官方Jack集成"></a>官方Jack集成</h2><p>在模块级别的 build.gradle 中配置：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="GROOVY"><figure class="highlight /groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    jackOptions &#123;  <span class="comment">// 开启 Jack</span></span><br><span class="line">      enabled <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  compileOptions &#123; <span class="comment">// 使用 Java 8 进行编译</span></span><br><span class="line">    sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>当然你首先得有 JDK 8 的开发环境。</p><h2 id="第三方Retrolambda集成"><a href="#第三方Retrolambda集成" class="headerlink" title="第三方Retrolambda集成"></a>第三方Retrolambda集成</h2><p>因为 Android Studio 使用 Gradle 作为构建工具，所以我们需要在集成 <a href="https://github.com/evant/gradle-retrolambda" target="_blank" rel="noopener">gradle-retrolambda</a> Gradle 插件：</p><ol><li><p>下载安装 JDK 8</p></li><li><p>在项目级别（项目根目录）的 build.gradle 中加入：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="GROOVY"><figure class="highlight /groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">    ...</span><br><span class="line">    mavenCentral() <span class="comment">// 加入 mavenCentral</span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        ...</span><br><span class="line">        classpath <span class="string">'me.tatarka:gradle-retrolambda:3.6.1'</span>  <span class="comment">// 将retrolambda加入classpath</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">allProjects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        ...</span><br><span class="line">        mavenCentral() <span class="comment">// 加入 mavenCentral</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>在模块级别的 build.gradle 中加入：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="GROOVY"><figure class="highlight /groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'me.tatarka.retrolambda'</span> <span class="comment">// 引入 retrolambda 插件</span></span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    compileOptions &#123; <span class="comment">// 使用 Java 8 进行编译</span></span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>在混淆文件中加入</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-dontwarn java.lang.invoke.*</span><br><span class="line">-dontwarn **$$Lambda$*</span><br></pre></td></tr></table></figure></div></li></ol><p>之后就可以愉快的使用 Lambda 表达式啦~</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Lambda Expression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FloatingActionButton的滚动隐藏和显示</title>
      <link href="/post/hide-and-show-fab-when-recyclerview-scrolls-md/"/>
      <url>/post/hide-and-show-fab-when-recyclerview-scrolls-md/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>FloatingActionButton（FAB）其实就是遵循了 <code>Material Design</code> 设计规范的并拥有特定动作行为的 <code>ImageButton</code>，基本用法参照 <code>ImageButton</code> 即可。 <a id="more"></a></p><p>比如说，可以在 <code>RecyclerView</code> 向下滚动的时候隐藏 <code>FAB</code>, 向上滚动的时候显示 <code>FAB</code>:</p><img alt="FAB演示动画" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/fab_hide_show_animation.gif"><p>那么，如何实现上面 FAB 的滚动隐藏和显示动画呢？</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们需要通过导入 <code>Design Support Library</code> 才能使用 FAB, 所以，需要在 <code>build.gradle</code> 中加入 <code>compile &#39;com.android.support:design:X.X.X&#39;</code> 其中 X 代表 Support Library 的版本。</p><p>一般来说，我们需要把 FAB 放在 <code>CoordinatorLayout</code> 布局中， <code>CoordinatorLayout</code> 可以看做为 <code>FrameLayout</code>，其特殊之处在于可以协调子控件的交互，其中就包括FAB的滚动隐藏和显示的动画。</p><p>那么，演示动画中的布局为：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="XML"><figure class="highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/recycler_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|end"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@drawable/ic_add_white"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">"com.tianma.recyclerviewsample.fab.FabScrollBehavior"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:elevation</span>=<span class="string">"4dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p><code>app:elevation</code> 属性表示 <code>FloatingActionButton</code> 悬浮的高度，高度越大，投影范围越大，投影效果越淡；高度越小，投影范围越小，投影效果越明显。</p><p><code>app:layout_behavior</code> 属性表示 <code>FloatingActionButton</code> 所实现的 <a href="httpss://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html" target="_blank" rel="noopener">CoordinatorLayout Behavior</a>, 这个属性指定的 <code>Behavior</code> 用于定义 <code>FloatingActionButton</code> 与在同一个 <code>CoordinatorLayout</code> 布局下的其他控件的交互方式。如果不指定自定义的 <code>Behavior</code>，那么<code>FloatingActionButton</code> 默认的 <code>Behavior</code> 是为 <code>Snackbar</code> 留出空间，详见 <a href="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/media/fab_default_behavior.webm" target="_blank" rel="noopener">演示视频</a></p><p>显然， FAB 默认的 Behavior 不能满足我们的需要，那么就需要自定义 Behavior 来实现 FAB 的滚动显示和隐藏动画：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianma.recyclerviewsample.fab;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.CoordinatorLayout;</span><br><span class="line"><span class="keyword">import</span> android.support.design.widget.FloatingActionButton;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.ViewCompat;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.animation.LinearInterpolator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FabScrollBehavior</span> <span class="keyword">extends</span> <span class="title">FloatingActionButton</span>.<span class="title">Behavior</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为需要在布局xml中引用，所以必须实现该构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FabScrollBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(<span class="keyword">final</span> CoordinatorLayout coordinatorLayout, <span class="keyword">final</span> FloatingActionButton child,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">final</span> View directTargetChild, <span class="keyword">final</span> View target, <span class="keyword">final</span> <span class="keyword">int</span> nestedScrollAxes)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 确保滚动方向为垂直方向</span></span><br><span class="line">        <span class="keyword">return</span> nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(<span class="keyword">final</span> CoordinatorLayout coordinatorLayout, <span class="keyword">final</span> FloatingActionButton child,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">final</span> View target, <span class="keyword">final</span> <span class="keyword">int</span> dxConsumed, <span class="keyword">final</span> <span class="keyword">int</span> dyConsumed,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">final</span> <span class="keyword">int</span> dxUnconsumed, <span class="keyword">final</span> <span class="keyword">int</span> dyUnconsumed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</span><br><span class="line">        <span class="keyword">if</span> (dyConsumed &gt; <span class="number">0</span>) &#123; <span class="comment">// 向下滑动</span></span><br><span class="line">            animateOut(child);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dyConsumed &lt; <span class="number">0</span>) &#123; <span class="comment">// 向上滑动</span></span><br><span class="line">            animateIn(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FAB移出屏幕动画（隐藏动画）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">animateOut</span><span class="params">(FloatingActionButton fab)</span> </span>&#123;</span><br><span class="line">        CoordinatorLayout.LayoutParams layoutParams = (CoordinatorLayout.LayoutParams) fab.getLayoutParams();</span><br><span class="line">        <span class="keyword">int</span> bottomMargin = layoutParams.bottomMargin;</span><br><span class="line">        fab.animate().translationY(fab.getHeight() + bottomMargin).setInterpolator(<span class="keyword">new</span> LinearInterpolator()).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// FAB移入屏幕动画（显示动画）</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">animateIn</span><span class="params">(FloatingActionButton fab)</span> </span>&#123;</span><br><span class="line">        fab.animate().translationY(<span class="number">0</span>).setInterpolator(<span class="keyword">new</span> LinearInterpolator()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述代码的关键就是找到 “隐藏动画” 和 “显示动画” 触发的时机，然后利用 “属性动画” 来实现对应的动画效果即可。</p><p>参考链接：<br><a href="https://guides.codepath.com/android/floating-action-buttons" target="_blank" rel="noopener">Floating Action Buttons Guides</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FloatingActionButton </tag>
            
            <tag> Material Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听RecyclerView是否滑动到底部</title>
      <link href="/post/detect-when-RecyclerView-reaches-the-bottom/"/>
      <url>/post/detect-when-RecyclerView-reaches-the-bottom/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近想动手实现 <code>RecyclerView</code> 的“自动加载更多”功能，即当 <code>RecyclerView</code> 滑动到底部时，执行加载更多操作。这里的关键在于，需要监听RecyclerView是否滑动到底部。 <a id="more"></a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><code>RecyclerView</code> 有 <code>addOnScrollListener(OnScrollListener)</code> 方法，可以为 <code>RecyclerView</code> 添加滚动监听，其中 <code>OnScrollListener</code> 有两个回调函数：</p><ul><li>onScrollStateChanges(RecyclerView recyclerView, int newState): 在 <code>RecyclerView</code> 的滚动状态发生改变时回调</li><li>onScrolled(RecyclerView recyclerView, int dx, int dy): 在 <code>RecyclerView</code> 滚动时回调</li></ul><p>在 <code>OnScrollListener</code> 回调中，可以获取RecyclerView的滚动状态，我们只需要通过继承 <code>OnScrollListener</code> 并复写上面的两个回调函数，便可以实现对 <code>RecyclerView</code> 滑动到底部的监听。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们先定义一个回调接口 <code>BottomListener</code> 用以监听控件是否滚动到底部：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BottomListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 滑动到底部时回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onScrollToBottom</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>然后，我们继承 <code>RecyclerView.OnScrollListener</code> 和实现 <code>BottomListener</code> ：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.support.v7.widget.GridLayoutManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.StaggeredGridLayoutManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现了RecyclerView滚动到底部监听的OnScrollListener</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RecyclerViewScrollListener</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">OnScrollListener</span> <span class="keyword">implements</span> <span class="title">BottomListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后几个完全可见项的位置（瀑布式布局会出现这种情况）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] lastCompletelyVisiblePositions;</span><br><span class="line">    <span class="comment">// 最后一个完全可见项的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lastCompletelyVisibleItemPosition;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">        RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();</span><br><span class="line">        <span class="comment">// 找到最后一个完全可见项的位置</span></span><br><span class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> StaggeredGridLayoutManager) &#123;</span><br><span class="line">            StaggeredGridLayoutManager manager = (StaggeredGridLayoutManager) layoutManager;</span><br><span class="line">            <span class="keyword">if</span> (lastCompletelyVisiblePositions == <span class="keyword">null</span>) &#123;</span><br><span class="line">                lastCompletelyVisiblePositions = <span class="keyword">new</span> <span class="keyword">int</span>[manager.getSpanCount()];</span><br><span class="line">            &#125;</span><br><span class="line">            manager.findLastCompletelyVisibleItemPositions(lastCompletelyVisiblePositions);</span><br><span class="line">            lastCompletelyVisibleItemPosition = getMaxPosition(lastCompletelyVisiblePositions);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> GridLayoutManager) &#123;</span><br><span class="line">            lastCompletelyVisibleItemPosition = ((GridLayoutManager) layoutManager).findLastCompletelyVisibleItemPosition();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> LinearLayoutManager) &#123;</span><br><span class="line">            lastCompletelyVisibleItemPosition = ((LinearLayoutManager) layoutManager).findLastCompletelyVisibleItemPosition();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unsupported LayoutManager."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMaxPosition</span><span class="params">(<span class="keyword">int</span>[] positions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = positions[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; positions.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (positions[i] &gt; max) &#123;</span><br><span class="line">                max = positions[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">        RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();</span><br><span class="line">        <span class="comment">// 通过比对 最后完全可见项位置 和 总条目数，来判断是否滑动到底部</span></span><br><span class="line">        <span class="keyword">int</span> visibleItemCount = layoutManager.getChildCount();</span><br><span class="line">        <span class="keyword">int</span> totalItemCount = layoutManager.getItemCount();</span><br><span class="line">        <span class="keyword">if</span> (newState == RecyclerView.SCROLL_STATE_IDLE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visibleItemCount &gt; <span class="number">0</span> &amp;&amp; lastCompletelyVisibleItemPosition &gt;= totalItemCount - <span class="number">1</span>) &#123;</span><br><span class="line">                onScrollToBottom();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollToBottom</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述大体思路就是： 找到 “最后完全可见项的位置(lastCompletelyVisibleItemPosition)”，通过比较 lastCompletelyVisibleItemPosition 是否是 <code>RecyclerView</code> 最后一项，来判断是否滑动到底部。</p><p>在 <code>RecyclerView</code> 上应用加载更多：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">recyclerView.addOnScrollListener(<span class="keyword">new</span> RecyclerViewScrollListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollToBottom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 加载更多</span></span><br><span class="line">                doLoadMore();     </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLoadMore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO load more</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>参考链接：<br><a href="http://www.cnblogs.com/tianzhijiexian/p/4397552.html" target="_blank" rel="noopener">通过重写OnScrollListener来监听RecyclerView是否滑动到底部</a></p><p><strong>特别注意</strong><br>个人认为上面的参考链接中给出的方案是有待商榷的，原博主计算的是 “最后一个可见项的位置（lastVisibleItemPosition）”，而本文中计算的是 “最后一个完全可见项的位置(lastCompletelyVisibleItemPosition)” , 很明显 <code>RecyclerView</code> 列表中最后一个元素可见的时候，<code>RecyclerView</code> 并不一定滑动到最底部了。当然了，具体采取哪种方案，需要根据实际需求来确定。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecyclerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射修改final修饰的属性值</title>
      <link href="/post/change-static-final-field-in-Java/"/>
      <url>/post/change-static-final-field-in-Java/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>之前在阅读其他源码的时候，想要修改其中被 final 修饰符修饰的字段的值，可行吗？&nbsp;<a id="more"></a></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>使用Java反射，通过 <code>Field#setAccessible(true)</code> 将 private 修饰的字段变为 accessible；再将 final 修饰符去掉；最后再设置新值即可。当然，如果涉及到 Java 内联优化，则会失效。具体见示例代码：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tianma.sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeStaticFinalFieldSample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeStaticFinal</span><span class="params">(Field field, Object newValue)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>); <span class="comment">// 如果field为private,则需要使用该方法使其可被访问</span></span><br><span class="line"></span><br><span class="line">Field modifersField = Field.class.getDeclaredField(<span class="string">"modifiers"</span>);</span><br><span class="line">modifersField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 把指定的field中的final修饰符去掉</span></span><br><span class="line">modifersField.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line"></span><br><span class="line">field.set(<span class="keyword">null</span>, newValue); <span class="comment">// 为指定field设置新值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Sample.print();</span><br><span class="line"></span><br><span class="line">Field canChangeField = Sample.class.getDeclaredField(<span class="string">"CAN_CHANGE"</span>);</span><br><span class="line">Field cannotChangeField = Sample.class.getDeclaredField(<span class="string">"CANNOT_CHANGE"</span>);</span><br><span class="line">changeStaticFinal(canChangeField, <span class="number">2</span>);</span><br><span class="line">changeStaticFinal(cannotChangeField, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">Sample.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sample</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAN_CHANGE = <span class="keyword">new</span> Integer(<span class="number">1</span>); <span class="comment">// 未内联优化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANNOT_CHANGE = <span class="number">1</span>; <span class="comment">// 内联优化</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"CAN_CHANGE = "</span> + CAN_CHANGE);</span><br><span class="line">System.out.println(<span class="string">"CANNOT_CHANGE = "</span> + CANNOT_CHANGE);</span><br><span class="line">System.out.println(<span class="string">"------------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>打印结果为：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CAN_CHANGE = <span class="number">1</span></span><br><span class="line">CANNOT_CHANGE = <span class="number">1</span></span><br><span class="line">------------------------</span><br><span class="line">CAN_CHANGE = <span class="number">2</span></span><br><span class="line">CANNOT_CHANGE = <span class="number">1</span></span><br><span class="line">------------------------</span><br></pre></td></tr></table></figure></div><p>通过以上输出结果可以看出， <code>CAN_CHANGE</code> 和 <code>CANNOT_CHANGE</code> 字段同属于 final 修饰符修饰的常量字段，但是由于 <code>CANNOT_CHANGE</code> 常量在 Java 编译过程中使用了内联优化，其值在编译阶段就被编译为常量值 <code>1</code>，故而使用内联优化的 final 字段更改其值是无效的； 而 <code>CAN_CHANGE</code> 字段未被内联优化，故而能通过 Java 反射对其值进行修改。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://stackoverflow.com/questions/3301635/change-private-static-final-field-using-java-reflection" target="_blank" rel="noopener">Change private static final field using Java reflection</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>处理PopupWindow在Android 7.x中兼容性问题</title>
      <link href="/post/PopupWindow-compat-on-Android-N/"/>
      <url>/post/PopupWindow-compat-on-Android-N/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>PopupWindow 中的 showAsDropDown(View anchor) 用于在指定锚点View下方显示 PopupWindow，在Android 7.0 (api&lt;=23) 以前是没什么问题的，但是在Android 7.x系统上，会在某些情况下出现兼容问题：</p><ol><li>如果指定 PopupWindow 的高度为 MATCH_PARENT，调用 showAsDropDown(View anchor) 时，在 7.0 之前，会在锚点 anchor 下边缘到屏幕底部之间显示 PopupWindow；而在 7.0、7.1 系统上的 PopupWindow 会占据整个屏幕（除状态栏之外）。</li><li>如果指定 PopupWindow 的高度为 WRAP_CONTENT, 调用 showAsDropDown(View anchor) 时，便不会出现兼容性的问题。</li><li>如果指定 PopupWindow 的高度为自定义的值height，调用 showAsDropDown(View anchor)时， 如果 height &gt; 锚点 anchor 下边缘与屏幕底部的距离， 则还是会出现7.0、7.1上显示异常的问题；否则，不会出现该问题。可以看出，情况1和2是情况3的特例。</li></ol><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>如果出现上述分析中的兼容性问题，可以使用 showAtLocation() 方法替代 showAsDropDown() , 示例代码如下，详情可参见 <a href="https://github.com/tianma8023/PopupWindowCompat/blob/master/app/src/main/java/com/tianma/popupwindowsample/MainActivity.java" target="_blank" rel="noopener">PopupWindowCompatSample</a></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">24</span>) &#123; <span class="comment">// Android 7.x中,PopupWindow高度为match_parent时,会出现兼容性问题,需要处理兼容性</span></span><br><span class="line">    <span class="keyword">int</span>[] location = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>]; <span class="comment">// 记录anchor在屏幕中的位置</span></span><br><span class="line">    anchor.getLocationOnScreen(location);</span><br><span class="line">    <span class="keyword">int</span> offsetY = location[<span class="number">1</span>] + anchor.getHeight();</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT == <span class="number">25</span>) &#123; <span class="comment">// Android 7.1中，PopupWindow高度为 match_parent 时，会占据整个屏幕</span></span><br><span class="line">        <span class="comment">// 故而需要在 Android 7.1上再做特殊处理</span></span><br><span class="line">        <span class="keyword">int</span> screenHeight = ScreenUtils.getScreenHeight(context); <span class="comment">// 获取屏幕高度</span></span><br><span class="line">        popupWindow.setHeight(screenHeight - offsetY); <span class="comment">// 重新设置 PopupWindow 的高度</span></span><br><span class="line">    &#125;</span><br><span class="line">    popupWindow.showAtLocation(anchor, Gravity.NO_GRAVITY, <span class="number">0</span>, offsetY);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    popupWindow.showAsDropDown(anchor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PopupWindow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消除Android 5.0 ~ 7.1.1原生系统中感叹号或叉号</title>
      <link href="/post/remove-network-cross-above-lollipop/"/>
      <url>/post/remove-network-cross-above-lollipop/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在使用Android5.0以上的原生系统过程中，大家会遇到明明自己网络是OK的，但是会在状态栏的移动信号或 WiFi 图标旁显示感叹号（5.0 ~ 7.0.0）或叉号（7.1.1），并且会提示“已连接，但不能接入互联网”的情况…</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>从Android 5.0开始，系统连接网络或切换网络时，系统模块 NetworkMonitor 会向一特定网址发送数据请求，根据响应的结果从而判断网络的连通性。在原生Android系统中，这一特定网址是Google的网址，不翻墙访问不了，故而会出现感叹号或叉号。</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>既然知晓了原理，那么解决方案也很明确了：</p><ol><li><p>完全关闭网络检查服务（不可取）：</p> <div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global captive_portal_detection_enabled 0</span><br></pre></td></tr></table></figure></div><p> 缺点：&nbsp; 完全屏蔽该系统功能带来明显的问题，当你使用公共 Wi-Fi 这种需要使用 portal 验证的网络时，因为网络检查被关闭，系统在访问 portal 验证页面时无法返回正确的值，最终导致无法完成验证和上网。</p></li><li><p><strong>替换检查网络的网址（可取）：</strong><br> 通过ADB命令，将验证服务的网址替换为国内正常可以访问的网址</p></li></ol><h3 id="Android-5-x-6-x-解决方案"><a href="#Android-5-x-6-x-解决方案" class="headerlink" title="Android 5.x ~ 6.x 解决方案"></a>Android 5.x ~ 6.x 解决方案</h3><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell &quot;settings put global captive_portal_server www.v2ex.com&quot;</span><br><span class="line">adb shell reboot</span><br></pre></td></tr></table></figure></div><h3 id="Android-7-0-0-7-1-0-解决方案"><a href="#Android-7-0-0-7-1-0-解决方案" class="headerlink" title="Android 7.0.0 ~ 7.1.0 解决方案"></a>Android 7.0.0 ~ 7.1.0 解决方案</h3><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell &quot;settings put global captive_portal_server captive.v2ex.co&quot;</span><br><span class="line">adb shell reboot</span><br></pre></td></tr></table></figure></div><h3 id="Android-7-1-1-解决方案"><a href="#Android-7-1-1-解决方案" class="headerlink" title="Android 7.1.1 解决方案"></a>Android 7.1.1 解决方案</h3><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell &quot;settings put global captive_portal_https_url https://captive.v2ex.co/generate_204&quot;</span><br><span class="line">adb shell reboot</span><br></pre></td></tr></table></figure></div><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>问题解决了，问题产生的根本源头在哪呢，在源码里面 :)</p><h3 id="Android-5-x-6-x"><a href="#Android-5-x-6-x" class="headerlink" title="Android 5.x ~ 6.x"></a>Android 5.x ~ 6.x</h3><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">isCaptivePortal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mIsCaptivePortalCheckEnabled) <span class="keyword">return</span> <span class="number">204</span>;</span><br><span class="line">    HttpURLConnection urlConnection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> httpResponseCode = <span class="number">599</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http"</span>, mServer, <span class="string">"/generate_204"</span>);</span><br><span class="line">        <span class="keyword">if</span> (DBG) &#123;</span><br><span class="line">            log(<span class="string">"Checking "</span> + url.toString() + <span class="string">" on "</span> +</span><br><span class="line">                    mNetworkAgentInfo.networkInfo.getExtraInfo());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>原来的 <code>mServer</code> 是 <code>clients3.google.com</code>，我们最终将其换为 <code>www.v2ex.com</code>.</p><h3 id="Android-7-0-7-1-0"><a href="#Android-7-0-7-1-0" class="headerlink" title="Android 7.0 ~ 7.1.0"></a>Android 7.0 ~ 7.1.0</h3><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getCaptivePortalServerUrl</span><span class="params">(Context context, <span class="keyword">boolean</span> isHttps)</span> </span>&#123;</span><br><span class="line">    String server = Settings.Global.getString(context.getContentResolver(),</span><br><span class="line">            Settings.Global.CAPTIVE_PORTAL_SERVER);</span><br><span class="line">    <span class="keyword">if</span> (server == <span class="keyword">null</span>) server = DEFAULT_SERVER;</span><br><span class="line">    <span class="keyword">return</span> (isHttps ? <span class="string">"https"</span> : <span class="string">"http"</span>) + <span class="string">"://"</span> + server + <span class="string">"/generate_204"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Android 7.0 ~ 7.1.0 新增了https的验证请求，所以我们把 <code>server</code> 的值改为支持https的 <code>captive.v2ex.co</code>.</p><h3 id="Android-7-1-1"><a href="#Android-7-1-1" class="headerlink" title="Android 7.1.1"></a>Android 7.1.1</h3><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getCaptivePortalServerHttpsUrl</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getSetting(context, Settings.Global.CAPTIVE_PORTAL_HTTPS_URL, DEFAULT_HTTPS_URL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>DEFAULT_HTTPS_URL</code> 的值由原来的 <code>https://www.google.com/generate_204</code> 替换为 <code>https://captive.v2ex.co/generate_204</code>.</p><p>源码链接：<br><a href="https://android.googlesource.com/platform/frameworks/base/+/android-5.0.0_r1/services/core/java/com/android/server/connectivity/NetworkMonitor.java#584" target="_blank" rel="noopener">5.x ~ 6.x</a><br><a href="https://android.googlesource.com/platform/frameworks/base/+/android-7.0.0_r1/services/core/java/com/android/server/connectivity/NetworkMonitor.java#691" target="_blank" rel="noopener">7.0.0 ~ 7.1.0</a><br><a href="https://android.googlesource.com/platform/frameworks/base/+/android-7.1.1_r1/services/core/java/com/android/server/connectivity/NetworkMonitor.java#611" target="_blank" rel="noopener">7.1.1</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玩机 </tag>
            
            <tag> Android 5.x </tag>
            
            <tag> Android 6.x </tag>
            
            <tag> Android 7.x </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监听Android设备网络变化</title>
      <link href="/post/android-monitor-network-changes/"/>
      <url>/post/android-monitor-network-changes/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>在实际开发中，我们不可避免地需要对请求错误进行处理，通常情况下，我们会这样去处理错误请求：</p><ol><li>没有网络的情况下，提示用户网络连接不可用，引导用户打开网络或重新刷新等</li><li>有网络的情况下，则是客户端或服务端的错误，给用户相应的提示</li></ol><p>如果针对第一种情况,我们需要在网络恢复的时候重新刷新数据或进行其他操作,又应该如何实现呢？以下就是我们的目标：</p><ul><li>监听Android设备网络状态</li><li>在网络状态发生改变时,做出相应操作</li></ul><p>在示例中，我们在网络状态发生变化时，显示当前网络变化的类型。</p><a id="more"></a><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在Android系统在网络变化的情况下，会发出 action 为 <code>ConnectivityManager.CONNECTIVITY_ACTION</code> 的系统广播，我们只需要注册 <code>BroadcastReceiver</code> 去监听该广播即可监听设备的网络变化情况。</p><p>那么，注册  <code>BroadcastReceiver</code> 是静态注册呢，还是动态注册呢？</p><ul><li>静态注册：通常来讲，退出应用后，该应用仍然能够接收到相应的广播</li><li>动态注册：随着所在Context或应用被销毁后，不会收到相应的广播</li></ul><p><strong>注意</strong>：针对静态注册，这里是用“通常来讲”来修饰的，也就是说，存在特殊情况，即：存在即使使用静态注册，也不会收到相应的广播的情况：</p><blockquote><p>Android3.1之后，系统为了加强了安全性控制，应用程序安装后或是(设置)应用管理中被强制关闭后处于stopped状态，在这种状态下接收不到任何广播，除非广播带有 <code>FLAG_INCLUDE_STOPPED_PACKAGES</code> 标志，而默认所有系统广播都是 <code>FLAG_EXCLUDE_STOPPED_PACKAGES</code> 的，所以就没法通过系统广播自启动了。 这其中就包括 <code>ConnectivityManager.CONNECTIVITY_ACTION</code> 。<br>关于这一块的内容，不是本篇重点，欲了解详情，请移步<a href="http://www.trinea.cn/android/android-boot_completed-not-work/" target="_blank" rel="noopener">Android应用为何开机自启动、自启动失败原因</a></p></blockquote><p>另外，Android 7.0 移除了三个隐式广播(<a href="https://developer.android.google.cn/about/versions/nougat/android-7.0-changes.html#bg-opt" target="_blank" rel="noopener">Android 7.0 行为变更</a>)，其中就包括 <code>ConnectivityManager.CONNECTIVITY_ACTION</code> , 这意味着通过静态注册 <code>BroadcastReceiver</code> 来监听该广播的方式在 <code>targetSdkVersion &gt;= 24</code> 版本上不再生效，如何解决这一问题请移步 <a href="http://relex.me/android-7-connectivity_action/" target="_blank" rel="noopener">Android 7.0 网络变化监听</a>。</p><p>所以，这里采取动态注册 <code>BroadcastReceiver</code> 的方式。那么，应该在哪里动态注册呢？这里有两种思路：</p><p>思路1：</p><blockquote><ul><li>定义 <code>BroadcastReceiver</code> 监听网络状态，并提供回调接口 <code>NetStateChangeObserver</code> 用以回调网络状态的变化 </li><li>抽象出 <code>BaseActivity</code> ，提供注册/取消注册 <code>BroadcastReceiver</code> 的方法，并实现 <code>NetStateChangeObserver</code></li><li>需要监听网络状态的 <code>Activity</code> 调用 <code>BaseActivity</code> 提供的方法即可 </li></ul></blockquote><p>思路2：</p><blockquote><ul><li>定义 <code>BroadcastReceiver</code> 监听网络状态，并提供回调接口 <code>NetStateChangeObserver</code> 用以回调网络状态的变化，并在 <code>BroadcastReceiver</code> 中维护 <code>NetStateChangeObserver</code> 列表，当网络发生变化则通知这些 Observer ，实现回调。</li><li>在 <code>Application</code> 中注册/取消注册 <code>BroadcastReceiver</code></li><li>抽象 <code>BaseActivity</code> ，提供注册/取消注册 <code>NetStateChangeObserver</code> 观察者的方法， 并实现 <code>NetStateChangeObserver</code></li><li>需要监听网络状态的 <code>Activity</code> 调用 <code>BaseActivity</code> 提供的方法即可</li></ul></blockquote><p>上面的两种思路，比较重要的区别在于，第1中是在 <code>Activity</code> 中注册 <code>BroadcastReceiver</code> , 后者是在 <code>Application</code> 中注册 <code>BroadcastReceiver</code>。前者需要多次注册 <code>BroadcastReceiver</code> 而后者只注册一次，所以在这里选择第2中思路。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h4 id="添加权限"><a href="#添加权限" class="headerlink" title="添加权限"></a>添加权限</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span><br></pre></td></tr></table></figure></div><h4 id="定义网络类型"><a href="#定义网络类型" class="headerlink" title="定义网络类型"></a>定义网络类型</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> NetworkType &#123;</span><br><span class="line"></span><br><span class="line">    NETWORK_WIFI(<span class="string">"WiFi"</span>),</span><br><span class="line">    NETWORK_4G(<span class="string">"4G"</span>),</span><br><span class="line">    NETWORK_3G(<span class="string">"3G"</span>),</span><br><span class="line">    NETWORK_2G(<span class="string">"2G"</span>),</span><br><span class="line">    NETWORK_UNKNOWN(<span class="string">"Unknown"</span>),</span><br><span class="line">    NETWORK_NO(<span class="string">"No network"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">    NetworkType(String desc) &#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="定义观察者"><a href="#定义观察者" class="headerlink" title="定义观察者"></a>定义观察者</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 网络状态变化观察者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NetStateChangeObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNetDisconnected</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onNetConnected</span><span class="params">(NetworkType networkType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="实现-BroadcastReceiver"><a href="#实现-BroadcastReceiver" class="headerlink" title="实现 BroadcastReceiver"></a>实现 BroadcastReceiver</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听网络状态变化的BroadcastReceiver</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NetStateChangeReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> NetStateChangeReceiver INSTANCE = <span class="keyword">new</span> NetStateChangeReceiver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;NetStateChangeObserver&gt; mObservers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NetStateChangeReceiver</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ConnectivityManager.CONNECTIVITY_ACTION.equals(intent.getAction())) &#123;</span><br><span class="line">            NetworkType networkType = NetworkUtils.getNetworkType(context);</span><br><span class="line">            notifyObservers(networkType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册网络监听</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerReceiver</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);</span><br><span class="line">        context.registerReceiver(InstanceHolder.INSTANCE, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消网络监听</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unregisterReceiver</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">        context.unregisterReceiver(InstanceHolder.INSTANCE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册网络变化Observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(NetStateChangeObserver observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (observer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (!InstanceHolder.INSTANCE.mObservers.contains(observer)) &#123;</span><br><span class="line">            InstanceHolder.INSTANCE.mObservers.add(observer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消网络变化Observer的注册</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unregisterObserver</span><span class="params">(NetStateChangeObserver observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (observer == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (InstanceHolder.INSTANCE.mObservers == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        InstanceHolder.INSTANCE.mObservers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知所有的Observer网络状态变化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">(NetworkType networkType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (networkType == NetworkType.NETWORK_NO) &#123;</span><br><span class="line">            <span class="keyword">for</span>(NetStateChangeObserver observer : mObservers) &#123;</span><br><span class="line">                observer.onNetDisconnected();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(NetStateChangeObserver observer : mObservers) &#123;</span><br><span class="line">                observer.onNetConnected(networkType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="Application-注册-BroadcastReceiver"><a href="#Application-注册-BroadcastReceiver" class="headerlink" title="Application 注册 BroadcastReceiver"></a>Application 注册 BroadcastReceiver</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppContext</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// 注册BroadcastReceiver</span></span><br><span class="line">        NetStateChangeReceiver.registerReceiver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTerminate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onTerminate();</span><br><span class="line">        <span class="comment">// 取消BroadcastReceiver注册</span></span><br><span class="line">        NetStateChangeReceiver.unregisterReceiver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="BaseActivity-抽取"><a href="#BaseActivity-抽取" class="headerlink" title="BaseActivity 抽取"></a>BaseActivity 抽取</h4><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">NetStateChangeObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        <span class="keyword">if</span> (needRegisterNetworkChangeObserver()) &#123;</span><br><span class="line">            NetStateChangeReceiver.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        <span class="keyword">if</span> (needRegisterNetworkChangeObserver()) &#123;</span><br><span class="line">            NetStateChangeReceiver.unregisterObserver(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否需要注册网络变化的Observer,如果不需要监听网络变化,则返回false;否则返回true.默认返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">needRegisterNetworkChangeObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNetDisconnected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNetConnected</span><span class="params">(NetworkType networkType)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>需要实现网络监听的 Activity 只需要复写 <code>needRegisterNetworkChangeObserver</code> 并返回 true ，并复写相关回调函数即可。</p><p>github源码地址:<br><a href="https://github.com/tianma8023/NetDetector" target="_blank" rel="noopener">NetDetector</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络监测 </tag>
            
            <tag> network monitor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/hello-world/"/>
      <url>/post/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>Hello World&nbsp; :) &nbsp; <a id="more"></a></p><p>Welcome to my blog, have a nice day!&nbsp; ^_^</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><ul><li>Everthing will be okay in the end. If it’s not okay, it’s not the end.</li><li>有志者 事竟成 破釜沉舟 百二秦关终属楚<br>苦心人 天不负 卧薪尝胆 三千越甲可吞吴</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 漫谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello-World </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费ShadowSocks账号</title>
      <link href="/post/free-shadowsocks-account/"/>
      <url>/post/free-shadowsocks-account/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="免费提供SS账号的网站"><a href="#免费提供SS账号的网站" class="headerlink" title="免费提供SS账号的网站"></a>免费提供SS账号的网站</h2><p>在这里我列出几个免费提供SS账户的网站：</p><ul><li><a href="http://freessr.top/" target="_blank" rel="noopener">免费ShadowSocks账号</a></li><li><a href="http://freevpnss.cc/" target="_blank" rel="noopener">世界那么大，我想去看看</a></li><li><a href="http://www.getshadowsocks.com/" target="_blank" rel="noopener">SS</a></li><li><a href="http://www.ishadowsocks.org/" target="_blank" rel="noopener">ISS</a></li></ul><p>这里需要注意的是：</p><ol><li>以上这些网站提供的ss账号都会不断更新的，所以如果你使用这些免费的服务的话，可能需要及时更新。当然了，如果你是Programmer，你当然可以写脚本去爬取了对吧 :)</li><li>如果这些网站访问不了，可能是换网址了 or 被墙了 or 其他不可抗力的原因…</li></ol><a id="more"></a><h2 id="搭建自己的梯子"><a href="#搭建自己的梯子" class="headerlink" title="搭建自己的梯子"></a>搭建自己的梯子</h2><p>之前是自己在网上找的免费的SS账户，这些免费的SS账户虽然可以提供免费的科学上网服务，但是不是特别稳定。再者，如果你对网络安全性比较在意的话，可能你需要考虑自己搭梯子了。<br>所以，我就自己自己搭建了梯子，我采取的方案是VPS+ShadowSocks，VPS需要自己购买，我用的是搬瓦工的VPS，这里给个链接<a href="https://bandwagonhost.com/" target="_blank" rel="noopener">Mass VPS hosting on Enterprise equipment - Bandwagon Host</a>,按月付的话最便宜的是2.99刀，当然了如果年付的话就更便宜了。当然了，还有其他的VPS提供商供大家选择，由于我没有尝试其他的，就不在这里列出来了。<br>具体搭梯子的教程网上有很多，在这里贴几个：</p><ul><li><a href="http://itcoding.tk/2016/06/04/fuckGFW01/" target="_blank" rel="noopener">搭建自己的Shadowsocks服务器</a></li><li><a href="http://felixqu.com/2014/06/23/setup-shadowsocks-on-ubuntu/" target="_blank" rel="noopener">在 Ubuntu 服务器上部署 shadowsocks</a></li><li><a href="http://wuchong.me/blog/2015/02/02/shadowsocks-install-and-optimize/" target="_blank" rel="noopener">科学上网之 Shadowsocks 安装及优化加速</a></li><li><a href="http://gooday.xyz/shadowsocks%E4%BC%98%E5%8C%96%E5%8A%A0%E9%80%9F/" target="_blank" rel="noopener">ss优化加速 - 需翻墙</a><br>如果感觉以上链接不太适合你的话，利用搜索引擎，多找找吧 :)</li></ul><h2 id="免费SS账户"><a href="#免费SS账户" class="headerlink" title="免费SS账户"></a>免费SS账户</h2><p>在这里我把我搭的SS Server的账号提供出来，反正流量比较多，造福下大家咯。当然了，如果它不生效了，恕不通知哈。可能是没再续费了，也可能是换账号了，etc. </p><table id="free-shadowsocks-account"><thead><tr style="text-align:center"><th>服务器地址</th><th>服务器端口</th><th>密码</th><th>加密方式</th></tr></thead><tbody><tr style="text-align:center"><td><s>23.106.158.190</s></td><td><s>55501</s></td><td><s>zljw5501</s></td><td><s>aes-256-cfb</s></td></tr></tbody></table><blockquote><p>2017-06-16 更新： 因为近期 SS 流量已耗至90+%，日耗流量达100+G，故上面的 SS 账号已停止使用，抱歉~ </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 科学上网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShadowSocks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-快速排序及其优化</title>
      <link href="/post/sort-quick-sort/"/>
      <url>/post/sort-quick-sort/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>快速排序是交换类排序，采用分治思想，其基本原理是：通过一趟排序，将待排序数组分割成独立的两部分，其中一部分的关键字均比另一部分小；然后再分别对这两部分序列递归进行快速排序，从而使整个序列有序。 <a id="more"></a></p><p>具体算法步骤：</p><ol><li>在待排序的记录序列中选取一个记录作为枢轴(pivot)；</li><li>通过一趟排序，将所有小于枢轴的记录都移到枢轴的左边，将所有大于枢轴的记录都移到枢轴的右边，其实就是将当前待排序序列分为两部分，左边部分的记录均小于右边部分的记录，这样的操作叫做partition(分割)，分割操作结束后，枢轴所处的位置就是最终排序后它所处的位置；</li><li>对枢轴左右两边的子序列重复步骤1和2，直至所有子记录序列只剩下一个记录为止。</li></ol><p>以上步骤中，关键点是 1. 枢轴(pivot)的选取方式； 2. 对分割操作(partition)的细节处理。</p><h2 id="未优化的快速排序"><a href="#未优化的快速排序" class="headerlink" title="未优化的快速排序"></a>未优化的快速排序</h2><ol><li>枢轴的选取：将待排序序列的第1个记录作为枢轴；</li><li>分割操作 ： 分割操作中使用到了交换；</li></ol><p><strong><em>Java实现</em></strong></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组按升序排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组arr中的第i个位置和第j个位置的关键字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未优化的快速排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSorter</span> <span class="keyword">implements</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对数组arr[low...high]的子序列作快速排序，使之有序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivotLoc; <span class="comment">// 记录枢轴(pivot)所在位置</span></span><br><span class="line"><span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">pivotLoc = partition(arr, low, high); <span class="comment">// 将arr[low...high]一分为二,并返回枢轴位置</span></span><br><span class="line"></span><br><span class="line">quickSort(arr, low, pivotLoc - <span class="number">1</span>);<span class="comment">// 递归遍历arr[low...pivotLoc-1]</span></span><br><span class="line">quickSort(arr, pivotLoc + <span class="number">1</span>, high); <span class="comment">// 递归遍历arr[pivotLoc+1...high]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在arr[low...high]选定pivot=arr[low]作为枢轴（中间位置），将arr[low...high]分成两部分，</span></span><br><span class="line"><span class="comment"> * 前半部分的子序列的记录均小于pivot，后半部分的记录均大于pivot;最后返回pivot的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivot;</span><br><span class="line">pivot = arr[low]; <span class="comment">// 将arr[low]作为枢轴</span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high) &#123; <span class="comment">// 从数组的两端向中间扫描 // A</span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot) &#123;  <span class="comment">// B</span></span><br><span class="line">high--;</span><br><span class="line">&#125;</span><br><span class="line">swap(arr, low, high); <span class="comment">// 将比枢轴pivot小的元素交换到低位 // C</span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot) &#123; <span class="comment">//D</span></span><br><span class="line">low++;</span><br><span class="line">&#125;</span><br><span class="line">swap(arr, low, high); <span class="comment">// 将比枢轴pivot大的元素交换到高位 // E</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> low; <span class="comment">// 返回一趟下来后枢轴pivot所在的位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong><em>演示</em></strong><br>为了方便演示，我对上面代码中的分割操作partition方法的代码进行了标注（分别标注为 A,B,C,D,E）。<br>对于待排序序列 {5, 1, 9,  3, 7, 4, 8, 6, 2}，我们来演示其第一趟排序过程：</p><p>low = 0, high = 8, pivot = arr[low] = 5;</p><ul><li><p>A处，low = 0, high = 8, low&lt;high，进行A循环；</p></li><li><p>B处，high的值不断递减，直至arr[high] = 2 小于pivot，跳出B循环：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pivot</span><br><span class="line">↓</span><br><span class="line">5  1  9  3  7  4  8  6  2</span><br><span class="line">↑                       ↑</span><br><span class="line">low                    high</span><br></pre></td></tr></table></figure></div></li><li><p>C处，执行low和high的元素交换：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                      pivot</span><br><span class="line">                        ↓</span><br><span class="line">2  1  9  3  7  4  8  6  5</span><br><span class="line">↑                       ↑</span><br><span class="line">low                    high</span><br></pre></td></tr></table></figure></div></li><li><p>D处，low的值不断递增，直至arr[low] = 9 大于 pivot，跳出D循环:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                      pivot</span><br><span class="line">                        ↓</span><br><span class="line">2  1  9  3  7  4  8  6  5</span><br><span class="line">      ↑                 ↑</span><br><span class="line">     low              high</span><br></pre></td></tr></table></figure></div></li><li><p>E处，执行low和high的元素交换：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    pivot</span><br><span class="line">      ↓</span><br><span class="line">2  1  5  3  7  4  8  6  9</span><br><span class="line">      ↑                 ↑</span><br><span class="line">     low              high</span><br></pre></td></tr></table></figure></div></li><li><p>A处，low =2, high = 8, low &lt; high，继续循环A；</p></li><li><p>B处，high的值不断递减，直至arr[high] = 4 小于pivot，跳出B循环：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    pivot</span><br><span class="line">      ↓</span><br><span class="line">2  1  5  3  7  4  8  6  9</span><br><span class="line">      ↑        ↑</span><br><span class="line">     low     high</span><br></pre></td></tr></table></figure></div></li><li><p>C处，执行low和high的元素交换：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">             pivot</span><br><span class="line">               ↓</span><br><span class="line">2  1  4  3  7  5  8  6  9</span><br><span class="line">      ↑        ↑</span><br><span class="line">     low      high</span><br></pre></td></tr></table></figure></div></li><li><p>D处，low的值不断递增，直至arr[low] = 7 大于 pivot，跳出D循环：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">             pivot</span><br><span class="line">               ↓</span><br><span class="line">2  1  4  3  7  5  8  6  9</span><br><span class="line">            ↑  ↑</span><br><span class="line">          low  high</span><br></pre></td></tr></table></figure></div></li><li><p>E处，执行low和high的元素交换：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">             pivot</span><br><span class="line">               ↓</span><br><span class="line">2  1  4  3  5  7  8  6  9</span><br><span class="line">            ↑  ↑</span><br><span class="line">          low  high</span><br></pre></td></tr></table></figure></div></li><li><p>A处，low = 4， high = 5， low &lt; high， 继续循环A：</p></li><li><p>B处，high不断递减，直至high=4 等于 low，不满足 low &lt; high，跳出B循环：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">          pivot</span><br><span class="line">            ↓</span><br><span class="line">2  1  4  3  5  7  8  6  9</span><br><span class="line">            ↑</span><br><span class="line">           low  </span><br><span class="line">           high</span><br></pre></td></tr></table></figure></div></li><li><p>因为low和high已经重合，所以在接下来的C、D、E操作中序列均未发生变化</p></li><li><p>A处，low=4, high = 4, 不满足 low &lt; high, 跳出A循环，最后返回low=4，即为pivot所在位置；</p></li></ul><p>所以第1趟排序下来之后，序列会变成 {2, 1, 4, 3, 5, 7, 8, 6, 9}；然后再对子序列{2, 1, 4, 3} 和 {7, 8, 6, 9} 做同样的操作即可完成整个排序。</p><p>对于partition方法中的low和high，可以这样理解：<strong>在low左边的记录都都小于等于枢轴pivot，在high右边的记录都大于等于枢轴pivot，那么当low和high重合时，则表示已经分割完毕，重合的位置（即low的值）就是枢轴pivot的位置。</strong></p><h2 id="快速排序的优化"><a href="#快速排序的优化" class="headerlink" title="快速排序的优化"></a>快速排序的优化</h2><p>(1) <strong>枢轴的选取方式的优化</strong>：<br>枢轴的选取方式有：(1) 固定位置选取；(2) 随机位置选取； (3) 三值取中法 等</p><p>固定位置选取：选取当前序列的第一个元素或者最后一个元素作为枢轴，上面的算法的枢轴选取方式即为固定位置选取。该方法不是一个好的选取方案，因为当整个序列有序时，每次分割(partition)操作只会将待排序序列减1，此时为最坏情况，算法复杂度沦为O(n^2)。然而，在待排序的序列中局部有序是相当常见的，所以固定位置选取枢轴不是一种好的选择。</p><p>随机位置选取：随机选取当前待排序序列的任意记录作为枢轴。由于采取随机，所以时间性能要强于固定位置选取。</p><p>三值取中法： 待排序序列的前(第一个位置)、中(中间位置)、后(最后一个位置)三个记录中的中间值(按大小排序)作为枢轴，比如:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">9 1 7 5 2 8 6 3 4</span><br><span class="line">↑       ↑       ↑</span><br><span class="line">low    mid    high</span><br><span class="line">前      中      后</span><br></pre></td></tr></table></figure></div><p>由于 9 &gt; 4 &gt; 2； 因此将4作为此次分割(partition)操作的枢轴。<br>三值取中操作后，整个序列变为：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4 1 7 5 2 8 6 3 9</span><br><span class="line">↑       ↑       ↑</span><br><span class="line">low    mid    high</span><br><span class="line">前      中      后</span><br></pre></td></tr></table></figure></div><p>三值取中本质上就是随机位置选取，但是由于随机位置选取过程中需要用到随机种子来产生随机数，而三值取中不需要，所以三值取中要优于随机位置选取。</p><p>所以优化枢轴的选取方式时，我们选择三值取中的方式。</p><p>(2) <strong>优化小数组时的排序方案</strong>：<br>当局部排序数组长度较小时，采用插入排序，而非快速排序，因为长度分割到够小后，继续分割的效率要低于直接插入排序。</p><p>(3) <strong>略去不必要的交换</strong><br>略去不必要的交换，将交换操作改为替换操作。<br>因为交换操作需要进行3次赋值操作，而替换操作只需要进行1次赋值操作。</p><p><strong><em>Java实现</em></strong></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化的快速排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptimizedQuickSorter</span> <span class="keyword">extends</span> <span class="title">QuickSorter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序最大数组长度值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_LENGTH_INSERT_SORT = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对数组arr[low...high]的子序列作快速排序，使之有序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivotLoc; <span class="comment">// 记录枢轴(pivot)所在位置</span></span><br><span class="line"><span class="keyword">if</span> ((high - low + <span class="number">1</span>) &gt; MAX_LENGTH_INSERT_SORT) &#123;</span><br><span class="line"><span class="comment">// 待排序数组长度大于临界值，则进行快速排序</span></span><br><span class="line">pivotLoc = partition(arr, low, high); <span class="comment">// 将arr[low...high]一分为二,并返回枢轴位置</span></span><br><span class="line"></span><br><span class="line">quickSort(arr, low, pivotLoc - <span class="number">1</span>);<span class="comment">// 递归遍历arr[low...pivotLoc-1]</span></span><br><span class="line">quickSort(arr, pivotLoc + <span class="number">1</span>, high); <span class="comment">// 递归遍历arr[pivotLoc+1...high]</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 2. 优化小数组时的排序方案，将快速排序改为插入排序</span></span><br><span class="line">insertSort(arr, low, high); <span class="comment">// 对arr[low...high]子序列进行插入排序</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在arr[low...high]中利用三值取中选取枢轴(pivot)，将arr[low...high]分成两部分，</span></span><br><span class="line"><span class="comment"> * 前半部分的子序列的记录均小于pivot，后半部分的记录均大于pivot;最后返回pivot的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivot;</span><br><span class="line">pivot = medianOfThree(arr, low, high); <span class="comment">// 1. 优化排序基准，使用三值取中获取中值</span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high) &#123; <span class="comment">// 从数组的两端向中间扫描 // A</span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot) &#123; <span class="comment">// B</span></span><br><span class="line">high--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// swap(arr, low, high); // 将比枢轴pivot小的元素交换到低位</span></span><br><span class="line">arr[low] = arr[high]; <span class="comment">// 3. 优化不必要的交换，使用替换而不是交换  // C</span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot) &#123; <span class="comment">// D</span></span><br><span class="line">low++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// swap(arr, low, high); // 将比枢轴pivot大的元素交换到高位</span></span><br><span class="line">arr[high] = arr[low]; <span class="comment">// 3. 优化不必要的交换，使用替换而不是交换 // E</span></span><br><span class="line">&#125;</span><br><span class="line">arr[low] = pivot; <span class="comment">// F</span></span><br><span class="line"><span class="keyword">return</span> low; <span class="comment">// 返回一趟下来后枢轴pivot所在的位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过三值取中(从arr[low...high]子序列中)获取枢轴pivot的值，让arr[low]变成中值;并返回计算的枢轴(pivot)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">medianOfThree</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid = low + ((high - low) &gt;&gt; <span class="number">1</span>); <span class="comment">// mid = low + (high-low)/2, 中间元素下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用三值取中得到枢轴</span></span><br><span class="line"><span class="keyword">if</span> (arr[low] &gt; arr[high]) &#123; <span class="comment">// 目的：让arr[low] &lt;= arr[high]</span></span><br><span class="line">swap(arr, low, high);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &gt; arr[high]) &#123; <span class="comment">// 目的：让arr[mid] &lt;= arr[high]</span></span><br><span class="line">swap(arr, mid, high);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[mid] &gt; arr[low]) &#123; <span class="comment">// 目的： 让arr[low] &gt;= arr[mid]</span></span><br><span class="line">swap(arr, low, mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 经过上述变化，最终 arr[mid]&lt;=arr[low]&lt;=arr[high]，则arr[low]为中间值</span></span><br><span class="line"><span class="keyword">return</span> arr[low];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对子序列arr[low...high]进行插入排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (i = low + <span class="number">1</span>; i &lt;= high; i++) &#123; <span class="comment">// 从下标low+1开始遍历,因为下标为low的已经排好序</span></span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="comment">// 如果当前下标对应的记录小于前一位记录,则需要插入,否则不需要插入，直接将记录数增加1</span></span><br><span class="line">tmp = arr[i]; <span class="comment">// 记录下标i对应的元素</span></span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= low &amp;&amp; arr[j] &gt; tmp; j--) &#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j]; <span class="comment">// 记录后移</span></span><br><span class="line">&#125;</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp; <span class="comment">// 插入正确位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong><em>演示</em></strong><br>为了方便演示，我对上面代码中的分割操作partition方法的代码仍然进行了标注（分别标注为 A,B,C,D,E,F）。<br>对于待排序序列 {5, 1, 9, 3, 7, 4, 8, 6, 2}，我们来演示其第一趟排序过程：</p><p>low = 0， high = 8， high-low+1=9 &gt; MAX_LENGTH_INSERT_SORT， 所以需要进行快速排序，接下来进行分割(partition)操作；</p><ul><li><p>此时待排序序列：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>  <span class="number">1</span>  <span class="number">9</span>  <span class="number">3</span>  <span class="number">7</span>  <span class="number">4</span>  <span class="number">8</span>  <span class="number">6</span>  <span class="number">2</span></span><br><span class="line">↑                       ↑</span><br><span class="line">low                    high</span><br></pre></td></tr></table></figure></div></li><li><p>三值取中前：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5  1  9  3  7  4  8  6  2</span><br><span class="line">↑           ↑           ↑</span><br><span class="line">low        mid        high</span><br></pre></td></tr></table></figure></div></li><li><p>三值取中后：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pivot</span><br><span class="line">↓</span><br><span class="line">5  1  9  3  2  4  8  6  7</span><br><span class="line">↑           ↑           ↑</span><br><span class="line">low        mid        high</span><br></pre></td></tr></table></figure></div></li></ul><p>pivot = 5；</p><ul><li><p>A处，low = 0, high = 8, low &lt; high, 进行A循环；</p></li><li><p>B处，high的值不断递减，直至arr[high] = 4 小于pivot，跳出B循环：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5  1  9  3  2  4  8  6  7</span><br><span class="line">↑              ↑</span><br><span class="line">low           high</span><br></pre></td></tr></table></figure></div></li><li><p>C处，arr[low] = arr[high]，将低位的值替换成高位的值：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4  1  9  3  2  4  8  6  7</span><br><span class="line">↑              ↑</span><br><span class="line">low           high</span><br></pre></td></tr></table></figure></div></li><li><p>D处，low的值不断递增，直至arr[low] = 9 大于 pivot，跳出D循环:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4  1  9  3  2  4  8  6  7</span><br><span class="line">      ↑        ↑</span><br><span class="line">     low     high</span><br></pre></td></tr></table></figure></div></li><li><p>E处，arr[high] = arr[low]， 将高位的值替换成低位的值：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4  1  9  3  2  9  8  6  7</span><br><span class="line">      ↑        ↑</span><br><span class="line">     low     high</span><br></pre></td></tr></table></figure></div></li><li><p>A处，low = 2, high = 5, low &lt; high, 进行A循环；</p></li><li><p>B处，high的值不断递减，直至arr[high] = 2 小于pivot，跳出B循环：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4  1  9  3  2  9  8  6  7</span><br><span class="line">      ↑     ↑</span><br><span class="line">     low   high</span><br></pre></td></tr></table></figure></div></li><li><p>C处，arr[low] = arr[high]，将低位的值替换成高位的值：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4  1  2  3  2  9  8  6  7</span><br><span class="line">      ↑     ↑</span><br><span class="line">     low   high</span><br></pre></td></tr></table></figure></div></li><li><p>D处，low的值不断递增，直至low = 4, high = 4, low == high，不满足 low &lt; high，跳出D循环:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4  1  2  3  2  9  8  6  7</span><br><span class="line">         ↑</span><br><span class="line">        low</span><br><span class="line">        high</span><br></pre></td></tr></table></figure></div></li><li><p>因为low和high已经重合，所以在接下来的E操作中序列未发生变化；</p></li><li><p>A处，low=4, high = 4, 不满足 low &lt; high, 跳出A循环；</p></li><li><p>F处， arr[low] = pivot:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4  1  2  3  5  9  8  6  7</span><br><span class="line">            ↑</span><br><span class="line">           low</span><br><span class="line">           high</span><br></pre></td></tr></table></figure></div></li><li><p>最后返回low = 4，即为pivot所在的位置。</p></li></ul><p>所以这趟排序下来之后，序列会变成 {4  1  2  3  5  9  8  6  7}；然后再对子序列{4, 1, 2, 3} 和 {9, 8, 6, 7} 做同样的操作即可完成整个排序。</p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间复杂度：<br>时间复杂度为O(nlogn)，在对快速排序进行各种细节性的优化后，快速排序的性能大大提高，在一般条件下超越了其它排序方法，故得此名。</p><p>空间复杂度：<br>就空间复杂度来说，主要是递归造成的栈空间的使用，最好情况，递归的深度为log2n，其空间复杂度也就为O(logn)，最坏情况，需要进行n‐1递归调用，其空间复杂度为O(n)，平均情况，空间复杂度也为O(logn)。</p><p>参考链接：<br><a href="http://bubkoo.com/2014/01/12/sort-algorithm/quick-sort/" target="_blank" rel="noopener">常见排序算法 - 快速排序 (Quick Sort)</a><br><a href="http://blog.csdn.net/insistgogo/article/details/7785038" target="_blank" rel="noopener">三种快速排序以及快速排序的优化</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-归并排序</title>
      <link href="/post/sort-merge-sort/"/>
      <url>/post/sort-merge-sort/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>归并排序就是利用归并的思想实现的排序算法。归并排序的原理：假设初始序列含有n个记录，该序列可以看成n个有序的子序列，其中每个子序列的长度为1，然后两两归并，得到⌈n/2⌉（⌈x⌉表示不小于x的最小整数）个长度为2或者1的子序列，然后再两两归并，……，如此重复直到得到1个长度为n的有序序列为止。 <a id="more"></a></p><h2 id="递归式归并"><a href="#递归式归并" class="headerlink" title="递归式归并"></a>递归式归并</h2><p><strong><em>演示</em></strong><br>比如我们待排序的数组是  {9, 1, 5, 8, 3, 7, 4, 6, 2}，那么递归式的归并排序为流程为：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">                 [<span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>]</span><br><span class="line">                    ↓                    ↓</span><br><span class="line">          [<span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>]             [<span class="number">7</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>]</span><br><span class="line">           ↓            ↓              ↓         ↓ </span><br><span class="line">     [<span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>]        [<span class="number">8</span>, <span class="number">3</span>]      [<span class="number">7</span>, <span class="number">4</span>]      [<span class="number">6</span>, <span class="number">2</span>]</span><br><span class="line">      ↓      ↓        ↓    ↓       ↓   ↓      ↓   ↓  </span><br><span class="line"> [<span class="number">9</span>, <span class="number">1</span>]     [<span class="number">5</span>]      [<span class="number">8</span>]  [<span class="number">3</span>]     [<span class="number">7</span>] [<span class="number">4</span>]    [<span class="number">6</span>]  [<span class="number">2</span>]</span><br><span class="line">  ↓  ↓       ↓        ↓    ↓       ↓   ↓      ↓   ↓  </span><br><span class="line">[<span class="number">9</span>]  [<span class="number">1</span>]    [<span class="number">5</span>]      [<span class="number">8</span>]  [<span class="number">3</span>]     [<span class="number">7</span>] [<span class="number">4</span>]    [<span class="number">6</span>]  [<span class="number">2</span>] <span class="comment">// 上面为拆分，下面为归并(合并)</span></span><br><span class="line">    ↓        ↓        ↓    ↓       ↓   ↓      ↓   ↓  </span><br><span class="line"> [<span class="number">1</span>, <span class="number">9</span>]     [<span class="number">5</span>]      [<span class="number">8</span>]  [<span class="number">3</span>]     [<span class="number">7</span>] [<span class="number">4</span>]    [<span class="number">6</span>]  [<span class="number">2</span>]</span><br><span class="line">      ↓      ↓        ↓    ↓        ↓  ↓      ↓   ↓</span><br><span class="line">     [<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>]       [<span class="number">3</span>, <span class="number">8</span>]        [<span class="number">4</span>, <span class="number">7</span>]     [<span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line">           ↓           ↓              ↓         ↓</span><br><span class="line">         [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">8</span>]              [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">                   ↓                    ↓</span><br><span class="line">                 [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></div><p><strong><em>Java实现</em></strong></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组按升序排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组arr中的第i个位置和第j个位置的关键字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归式归并排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MergeSorter</span> <span class="keyword">implements</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">mergeSort(arr, result, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将乱序的src[start...end]归并排序为有序的des[start...end]</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment"> *            归并前乱序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> des</span></span><br><span class="line"><span class="comment"> *            归并后的有序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment"> *            归并的起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment"> *            归并的终止位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] src, <span class="keyword">int</span>[] des, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">des[start] = src[start];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[src.length];</span><br><span class="line"><span class="comment">// 将src[start...end]分为src[start...mid]和src[mid+1...end]两部分</span></span><br><span class="line"><span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">mergeSort(src, tmp, start, mid); <span class="comment">// 递归，将src[start...mid]归并为有序的tmp[start...mid]</span></span><br><span class="line">mergeSort(src, tmp, mid + <span class="number">1</span>, end); <span class="comment">// 递归，将src[mid+1...end]归并为有序的tmp[mid+1...end]</span></span><br><span class="line"><span class="comment">// 将有序的tmp[start...mid]和tmp[mid+1...end]合并为des[start...end]</span></span><br><span class="line">merge(tmp, des, start, mid, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将有序的src[start, mid]和有序的src[mid+1, end]合并为有序的des[start,end];</span></span><br><span class="line"><span class="comment"> * src可能为乱序数组,但是src[start, mid]和src[mid+1, end]是有序的。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment"> *            乱序的原数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> des</span></span><br><span class="line"><span class="comment"> *            有序的目标数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment"> *            数组第一部分起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mid</span></span><br><span class="line"><span class="comment"> *            数组第一部分结束位置（两部分的分界点）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment"> *            数组第二部分结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] src, <span class="keyword">int</span>[] des, <span class="keyword">int</span> start, <span class="keyword">int</span> mid, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i; <span class="comment">// src数组第一部分下标</span></span><br><span class="line"><span class="keyword">int</span> j; <span class="comment">// src数组第二部分下标</span></span><br><span class="line"><span class="keyword">int</span> k; <span class="comment">// des数组下标</span></span><br><span class="line"><span class="comment">// 将较小的数依次移动到目标数组中</span></span><br><span class="line"><span class="keyword">for</span> (i = start, k = start, j = mid + <span class="number">1</span>; i &lt;= mid &amp;&amp; j &lt;= end;) &#123;</span><br><span class="line"><span class="keyword">if</span> (src[i] &lt; src[j]) &#123;</span><br><span class="line">des[k] = src[i++];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">des[k] = src[j++];</span><br><span class="line">&#125;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将剩余的src[i...mid]复制到des数组中</span></span><br><span class="line"><span class="keyword">for</span> (; i &lt;= mid; i++) &#123;</span><br><span class="line">des[k] = src[i];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将剩余的src[j...end]复制到des数组中</span></span><br><span class="line"><span class="keyword">for</span> (; j &lt;= end; j++) &#123;</span><br><span class="line">des[k] = src[j];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong><em>复杂度</em></strong><br>时间复杂度：<br>因为归并的递归操作其实就是二叉树的结构，故而，最好情况 = 最坏情况 = 平均情况 = O(nlogn)</p><p>空间复杂度：<br>因为递归式归并需要(1)与原始记录相同大小的空间来存放归并的结果以及(2)深度为logn的栈空间，所以空间复杂度为O(n+logn)</p><h2 id="非递归式归并"><a href="#非递归式归并" class="headerlink" title="非递归式归并"></a>非递归式归并</h2><p><strong><em>演示</em></strong><br>又比如我们待排序的数组是 {9, 1, 5, 8, 3, 7, 4, 6, 2}，那么非递归式的归并排序为流程为：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[9] [1]    [5] [8]    [3] [7]   [4] [6]  [2]</span><br><span class="line">  ↓  ↓      ↓   ↓      ↓    ↓     ↓   ↓   ↓</span><br><span class="line"> [1, 9]    [5, 8]      [3, 7]    [4, 6]  [2]</span><br><span class="line">   ↓          ↓          ↓       ↓        ↓ </span><br><span class="line">   [1, 5, 8, 9]       [3, 4, 6, 7]       [2]</span><br><span class="line">            ↓            ↓                ↓</span><br><span class="line">       [1, 3, 4, 5, 6, 7, 8, 9]          [2]</span><br><span class="line">               ↓                         ↓</span><br><span class="line">               [1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure></div><p><strong><em>Java实现</em></strong></p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非递归式归并排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonRecursiveMergeSorter</span> <span class="keyword">extends</span> <span class="title">MergeSorter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">mergeSort(arr);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">int</span> result[] = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k &lt; len) &#123;</span><br><span class="line">mergePass(arr, result, k); <span class="comment">// arr归并至result,此时间隔为k</span></span><br><span class="line">k = <span class="number">2</span> * k; <span class="comment">// 子序列长度加倍</span></span><br><span class="line">mergePass(result, arr, k); <span class="comment">// result归并至arr,此时间隔翻倍</span></span><br><span class="line">k = <span class="number">2</span> * k; <span class="comment">// 子序列长度加倍</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组src中相邻长度为interval的子序列两两归并到des数组中</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> src</span></span><br><span class="line"><span class="comment"> *            源数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> des</span></span><br><span class="line"><span class="comment"> *            目标数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> interval</span></span><br><span class="line"><span class="comment"> *            两两合并的子序列长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergePass</span><span class="params">(<span class="keyword">int</span>[] src, <span class="keyword">int</span>[] des, <span class="keyword">int</span> interval)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> len = src.length;</span><br><span class="line"><span class="keyword">while</span> (i + <span class="number">2</span> * interval - <span class="number">1</span> &lt; len) &#123;</span><br><span class="line"><span class="comment">// 两两合并</span></span><br><span class="line">merge(src, des, i, i + interval - <span class="number">1</span>, i + <span class="number">2</span> * interval - <span class="number">1</span>);</span><br><span class="line">i = i + <span class="number">2</span> * interval;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i + interval - <span class="number">1</span> &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// i+interval-1小于len-1，说明最后还剩余两个子序列，只不过最后的一个子序列长度不够interval</span></span><br><span class="line"><span class="comment">// 那么将剩下的两个子序列进行合并</span></span><br><span class="line">merge(src, des, i, i + interval - <span class="number">1</span>, len - <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 否则，最后只剩下单个子序列，则直接将该子序列加入到des尾部</span></span><br><span class="line"><span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">des[i] = src[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong><em>复杂度</em></strong><br>时间复杂度：<br>同递归式归并，最好情况 = 最坏情况 = 平均情况 = O(nlogn)</p><p>空间复杂度：<br>非递归式归并不需要保存方法栈信息，所以空间复杂度为O(n)</p><p>所以非递归的递归算法性能要高于递归式归并算法。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-堆排序</title>
      <link href="/post/sort-heap-sort/"/>
      <url>/post/sort-heap-sort/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong><em>堆</em></strong>： 堆是具有下列性质的完全二叉树：每个节点的值都大于或等于其左右孩子（如果存在的话）的值，称为最大堆；或者每个节点的值都小于或等于其左右孩子（如果存在的话）的值，称为最小堆。 <a id="more"></a></p><p>完全二叉树：</p><img alt="complete binary tree" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/complete_binary_tree.png"><p>最大堆：</p><img alt="max heap" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/max_heap.png"><p>最小堆：</p><img alt="min heap" class="post-image-center" data-src="https://tianma-bucket.oss-cn-shanghai.aliyuncs.com/images/min_heap.png"><p>图片来源: <a href="http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/" target="_blank" rel="noopener">常见排序算法 - 堆排序 (Heap Sort)</a></p><p><strong><em>堆排序</em></strong>：利用堆（这里使用最大堆）进行排序的方法。其基本思想是：将待排序的序列构造成一个最大堆，此时待排序序列的最大值就是堆顶的根节点，将其移走（其实就是将其与待排序序列的最后一个元素进行交换，此时待排序序列最后一个元素就是最大值），然后将剩余的序列重新构造成一个堆，如此反复，直到待排序序列只有一个元素为止，则排序完成。</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>已知arr[0…n-1]是长度为n的最大堆数组，下标从0开始，那么对于下标为 i 的节点 I ，有：<br>(1).  如果 I 的左孩子存在的话，那么I的左孩子节点的下标为 left(i) = 2*i+1；<br>(2).  如果 I 的右孩子存在的话，那么I的右孩子节点的下标为 right(i) = 2*i+2;<br>(3).  如果 I 双亲节点存在的话，那么I的双亲节点的下标为  parent(i) = (i-1)/2; (向下取整)</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ol><li>构建最大堆 buildMaxHeap(int[] arr)：将待排序序列arr构建成最大堆；</li><li>调整最大堆 adjustHeap(int arr[], int begin, int end):  已知arr[begin]的左子树和右子树都满足最大堆，那么调节节点arr[begin]，将以arr[begin]为根节点的二叉树调整为最大堆。</li></ol><p>对于堆排序，最重要的就是构建最大堆和调整最大堆，其实构造初始堆事实上也是调整堆的过程，只不过构造初始堆是对所有的非叶节点都进行调整。</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组按升序排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组arr中的第i个位置和第j个位置的关键字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapSorter</span> <span class="keyword">implements</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">heapSort(arr);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">buildMaxHeap(arr); <span class="comment">// 构建最大堆</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将最大堆堆顶元素与数组末尾元素交换，并将前n-1序列重新构造成最大堆,重复n-1次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">swap(arr, <span class="number">0</span>, i); <span class="comment">// 将堆顶元素和当前未经排序的子序列的最后一个元素进行交换</span></span><br><span class="line">adjustHeap(arr, <span class="number">0</span>, i - <span class="number">1</span>); <span class="comment">// 将arr[0...i-1](前i个元素)重新调整为最大堆</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将指定数组arr构建成最大堆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="comment">// 从最后一个非叶子节点往前遍历，将当前序列构成最大堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">adjustHeap(arr, i, len - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 假定arr[begin]的左子树和右子树均满足最大堆，那么调节节点arr[begin]，将以arr[begin]为根节点的二叉树调整为最大堆。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[begin];</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span> * begin + <span class="number">1</span>; j &lt;= end; j = <span class="number">2</span> * j + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// j=2*begin+1表示j对应二叉树节点的左孩子</span></span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">1</span> &lt;= end &amp;&amp; arr[j] &lt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="comment">// 如果当前节点的右孩子存在且左孩子的值小于右孩子</span></span><br><span class="line">j++; <span class="comment">// j为左右孩子较大记录的下标</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp &gt;= arr[j]) <span class="comment">// tmp的值已经大于arr[j]，则调整完毕，跳出循环</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">arr[begin] = arr[j]; <span class="comment">// 当前根节点并未均大于左右节点(如果有的话)，重新给当前根节点赋值</span></span><br><span class="line">begin = j; <span class="comment">// begin指向新的可能需要进行最大堆调整的子树的根节点</span></span><br><span class="line">&#125;</span><br><span class="line">arr[begin] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>堆排序其实也是一种选择排序，是一种树形选择排序。在<a href="/post/2610207546">简单选择排序</a>中，从arr[0…n-1]中选择最小（或最大）记录，需要比较n-1次，然后再从剩下arr[1…n-1]的n-1个元素中选择最小（或最大）记录，需要比较n-2次。然而事实上这n-2次比较中，有许多已经在前一趟n-1次的比较中做过了；而树形选择排序恰好利用树形的特点保存了部分前面的比较结果，因此可以减少比较次数，提高算法效率。</p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间复杂度：<br>对于n个关键字序列，每个节点需比较log2(n)次，因此其时间复杂度为O(nlogn)。<br>由于堆排序对原始记录的排序状态并不敏感，所以它的最好、最坏、平均时间复杂度均为O(nlogn)<br>由于初始构建堆所需要的比较次数较多，所以堆排序不适合待排序序列个数少的情况。</p><p>空间复杂度：<br>最好情况=平均情况=最坏情况=O(1)</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.cnblogs.com/dolphin0520/archive/2011/10/06/2199741.html" target="_blank" rel="noopener">推排序</a><br><a href="http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/" target="_blank" rel="noopener">常见排序算法 - 堆排序 (Heap Sort)</a><br><a href="http://www.nowamagic.net/algorithm/algorithm_HeapSortStudy.php" target="_blank" rel="noopener">堆排序(Heap Sort)算法学习</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-希尔排序</title>
      <link href="/post/sort-shell-sort/"/>
      <url>/post/sort-shell-sort/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>希尔排序是插入类排序算法，它的本质就是分组<a href="/post/1309789713">插入排序</a>，它采取分割策略：将相距某个“增量”的记录组成一个子序列，保证在每个子序列内部分别进行插入排序后得到的结果是基本有序。 <a id="more"></a></p><p>该方法的基本思想是：先将整个待排元素序列分割成若干个子序列（由相隔某个“增量”的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。</p><p>因为直接插入排序在元素基本有序的情况下（接近最好情况），效率是很高的，因此希尔排序在时间效率上比插入排序有大幅度提高。</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组按升序排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组arr中的第i个位置和第j个位置的关键字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSorter</span> <span class="keyword">implements</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">shellSort(arr);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shell排序的关键就是增量序列的选取：</span></span><br><span class="line"><span class="comment">// 增量序列原则： 增量序列的最后一个增量必须等于1</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">int</span> increment = len;</span><br><span class="line"><span class="keyword">for</span> (; increment != <span class="number">1</span>;) &#123;<span class="comment">// 循环直至increment=1</span></span><br><span class="line">increment = increment / <span class="number">3</span> + <span class="number">1</span>; <span class="comment">// 计算增量序列(将整个序列分成increment组,在组内进行插入排序)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = increment; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; arr[i - increment]) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[i]; <span class="comment">// 暂存arr[i]的值</span></span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = i - increment; j &gt;= <span class="number">0</span> &amp;&amp; tmp &lt; arr[j]; j -= increment) &#123;</span><br><span class="line"><span class="comment">// 组内记录后移,查找插入位置</span></span><br><span class="line">arr[j + increment] = arr[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到插入位置</span></span><br><span class="line">arr[j + increment] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>比如我们待排序的数组是 {9, 1, 5, 8, 3, 7, 4, 6, 2}<br>初始时increment=arr.length=9，increment != 1，执行第1次循环：<br>increment = 9/3+1 = 4，将整个序列分成4组，组内进行插入排序：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第 1 组： 9 3 2    -----------&gt; 2 3 9</span><br><span class="line">第 2 组： 1 7      -----------&gt; 1 7</span><br><span class="line">第 3 组： 5 4      -----------&gt; 4 5</span><br><span class="line">第 4 组： 8 6      -----------&gt; 6 8</span><br></pre></td></tr></table></figure></div><p>此时序列为 <strong>2 1 4 6 3 7 5 8 9</strong></p><p>increment=4，increment != 1，执行第2次循环：<br>increment = 4/3+1 = 2，将整个序列分成2组，组内进行插入排序：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第 1 组： 2 4 3 5 9    -----------&gt;  2 3 4 5 9</span><br><span class="line">第 2 组： 1 6 7 8      -----------&gt;  1 6 7 8</span><br></pre></td></tr></table></figure></div><p>此时序列为 <strong>2 1 3 6 4 7 5 8 9</strong></p><p>increment=2，increment != 1，执行第3次循环：<br>increment = 2/3+1 = 1，将整个序列分成1组，组内进行插入排序（演变为直接插入排序）：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PLAIN"><figure class="highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第 1 组 ： 2 1 3 6 4 7 5 8 9  -----------&gt; 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure></div><p>increment=1，结束循环，排序完毕。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-插入排序</title>
      <link href="/post/sort-insert-sort/"/>
      <url>/post/sort-insert-sort/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>插入排序是插入类的排序算法，基本原理：将一个记录插入到已经排好序的有序表中，从而得到一个新的记录数增加1的有序表。</p><a id="more"></a><p>具体算法：<br>整个序列分为两部分，左边部分为已排序的子序列，右边部分为未排序的子序列，取出第1个未排序元素存放在临时变量tmp中，在已经排序的元素序列中从后往前遍历，逐一比较，如果遍历到的元素大于tmp，则将该元素替换下一个位置的元素，直至遍历到的元素小于或等于tmp为止。相当于将未排序的第一个元素插入到已排序的数组中，故以插入排序为名。</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>比如我们待排序的数组是 {0, 5, 3, 4, 6, 2}<br>第1趟排序，5大于0，无需插入： <strong>0 5</strong> 3 4 6 2<br>第2趟排序，3小于5，需要插入： <strong>0 3 5</strong> 4 6 2<br>第3趟排序，4小于5，需要插入： <strong>0 3 4 5</strong> 6 2<br>第4趟排序，6大于5，无需插入： <strong>0 3 4 5 6</strong> 2<br>第5趟排序，2小于6，需要插入： <strong>0 2 3 4 5 6</strong></p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组按升序排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组arr中的第i个位置和第j个位置的关键字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InsertSorter</span> <span class="keyword">implements</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">insertSort(arr);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; len; i++) &#123; <span class="comment">// 从下标1开始遍历,因为下标0的已经排好序</span></span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="comment">// 如果当前下标对应的记录小于前一位记录,则需要插入,否则不需要插入，直接将记录数增加1</span></span><br><span class="line">tmp = arr[i]; <span class="comment">// 记录下标i对应的元素</span></span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; tmp; j--) &#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j]; <span class="comment">// 记录后移</span></span><br><span class="line">&#125;</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp; <span class="comment">// 插入正确位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间复杂度：<br>最好情况：当待排序的序列为顺序表时，会进行n-1次比较，0次替换，复杂度为O(n)；<br>最坏情况：当待排序的序列为逆序表时，会进行2+3+…+n=(n+2)*(n-1)/2次比较，2+3+…+n = (n+2)*(n-1)/2次替换，复杂度为O(n^2)；<br>平均情况：平均比较次数约为n^2/2, 平均移动次数为n^2/2，复杂度为O(n^2)。 </p><p>空间复杂度：<br>最好情况=最坏情况=平均情况=O(1)</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-IPv4地址和int类型数字的互相转换</title>
      <link href="/post/java-transform-ipv4-to-int/"/>
      <url>/post/java-transform-ipv4-to-int/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>对于ipv4的地址来说，如果用字符串的形式存储的话，其占用字节就比较大，比如对于IPv4地址0.0.0.0的字符串，就需要7个字节，IPv4为255.255.255.255 的字符串，需要15个字节，也就是说存储一个ip需要占用7~15个字节。 <a id="more"></a></p><p>那么有没有更节省空间的存储方式呢？答案是有。</p><ul><li><p>方案1： 直接把字符串中的’.’去掉，不就变成一个数字了嘛，比如 “255.255.255.255” 变成 255255255255，然而我们知道int所能表示的最大值 = Integer.MAX_VALUE = 2^31-1 = 2147483647， 255255255255 &gt; 2^31-1，所以需要用长整形long来表示，长整形占用8个字节，也就是说我们将7~15个字节转换为8字节，在绝大多数情况下是节省空间了的。</p></li><li><p>方案2： 因为考虑到IPv4的地址本质上就是32位的二进制串，而一个int类型的数字刚好为4个字节32个bit位，所以刚好可以用一个int类型的数字转表示IPv4地址。所以，我们可以用4个字节的int数字表示一个ip地址，这样可以大大节省空间。</p></li></ul><p>这里只讨论方案2 :)</p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>对于ipv4地址： 192.168.1.3：<br>每段都用二进制表示： 192(10) = 11000000(2) ; 168(10) = 10101000(2) ; 1(10) = 00000001(2) ;  3(10) = 00000011(2) 。<br>所以连在一起就是：11000000101010000000000100000011，对应的int数字就是-1062731775 。</p><p>具体算法分析：<br>192左移24位： 11000000 00000000 00000000 00000000<br>168左移16位： 00000000 10101000 00000000 00000000<br>001左移08位： 00000000 00000000 00000001 00000000<br>003左移00位： 00000000 00000000 00000000 00000011<br>按位或的结果： 11000000 10101000  00000001 00000011<br>即 -1062731775</p><p>将int类型的数字转换成ip地址，其实就是上述过程的逆过程，这里就不再赘述。</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * IPv4地址和int数字的互相转换</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tianma</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPv4IntTransformer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * IPv4地址转换为int类型数字</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ip2Integer</span><span class="params">(String ipv4Addr)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 判断是否是ip格式的</span></span><br><span class="line"><span class="keyword">if</span> (!isIPv4Address(ipv4Addr))</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Invalid ip address"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配数字</span></span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d+"</span>);</span><br><span class="line">Matcher matcher = pattern.matcher(ipv4Addr);</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line"><span class="keyword">int</span> value = Integer.parseInt(matcher.group());</span><br><span class="line">result = (value &lt;&lt; <span class="number">8</span> * (<span class="number">3</span> - counter++)) | result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否为ipv4地址</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isIPv4Address</span><span class="params">(String ipv4Addr)</span> </span>&#123;</span><br><span class="line">String lower = <span class="string">"(\\d|[1-9]\\d|1\\d&#123;2&#125;|2[0-4]\\d|25[0-5])"</span>; <span class="comment">// 0-255的数字</span></span><br><span class="line">String regex = lower + <span class="string">"(\\."</span> + lower + <span class="string">")&#123;3&#125;"</span>;</span><br><span class="line">Pattern pattern = Pattern.compile(regex);</span><br><span class="line">Matcher matcher = pattern.matcher(ipv4Addr);</span><br><span class="line"><span class="keyword">return</span> matcher.matches();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将int数字转换成ipv4地址</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">integer2Ip</span><span class="params">(<span class="keyword">int</span> ip)</span> </span>&#123;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> needPoint = <span class="keyword">false</span>; <span class="comment">// 是否需要加入'.'</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (needPoint) &#123;</span><br><span class="line">sb.append(<span class="string">'.'</span>);</span><br><span class="line">&#125;</span><br><span class="line">needPoint = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">int</span> offset = <span class="number">8</span> * (<span class="number">3</span> - i);</span><br><span class="line">num = (ip &gt;&gt; offset) &amp; <span class="number">0xff</span>;</span><br><span class="line">sb.append(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-选择排序</title>
      <link href="/post/sort-selection-sort/"/>
      <url>/post/sort-selection-sort/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>简单选择排序是选择类的排序，算法原理：第i次排序（1≤ i ≤n-1），从待排序的n-i+1个记录中， 进行n-i次关键字比较，从n-i+1个记录中选出最小的，并和第i-1个记录进行交换。 <a id="more"></a></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>比如我们待排序的数组是 {9, 1, 5, 8, 3, 7, 4, 6, 2}<br>第1趟排序，1最小，与第0个位置9进行交换： <strong>1 9</strong> 5 8 3 7 4 6 2<br>第2趟排序，2最小，与第1个位置9进行交换： 1 <strong>2</strong> 5 8 3 7 4 6 <strong>9</strong><br>第3趟排序，3最小，与第2个位置5进行交换： 1 2 <strong>3</strong> 8 <strong>5</strong> 7 4 6 9<br>第4趟排序，4最小，与第3个位置8进行交换： 1 2 3 <strong>4</strong> 5 7 <strong>8</strong> 6 9<br>第5趟排序，5最小，第4个位置是5无须交换： 1 2 3 4 5 7 8 6 9<br>第6趟排序，6最小，与第5个位置7进行交换： 1 2 3 4 5 <strong>6</strong> 8 <strong>7</strong> 9<br>第7趟排序，7最小，与第6个位置8进行交换： 1 2 3 4 5 6 <strong>7 8</strong> 9<br>第8趟排序，8最小，第7个位置是8无须交换： 1 2 3 4 5 6 7 8 9</p><p>其实就是每一趟排序将当前未排序序列中的最小的记录与未排序序列的最前端的位置进行交换。</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组按升序排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组arr中的第i个位置和第j个位置的关键字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SelectionSorter</span> <span class="keyword">implements</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">selectSort(arr);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, min;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">min = i; <span class="comment">// min记录最小值的下标</span></span><br><span class="line"><span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++) &#123; <span class="comment">// 循环i之后的数据</span></span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[min]) <span class="comment">// 发现有小于当前最小值的关键字</span></span><br><span class="line">min = j; <span class="comment">// 将该下标赋值给min</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i != min) <span class="comment">// 如果i和min不等，在i之后的数据中找到了最小值，则需要arr[i]于arr[min]进行交换</span></span><br><span class="line">swap(arr, i, min);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间复杂度：<br>对于比较次数而言，无论最好最差情况，其比较次数都是一样的：第i趟排序需要进行n-i次比较，此时比较次数=(n-1)+(n-2)+…+1 = n*(n-1)/2；<br>对于交换次数而言，其最好情况为顺序表，交换次数为0次；最差情况为逆序表，交换次数为n-1次，那么平均情况则为(n-1)/2次交换；<br>由于时间复杂度取决于比较次数和交换次数总和，故而交换排序的时间复杂度为O(n^2)。<br>因为相较于<a href="/post/42083511">冒泡排序</a>，选择排序的交换次数要少，所以选择排序的性能要优于冒泡排序。</p><p>空间复杂度：<br>最好情况=最坏情况=平均情况=O(1)</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-冒泡排序及其优化</title>
      <link href="/post/sort-bubble-sort/"/>
      <url>/post/sort-bubble-sort/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>冒泡排序是一种交换排序，它的基本思想是：两两比较相邻记录的关键字，如果反序则交换，直至没有反序的记录为止。<br>因为按照该算法，每次比较会将当前未排序的记录序列中最小的关键字移至未排序的记录序列最前（或者将当前未排序的记录序列中最大的关键字移至未排序的记录序列最后），就像冒泡一样，故以此为名。 <a id="more"></a></p><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>比如我们待排序的数组是 {9, 1, 5, 8, 3, 7, 4, 6, 2}<br>第1趟排序：<br>第1次比较，2和6比较，2小于6，反序，进行交换： 9 1 5 8 3 7 4 <strong>2 6</strong><br>第2次比较，2和4比较，2小于4，反序，进行交换： 9 1 5 8 3 7 <strong>2 4</strong> 6<br>第3次比较，2和7比较，2小于7，反序，进行交换： 9 1 5 8 3 <strong>2 7</strong> 4 6<br>第4次比较，2和3比较，2小于3，反序，进行交换： 9 1 5 8 <strong>2 3</strong> 7 4 6<br>第5次比较，2和8比较，2小于8，反序，进行交换： 9 1 5 <strong>2 8</strong> 3 7 4 6<br>第6次比较，2和5比较，2小于5，反序，进行交换： 9 1 <strong>2 5</strong> 8 3 7 4 6<br>第7次比较，2和1比较，2大于1，正序，不用交换： 9 1 2 5 8 3 7 4 6<br>第8次比较，1和9比较，1小于1，反序，进行交换： <strong>1 9</strong> 2 5 8 3 7 4 6<br>可以看出，第一趟排序将当前序列最小值移动至未排序的序列最前面的位置。</p><p>第2趟排序： 因为第一趟已经排好1的位置，所以只需要对剩下的{9, 2, 5, 8, 3, 7, 4, 6}再进行冒泡排序<br>… 重复以上操作，直至排序完毕</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将数组按升序排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组arr中的第i个位置和第j个位置的关键字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BubbleSorter</span> <span class="keyword">implements</span> <span class="title">Sorter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">bubbleSort(arr);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = len - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j - <span class="number">1</span>] &gt; arr[j]) &#123;</span><br><span class="line">swap(arr, j - <span class="number">1</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>当待排序数组为{1, 3, 4, 5, 6, 7, 8, 9, 2}时：<br>第1趟排序的结果为： 1 2 3 4 5 6 7 8 9<br>此时其实序列已经完成，但是根据上述代码仍得继续遍历，直至第9趟排序。这显然是不合理的，如果我们能在代码中加入一个flag标记上一趟排序中是否进行过交换，如果进行过未进行交换，说明当前数组已经有序。<br>优化代码：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化的冒泡排序</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptimizedBubbleSorter</span> <span class="keyword">extends</span> <span class="title">BubbleSorter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">boolean</span> swapped = <span class="keyword">true</span>; <span class="comment">// 标记：上一趟循环是否进行过交换</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len - <span class="number">1</span> &amp;&amp; swapped; i++) &#123;</span><br><span class="line">swapped = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 在某一趟遍历中,如果没有可交换的,那么swapped = false,跳出外层循环;</span></span><br><span class="line"><span class="comment">// 如果一旦进行了交换,则swapped = true,需要进行下一趟遍历</span></span><br><span class="line"><span class="keyword">for</span> (j = len - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j - <span class="number">1</span>] &gt; arr[j]) &#123;</span><br><span class="line">swap(arr, j - <span class="number">1</span>, j);</span><br><span class="line">swapped = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>时间复杂度：<br>最好情况： 排序表本身是顺序的，根据优化后的代码，则只需要进行n-1次比较，故时间复杂度为O(n)；<br>最差情况： 排序表本身是逆序的，则比较次数为 1+2+…+(n-1) = n*(n-1)/2 , 并作等数量级的移动操作；<br>平均情况： 时间复杂度为 O(n^2)</p><p>空间复杂度：<br>最好情况=最坏情况=平均情况=O(1)</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找-二叉搜索树（Java实现）</title>
      <link href="/post/search-binary-search-tree-Java-implementation/"/>
      <url>/post/search-binary-search-tree-Java-implementation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如果查找的数据集是有序的线性表，并且是顺序存储的，查找可以用折半查找、插值查找、斐波那契查找算法（详细算法见：<a href="/post/243331195">有序表查找（折半、插值、斐波那契查找）</a>）等实现。但是正是因为他们是顺序的，所以在插入和删除操作中需要耗费大量时间，也就是说这些算法适合静态查找（只有查找操作），不适合动态查找（不仅有查找操作还有插入删除等操作）。而二叉搜索树正适合动态查找。 <a id="more"></a></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>二叉搜索树又称为二叉排序树，它或者是空树，或者是具有下列性质的二叉树：</p><ol><li>如果它的左子树不为空，那么左子树的所有节点都小于根节点的值；</li><li>如果它的右子树不为空，那么右子树的所有节点都大于根节点的；</li><li>它的左、右子树也分别是二叉搜索树.</li></ol><p>二叉树是递归定义的数据结构，其中序遍历是递增的有序序列。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p><strong>1. 插入</strong><br>插入节点的过程是：若原二叉查找树为空，则直接插入；否则，若关键字 k 小于根节点关键字，则插入到左子树中，若关键字 k 大于根节点关键字，则插入到右子树中。注意每次插入的节点必是叶节点。</p><p><strong>2. 删除</strong><br>二叉查找树的删除操作是相对复杂一点，它要按 3 种情况来处理：</p><ul><li>若被删除节点 t 是叶子节点，则直接删除，不会破坏二叉排序树的性质；</li><li>若节点 t 只有左子树或只有右子树，则让 t 的子树成为 t 父节点的子树，替代 t 的位置；</li><li>若节点 t 既有左子树，又有右子树，则用 t 的直接前驱或者直接后继代替 t，然后从二叉查找树中删除这个后继，这样就转换成了第一或第二种情况。</li></ul><p><strong>3. 查找</strong><br>查找是从根节点开始，若二叉树非空，将给定值与根节点的关键字比较，若相等，则查找成功；若不等，则当给定值小于根节点关键字时，在根节点的左子树中查找，否则在根节点的右子树中查找。<br>其查找平均时间复杂度为O(logn)，但是最差情况为插入的节点是有序的，则该二叉搜索树会变成左斜树(或者右斜树或者可以理解为“链表”)，即最差时间复杂度为O(n)，故而查找性能不是严格意义上的O(logn)，不稳定。</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortedBinaryTree</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; root; <span class="comment">// 根节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size; <span class="comment">// 二叉树元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉树节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">E element; <span class="comment">// 节点元素</span></span><br><span class="line">Node&lt;E&gt; lChild; <span class="comment">// 左孩子</span></span><br><span class="line">Node&lt;E&gt; rChild; <span class="comment">// 右孩子</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(element, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element, Node&lt;E&gt; lChild, Node&lt;E&gt; rChild)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.element = element;</span><br><span class="line"><span class="keyword">this</span>.lChild = lChild;</span><br><span class="line"><span class="keyword">this</span>.rChild = rChild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SortedBinaryTree</span><span class="params">(List&lt;E&gt; elements)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (E e : elements) &#123;</span><br><span class="line">add(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SortedBinaryTree</span><span class="params">(E[] elements)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (E e : elements) &#123;</span><br><span class="line">add(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SortedBinaryTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断当前元素是否存在于树中</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> search(root, element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 递归搜索,查找当前以curRoot为根节点的树中element存在与否</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> curRoot</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">search</span><span class="params">(Node&lt;E&gt; curRoot, E element)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (curRoot == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Comparable&lt;? <span class="keyword">super</span> E&gt; e = (Comparable&lt;? <span class="keyword">super</span> E&gt;) element;</span><br><span class="line"><span class="keyword">int</span> cmp = e.compareTo(curRoot.element);</span><br><span class="line"><span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 查找的元素大于当前根节点对应的元素,向右走</span></span><br><span class="line"><span class="keyword">return</span> search(curRoot.rChild, element);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 查找的元素小于当前根节点对应的元素,向左走</span></span><br><span class="line"><span class="keyword">return</span> search(curRoot.lChild, element);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 查找的元素等于当前根节点对应的元素,返回true</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非递归搜索,查找当前以curRoot为根节点的树中的element是否存在</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> curRoot</span></span><br><span class="line"><span class="comment"> *            二叉排序树的根节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> *            被搜索的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment"> *            target[0]指向查找路径上最后一个节点: 如果当前查找的元素存在,则target[0]指向该节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(Node&lt;E&gt; curRoot, E element, Node&lt;E&gt;[] target)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (curRoot == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">Node&lt;E&gt; tmp = curRoot;</span><br><span class="line">Comparable&lt;? <span class="keyword">super</span> E&gt; e = (Comparable&lt;? <span class="keyword">super</span> E&gt;) element;</span><br><span class="line"><span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> cmp = e.compareTo(tmp.element);</span><br><span class="line">target[<span class="number">0</span>] = tmp;</span><br><span class="line"><span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 查找的元素大于当前节点对应的元素,向右走</span></span><br><span class="line">tmp = tmp.rChild;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 查找的元素小于当前节点对应的元素,向左走</span></span><br><span class="line">tmp = tmp.lChild;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 查找的元素等于当前根节点对应的元素,返回true</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向二叉排序树中添加元素,如果当前元素已经存在,则添加失败,返回false,如果当前元素不存在,则添加成功,返回true</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">root = <span class="keyword">new</span> Node&lt;E&gt;(element);</span><br><span class="line">size++;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;E&gt;[] target = <span class="keyword">new</span> Node[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!find(root, element, target)) &#123;</span><br><span class="line"><span class="comment">// 当前元素不存在,插入元素</span></span><br><span class="line"><span class="comment">// 此时target节点即为需要插入的节点的父节点</span></span><br><span class="line">Comparable&lt;? <span class="keyword">super</span> E&gt; e = (Comparable&lt;? <span class="keyword">super</span> E&gt;) element;</span><br><span class="line"><span class="keyword">int</span> cmp = e.compareTo(target[<span class="number">0</span>].element);</span><br><span class="line">Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(element);</span><br><span class="line"><span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 插入的元素大于target指向的节点元素</span></span><br><span class="line">target[<span class="number">0</span>].rChild = newNode;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 插入的元素小于target指向的节点元素</span></span><br><span class="line">target[<span class="number">0</span>].lChild = newNode;</span><br><span class="line">&#125;</span><br><span class="line">size++;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除二叉排序树中的元素,如果当前元素不存在,则删除失败,返回false;如果当前元素存在,则删除该元素,重构二叉树,返回true</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(E element)</span> </span>&#123;</span><br><span class="line">Node&lt;E&gt;[] target = <span class="keyword">new</span> Node[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (find(root, element, target)) &#123;</span><br><span class="line"><span class="comment">// 被删除的元素存在,则继续执行删除操作</span></span><br><span class="line">remove(target[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放当前节点</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">free</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">node.element = <span class="keyword">null</span>;</span><br><span class="line">node.lChild = <span class="keyword">null</span>;</span><br><span class="line">node.rChild = <span class="keyword">null</span>;</span><br><span class="line">node = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除二叉排序树中指定的节点</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">Node&lt;E&gt; tmp;</span><br><span class="line"><span class="keyword">if</span> (node.lChild == <span class="keyword">null</span> &amp;&amp; node.rChild == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 当前node为叶子节点,删除当前节点,则node = null;</span></span><br><span class="line">node = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.lChild == <span class="keyword">null</span> &amp;&amp; node.rChild != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如果被删除的节点左子树为空,则只需要重新连接其右子树</span></span><br><span class="line">tmp = node;</span><br><span class="line">node = node.rChild;</span><br><span class="line">free(tmp);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.lChild != <span class="keyword">null</span> &amp;&amp; node.rChild == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 如果被删除的节点右子树为空,则只需要重新连接其左子树</span></span><br><span class="line">tmp = node;</span><br><span class="line">node = node.lChild;</span><br><span class="line">free(tmp);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 当前被删除的节点左右子树均存在,不为空</span></span><br><span class="line"><span class="comment">// 找到离当前node节点对应元素且最近的节点target(左子树的最右边节点 或者 右子树最左边节点)</span></span><br><span class="line"><span class="comment">// 将node节点元素替换成target节点的元素,将target节点删除</span></span><br><span class="line">tmp = node; <span class="comment">// tmp是target的父节点</span></span><br><span class="line">Node&lt;E&gt; target = node.lChild; <span class="comment">// 找到左子树最大子树</span></span><br><span class="line"><span class="keyword">while</span> (target.rChild != <span class="keyword">null</span>) &#123; <span class="comment">// 在左子树中进行右拐</span></span><br><span class="line">tmp = target;</span><br><span class="line">target = target.rChild;</span><br><span class="line">&#125;</span><br><span class="line">node.element = target.element; <span class="comment">// node.element元素替换为target.element</span></span><br><span class="line"><span class="keyword">if</span> (tmp == node) &#123;</span><br><span class="line"><span class="comment">// tmp == node 说明没有在左子树中进行右拐,也就是node节点的左孩子没有右孩子,</span></span><br><span class="line"><span class="comment">// 需要重新连接tmp节点左孩子</span></span><br><span class="line">tmp.lChild = target.lChild;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// tmp != node, 进行了右拐,那么将重新连接tmp的右子树,将target.lChild赋值给tmp.rChild</span></span><br><span class="line">tmp.rChild = target.lChild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放节点</span></span><br><span class="line">free(target);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 删除成功,size--;</span></span><br><span class="line">size--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">preOrderTraverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;E&gt;();</span><br><span class="line">preOrderTraverse(root, list);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrderTraverse</span><span class="params">(Node&lt;E&gt; curRoot, List&lt;E&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (curRoot == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">E e = curRoot.element;</span><br><span class="line">list.add(e);</span><br><span class="line">preOrderTraverse(curRoot.lChild, list);</span><br><span class="line">preOrderTraverse(curRoot.rChild, list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">inOrderTraverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;E&gt;();</span><br><span class="line">inOrderTraverse(root, list);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inOrderTraverse</span><span class="params">(Node&lt;E&gt; curRoot, List&lt;E&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (curRoot == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">inOrderTraverse(curRoot.lChild, list);</span><br><span class="line">list.add(curRoot.element);</span><br><span class="line">inOrderTraverse(curRoot.rChild, list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;E&gt; <span class="title">postOrderTraverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;E&gt;();</span><br><span class="line">postOrderTraverse(root, list);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postOrderTraverse</span><span class="params">(Node&lt;E&gt; curRoot, List&lt;E&gt; list)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (curRoot == <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">inOrderTraverse(curRoot.lChild, list);</span><br><span class="line">inOrderTraverse(curRoot.rChild, list);</span><br><span class="line">list.add(curRoot.element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回中序遍历结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> inOrderTraverse().toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Integer[] elements = <span class="keyword">new</span> Integer[] &#123; <span class="number">62</span>, <span class="number">88</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">73</span>, <span class="number">99</span>, <span class="number">35</span>, <span class="number">51</span>, <span class="number">93</span>, <span class="number">29</span>, <span class="number">37</span>, <span class="number">49</span>, <span class="number">56</span>, <span class="number">36</span>, <span class="number">48</span>, <span class="number">50</span> &#125;;</span><br><span class="line">SortedBinaryTree&lt;Integer&gt; tree = <span class="keyword">new</span> SortedBinaryTree&lt;Integer&gt;(elements);</span><br><span class="line">System.out.println(tree);</span><br><span class="line">System.out.println(tree.contains(<span class="number">93</span>));</span><br><span class="line">System.out.println(tree.size());</span><br><span class="line">System.out.println(tree.remove(<span class="number">47</span>));</span><br><span class="line">System.out.println(tree.preOrderTraverse());</span><br><span class="line">System.out.println(tree.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Github地址<br><a href="https://github.com/tianma8023/DataStructure/blob/master/src/tianma/learn/ds/tree/SortedBinaryTree.java" target="_blank" rel="noopener">SortedBinaryTree</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
            <tag> 二叉搜索树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找-有序表查找(折半查找，插值查找，斐波拉契查找)</title>
      <link href="/post/search-ordered-search/"/>
      <url>/post/search-ordered-search/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>如果待查找的数组是有序的，那么此时的查找就是有序表查找，这对于查找的帮助是很大的。属于有序表查找的有：折半查找（二分查找）、插值查找以及斐波那契查找。<a id="more"></a></p><h2 id="1-折半查找"><a href="#1-折半查找" class="headerlink" title="1. 折半查找"></a>1. 折半查找</h2><p>折半查找又称为二分查找，是一种效率较高的查找算法。折半查找的先决条件是查找表中的数据元素排列必须是有序的。折半查找先以有序数列的中点位置为比较对象，如果要找的元素值小于中点位置元素，则将待查序列缩小为左半部分，否则为右半部分。通过一次比较，可以将查找的区间缩小一半，每次比较，都可以将当前查找范围缩小至一般，可以明显的减少比较的次数，提高查找效率。<br>时间复杂度：O(logn)<br>算法实现：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数组array中查找关键字key,如果存在则返回该关键字在数组中任意出现的位置(不局限于首次或者末次之类的),否则返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> key)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分法查找,时间复杂度O(logn)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearcher</span> <span class="keyword">implements</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"><span class="comment">// 二分法查找前提,查找表array是顺序(这里要求递增)排列的</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> low, high, mid;</span><br><span class="line">low = <span class="number">0</span>; <span class="comment">// 定义最低下标为array首位</span></span><br><span class="line">high = array.length - <span class="number">1</span>; <span class="comment">// 定义最高下标为array末位</span></span><br><span class="line"><span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">mid = (low + high) / <span class="number">2</span>; <span class="comment">// 折半</span></span><br><span class="line"><span class="keyword">if</span> (array[mid] &gt; key) &#123;</span><br><span class="line"><span class="comment">// 中值比key大,则high=mid-1</span></span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &lt; key) &#123;</span><br><span class="line"><span class="comment">// 中值比key小,则low=mid+1</span></span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 相等说明mid即为key在array中所在位置</span></span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="2-插值查找"><a href="#2-插值查找" class="headerlink" title="2. 插值查找"></a>2. 插值查找</h2><p>插值查找是二分查找演化而来，相比于二分查找(折半),该算法考虑的是每次折的时候折多少,即不一定是1/2;如在一本字典中找”abstract”这个单词,我们自己来操作肯定是先翻到字典开始的那一小部分,而不是从字典的中间开始进行折半查找。</p><p>在二分查找中 <code>mid = (low + high) / 2 = low + 1/2 * (high - low)</code> ,插值查找就是对1/2(系数,或者说比例)进行改变，它将1/2变成 <code>(key - array[low]) / (array[high] - array[low])</code>,其实就是计算线性比例。</p><p>时间复杂度：O(logn)<br>因为插值查找是依赖线性比例的，如果当前数组分布不是均匀的，那么该算法就不合适。</p><p>算法实现：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterpolateSearcher</span> <span class="keyword">implements</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> low, high, mid;</span><br><span class="line">low = <span class="number">0</span>; <span class="comment">// 定义最低下标为array首位</span></span><br><span class="line">high = array.length - <span class="number">1</span>; <span class="comment">// 定义最高下标为array末位</span></span><br><span class="line"><span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line"><span class="comment">// 相比二分法查找的更改处</span></span><br><span class="line">mid = low + (<span class="keyword">int</span>) (<span class="number">1.0</span> * (key - array[low]) / (array[high] - array[low]) * (high - low));</span><br><span class="line"><span class="keyword">if</span> (array[mid] &gt; key) &#123;</span><br><span class="line"><span class="comment">// 中值比key大,则high=mid-1</span></span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &lt; key) &#123;</span><br><span class="line"><span class="comment">// 中值比key小,则low=mid+1</span></span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 相等说明mid即为key在array中所在位置</span></span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="3-斐波那契查找"><a href="#3-斐波那契查找" class="headerlink" title="3. 斐波那契查找"></a>3. 斐波那契查找</h2><p>根据前面二分查找以及插值查找来看，有序表上的查找的关键就是如何分割当前查找的区域（二分查找对半分割，差值查找按线性比例分割），说到分割，还有一个著名的分割方式就是黄金分割。</p><p>斐波那契数列，又称黄金分割数列，指的是这样一个数列：1、1、2、3、5、8、13、21、····，在数学上，斐波那契被递归方法如下定义：<code>F(1) = 1，F(2) = 1，F(n) = f(n-1) + F(n-2) (n&gt;=2)</code>。该数列越往后相邻的两个数的比值越趋向于黄金比例值（0.618）</p><p>所以我们可以根据斐波那契数列对当前区域进行分割 :)</p><p>查找算法：在斐波那契数列找一个等于略大于查找表中元素个数的数F(n)，将原查找表扩展为长度为F(n)(如果要补充元素，则补充重复最后一个元素，直到满足数组元素个数为F(n)个元素)，完成后进行斐波那契分割，即F(n)个元素分割为前半部分F(n-1)个元素，后半部分F(n-2)个元素，找出要查找的元素在那一部分并递归，直到找到。<br>时间复杂度：O(logn)，平均性能优于二分查找。<br>算法实现：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FibonacciSearcher</span> <span class="keyword">implements</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 得到长度为len的斐波那契数列</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] fibonacci(<span class="keyword">int</span> len) &#123;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"length must bigger than 0"</span>);</span><br><span class="line"><span class="keyword">int</span>[] fibonacci = <span class="keyword">new</span> <span class="keyword">int</span>[len];</span><br><span class="line">fibonacci[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">fibonacci[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; len; i++) &#123;</span><br><span class="line">fibonacci[i] = fibonacci[i - <span class="number">1</span>] + fibonacci[i - <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fibonacci;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>; <span class="comment">// 低位</span></span><br><span class="line"><span class="keyword">int</span> len = array.length;</span><br><span class="line"><span class="keyword">int</span> high = len - <span class="number">1</span>; <span class="comment">// 高位</span></span><br><span class="line"><span class="keyword">int</span> mid; <span class="comment">// 中间位</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>; <span class="comment">// 斐波那契数列下标(用于进行分割)</span></span><br><span class="line"><span class="comment">// 获取斐波那契数列</span></span><br><span class="line"><span class="keyword">int</span>[] fib = fibonacci(MAX_ARRAY_SIZE);</span><br><span class="line"><span class="comment">// 获取斐波那契数列分割点位置</span></span><br><span class="line"><span class="keyword">while</span> (len &gt; fib[k] - <span class="number">1</span>) &#123;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建临时数组(数组长度为fib[k] - 1)</span></span><br><span class="line"><span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[fib[k] - <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 拷贝原数组到tmp数组中</span></span><br><span class="line">System.arraycopy(array, <span class="number">0</span>, tmp, <span class="number">0</span>, len);</span><br><span class="line"><span class="comment">// 填充tmp数组中剩余的位置,补充的元素值为最后一个元素值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt; fib[k] - <span class="number">1</span>; i++) &#123;</span><br><span class="line">tmp[i] = array[high];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始进行类似于二分查找的查找</span></span><br><span class="line"><span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line"><span class="comment">// 对于tmp数组,整个数组的长度为fib[k]-1</span></span><br><span class="line"><span class="comment">// 而 fib[k]-1 = (fib[k-1]-1) + 1 + (fib[k-2]-1);</span></span><br><span class="line"><span class="comment">// 所以可以这样理解： mid下标对应元素可以将整个数组拆分为两部分,第1部分有fib[k-1]-1个元素,第2部分有fib[k-2]-1个元素</span></span><br><span class="line"><span class="comment">// mid=low+fib[k-1]-1; 正是将 数组的[low, max(high,tmp.length-1)]</span></span><br><span class="line"><span class="comment">// 部分按照斐波那契规则分为两部分</span></span><br><span class="line">mid = low + fib[k - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (tmp[mid] &gt; key) &#123;</span><br><span class="line"><span class="comment">// 需要查找第1部分</span></span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// fib[k] = fib[k-1] + fib[k-2]</span></span><br><span class="line"><span class="comment">// 第一部分有fib[k-1]个元素,所以将k-1赋值为k</span></span><br><span class="line">k = k - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp[mid] &lt; key) &#123;</span><br><span class="line"><span class="comment">// 需要查找第2部分</span></span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// fib[k] = fib[k-1] + fib[k-2]</span></span><br><span class="line"><span class="comment">// 第二部分有fib[k-2]个元素,所以将k-2赋值给k</span></span><br><span class="line">k = k - <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 查找成功</span></span><br><span class="line"><span class="comment">// 以下代码其实就是返回 min(mid, high);</span></span><br><span class="line"><span class="comment">// return Math.min(mid, high);</span></span><br><span class="line"><span class="keyword">if</span> (mid &lt;= high)</span><br><span class="line"><span class="keyword">return</span> mid;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> high; <span class="comment">// 因为mid可能大于high,即查找到了补充的元素,那么还是应该返回high</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>以上三种查找算法中，都依赖于顺序表，三者的区别本质上就是分割点选的不同。在分割点的选择中，折半查找 <code>mid=(low+high)/2</code> 是加法与除法运算；插值查找<code>mid=low+(key-array[low])/(array[high]-array[low])*(high-low)</code>是复杂的四则运算；斐波那契查找<code>mid=low+fib[k-1]-1</code>是简单的加减运算。在海量数据查找过程中细微的差别会影响最终的效率。</p><p>三种查找算法，各有优劣，实际开发可以根据数据的特点综合考虑再做出选择。</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找-顺序查找</title>
      <link href="/post/search-linear-search/"/>
      <url>/post/search-linear-search/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>顺序查找又称为线性查找，其算法思路是从数组中的第一个（或最后一个）记录开始，将数组中元素逐个与需要查找的关键字进行比对，若发现有相等的，则查找成功；若始终未能相等，则查找失败。</p><a id="more"></a><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数组array中查找关键字key,如果存在则返回该关键字在数组中任意出现的位置(不局限于首次或者末次之类的),否则返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> key)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顺序表查找,时间复杂度为O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinearSearcher</span> <span class="keyword">implements</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = array.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (array[i] == key)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>LinearSearcher是标准的线性查找，这里有缺陷：在循环中每个循环实际上需要判断两次(一次是否相等,一次是否越界)，如何改进呢？其实就是设置“哨兵”：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化的顺序表查找,时间复杂度O(n),但是比普通顺序表查找效率高</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptimizedLinearSearcher</span> <span class="keyword">implements</span> <span class="title">Searcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相比单纯的线性查找每次for循环需要判断两次,这里设置关键字值(即哨兵)，可以让每次for循环只判断一次</span></span><br><span class="line"><span class="comment">// 当数据量比较大时,如果单纯从线性查找角度看,优化后的线性搜索优势明显</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = array.length;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) <span class="comment">// array为空,返回-1</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (array[<span class="number">0</span>] == key)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">array[<span class="number">0</span>] = key; <span class="comment">// array[0]不是key,那么将key赋值给array[0],将array[0]作为哨兵</span></span><br><span class="line"><span class="comment">// 这里"哨兵"也可以放在数组尾部</span></span><br><span class="line"><span class="keyword">int</span> i = len - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (array[i] != key) &#123; <span class="comment">// 每次循环少判断一个</span></span><br><span class="line">i--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>) <span class="comment">// 从数组尾部一直查找到array[0]才找到,说明不存在</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>不论是线性查找还是改进后的线性查找，其时间复杂度都为O(n)</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP字符串模式匹配算法Java实现</title>
      <link href="/post/KMP-string-matcher-algorithm-Java-implementation/"/>
      <url>/post/KMP-string-matcher-algorithm-Java-implementation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文灵感来自于July的博客<a href="http://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">从头到尾彻底理解KMP</a>，并着重于Java实现 :)。  现有字符串匹配算法有不少，如简单暴力的朴素算法(暴力匹配算法)、KMP算法、BM算法以及Sunday算法等，在这里仅介绍前两种算法。</p><a id="more"></a><h2 id="1-朴素算法"><a href="#1-朴素算法" class="headerlink" title="1. 朴素算法"></a>1. 朴素算法</h2><p>朴素算法即暴力匹配算法，对于长度为n的文本串S和长度为m模式串P，在文本串S中是否存在一个有效偏移i，其中 0≤ i &lt; n - m + 1，使得 S[i… i+m - 1] = P[0 … m-1]（注：下标从0开始），如果存在则匹配成功，否则匹配失败。由于在匹配过程中一旦不匹配，就要让模式串P相对于文本串S右移1，即i需要进行回溯，其时间复杂度为O(n*m)。<br>Java实现：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 定义接口</span></span><br><span class="line">   <span class="class"><span class="keyword">interface</span> <span class="title">StringMatcher</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从原字符串中查找模式字符串的位置,如果模式字符串存在,则返回模式字符串第一次出现的位置,否则返回-1</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> source</span></span><br><span class="line"><span class="comment"> *            原字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment"> *            模式字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> if substring exists, return the first occurrence of pattern</span></span><br><span class="line"><span class="comment"> *         substring, return -1 if not.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String source, String pattern)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴力匹配</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 时间复杂度: O(m*n), m = pattern.length, n = source.length</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViolentStringMatcher</span> <span class="keyword">implements</span> <span class="title">StringMatcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String source, String pattern)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sLen = source.length(), pLen = pattern.length();</span><br><span class="line"><span class="keyword">char</span>[] src = source.toCharArray();</span><br><span class="line"><span class="keyword">char</span>[] ptn = pattern.toCharArray();</span><br><span class="line"><span class="keyword">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen) &#123;</span><br><span class="line"><span class="keyword">if</span> (src[i] == ptn[j]) &#123;</span><br><span class="line"><span class="comment">// 如果当前字符匹配成功,则将两者各自增1,继续比较后面的字符</span></span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果当前字符匹配不成功,则i回溯到此次匹配最开始的位置+1处,也就是i = i - j + 1</span></span><br><span class="line"><span class="comment">// (因为i,j是同步增长的), j = 0;</span></span><br><span class="line">i = i - j + <span class="number">1</span>;</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 匹配成功,则返回模式字符串在原字符串中首次出现的位置;否则返回-1</span></span><br><span class="line"><span class="keyword">if</span> (j == pLen)</span><br><span class="line"><span class="keyword">return</span> i - j;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="2-KMP算法"><a href="#2-KMP算法" class="headerlink" title="2. KMP算法"></a>2. KMP算法</h2><p>与朴素算法不同，朴素算法是当遇到不匹配字符时，向后移动一位继续匹配，而KMP算法是当遇到不匹配字符时，不是简单的向后移一位字符，而是根据前面已匹配的字符数和模式串前缀和后缀的最大相同字符串长度数组next的元素来确定向后移动的位数，所以KMP算法的时间复杂度比朴素算法的要少，并且是线性时间复杂度，即预处理时间复杂度是O(m)，匹配时间复杂度是O(n)。</p><p>next数组含义：代表在模式串P中，当前下标对应的字符之前的字符串中，有多大长度的相同前缀后缀。例如如果next [j] = k，代表在模式串P中，下标为j的字符之前的字符串中有最大长度为<em>k</em> 的相同前缀后缀。</p><p>KMP算法的核心就是求next数组，在字符串匹配的过程中，一旦某个字符匹配不成功，next数组就会指导模式串P到底该相对于S右移多少位再进行下一次匹配，从而避免无效的匹配。</p><p>next数组求解方法：</p><ul><li>next[0] = -1。</li><li>如果已知next[j] = k,如何求出next[j+1]呢?具体算法如下:<ol><li>如果p[j] = p[k], 则next[j+1] = next[k] + 1;</li><li>如果p[j] != p[k], 则令k=next[k],如果此时p[j]==p[k],则next[j+1]=k+1,如果不相等,则继续递归前缀索引,令 k=next[k],继续判断,直至k=-1(即k=next[0])或者p[j]=p[k]为止</li></ol></li></ul><p>详细的介绍及分析还请移步<a href="http://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">从头到尾彻底理解KMP</a>，在下语拙 :(<br>Java实现：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * KMP模式匹配</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tianma</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KMPStringMatcher</span> <span class="keyword">implements</span> <span class="title">StringMatcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取KMP算法中pattern字符串对应的next数组</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> p</span></span><br><span class="line"><span class="comment"> *            模式字符串对应的字符数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>[] getNext(<span class="keyword">char</span>[] p) &#123;</span><br><span class="line"><span class="comment">// 已知next[j] = k,利用递归的思想求出next[j+1]的值</span></span><br><span class="line"><span class="comment">// 如果已知next[j] = k,如何求出next[j+1]呢?具体算法如下:</span></span><br><span class="line"><span class="comment">// 1. 如果p[j] = p[k], 则next[j+1] = next[k] + 1;</span></span><br><span class="line"><span class="comment">// 2. 如果p[j] != p[k], 则令k=next[k],如果此时p[j]==p[k],则next[j+1]=k+1,</span></span><br><span class="line"><span class="comment">// 如果不相等,则继续递归前缀索引,令 k=next[k],继续判断,直至k=-1(即k=next[0])或者p[j]=p[k]为止</span></span><br><span class="line"><span class="keyword">int</span> pLen = p.length;</span><br><span class="line"><span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[pLen];</span><br><span class="line"><span class="keyword">int</span> k = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>] = -<span class="number">1</span>; <span class="comment">// next数组中next[0]为-1</span></span><br><span class="line"><span class="keyword">while</span> (j &lt; pLen - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (k == -<span class="number">1</span> || p[j] == p[k]) &#123;</span><br><span class="line">k++;</span><br><span class="line">j++;</span><br><span class="line">next[j] = k;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">k = next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String source, String pattern)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span>[] src = source.toCharArray();</span><br><span class="line"><span class="keyword">char</span>[] ptn = pattern.toCharArray();</span><br><span class="line"><span class="keyword">int</span> sLen = src.length;</span><br><span class="line"><span class="keyword">int</span> pLen = ptn.length;</span><br><span class="line"><span class="keyword">int</span>[] next = getNext(ptn);</span><br><span class="line"><span class="keyword">while</span> (i &lt; sLen &amp;&amp; j &lt; pLen) &#123;</span><br><span class="line"><span class="comment">// 如果j = -1,或者当前字符匹配成功(src[i] = ptn[j]),都让i++,j++</span></span><br><span class="line"><span class="keyword">if</span> (j == -<span class="number">1</span> || src[i] == ptn[j]) &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果j!=-1且当前字符匹配失败,则令i不变,j=next[j],即让pattern模式串右移j-next[j]个单位</span></span><br><span class="line">j = next[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j == pLen)</span><br><span class="line"><span class="keyword">return</span> i - j;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="3-优化的KMP算法（改进next数组）"><a href="#3-优化的KMP算法（改进next数组）" class="headerlink" title="3. 优化的KMP算法（改进next数组）"></a>3. 优化的KMP算法（改进next数组）</h2><p>具体过程移步<a href="http://blog.csdn.net/v_july_v/article/details/7041827#" target="_blank" rel="noopener">从头到尾彻底理解KMP</a>的<em>3.3.8 Next 数组的优化</em><br>在这里给出Java实现：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优化的KMP算法(对next数组的获取进行优化)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Tianma</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptimizedKMPStringMatcher</span> <span class="keyword">extends</span> <span class="title">KMPStringMatcher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>[] getNext(<span class="keyword">char</span>[] p) &#123;</span><br><span class="line"><span class="comment">// 已知next[j] = k,利用递归的思想求出next[j+1]的值</span></span><br><span class="line"><span class="comment">// 如果已知next[j] = k,如何求出next[j+1]呢?具体算法如下:</span></span><br><span class="line"><span class="comment">// 1. 如果p[j] = p[k], 则next[j+1] = next[k] + 1;</span></span><br><span class="line"><span class="comment">// 2. 如果p[j] != p[k], 则令k=next[k],如果此时p[j]==p[k],则next[j+1]=k+1,</span></span><br><span class="line"><span class="comment">// 如果不相等,则继续递归前缀索引,令 k=next[k],继续判断,直至k=-1(即k=next[0])或者p[j]=p[k]为止</span></span><br><span class="line"><span class="keyword">int</span> pLen = p.length;</span><br><span class="line"><span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[pLen];</span><br><span class="line"><span class="keyword">int</span> k = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">next[<span class="number">0</span>] = -<span class="number">1</span>; <span class="comment">// next数组中next[0]为-1</span></span><br><span class="line"><span class="keyword">while</span> (j &lt; pLen - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (k == -<span class="number">1</span> || p[j] == p[k]) &#123;</span><br><span class="line">k++;</span><br><span class="line">j++;</span><br><span class="line"><span class="comment">// 修改next数组求法</span></span><br><span class="line"><span class="keyword">if</span> (p[j] != p[k]) &#123;</span><br><span class="line">next[j] = k;<span class="comment">// KMPStringMatcher中只有这一行</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 不能出现p[j] = p[next[j]],所以如果出现这种情况则继续递归,如 k = next[k],</span></span><br><span class="line"><span class="comment">// k = next[[next[k]]</span></span><br><span class="line">next[j] = next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">k = next[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="4-花絮"><a href="#4-花絮" class="headerlink" title="4. 花絮"></a>4. 花絮</h2><p>提到字符串匹配，或者说字符串查找，我们会想到Java中的String类就有一个String.indexOf(String str);方法，那它使用的是什么算法呢？在这里截取JavaSE-1.8的源码：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String.indexOf(String str); 最终会调用该方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Code shared by String and StringBuffer to do searches. The</span></span><br><span class="line"><span class="comment"> * source is the character array being searched, and the target</span></span><br><span class="line"><span class="comment"> * is the string being searched for.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   source       the characters being searched.(源字符数组)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   sourceOffset offset of the source string.(源字符数组偏移量)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   sourceCount  count of the source string.(源字符数组长度)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   target       the characters being searched for.(待搜索的模式字符数组)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   targetOffset offset of the target string.(模式字符数组偏移量)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   targetCount  count of the target string.(模式数组长度)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   fromIndex    the index to begin searching from.(从原字符数组的哪个下标开始查询)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">char</span>[] source, <span class="keyword">int</span> sourceOffset, <span class="keyword">int</span> sourceCount,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">char</span>[] target, <span class="keyword">int</span> targetOffset, <span class="keyword">int</span> targetCount,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">int</span> fromIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fromIndex &gt;= sourceCount) &#123;</span><br><span class="line">        <span class="keyword">return</span> (targetCount == <span class="number">0</span> ? sourceCount : -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        fromIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (targetCount == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> fromIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> first = target[targetOffset];</span><br><span class="line">    <span class="keyword">int</span> max = sourceOffset + (sourceCount - targetCount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = sourceOffset + fromIndex; i &lt;= max; i++) &#123;</span><br><span class="line">        <span class="comment">/* Look for first character. */</span></span><br><span class="line">        <span class="comment">// 找到第一个匹配的字符的位置</span></span><br><span class="line">        <span class="keyword">if</span> (source[i] != first) &#123;</span><br><span class="line">            <span class="keyword">while</span> (++i &lt;= max &amp;&amp; source[i] != first);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Found first character, now look at the rest of v2 *</span></span><br><span class="line"><span class="comment">        if (i &lt;= max) &#123;</span></span><br><span class="line"><span class="comment">            // 找到了第一个匹配的字符，看余下的是否完全匹配</span></span><br><span class="line"><span class="comment">            int j = i + 1;</span></span><br><span class="line"><span class="comment">            int end = j + targetCount - 1;</span></span><br><span class="line"><span class="comment">            for (int k = targetOffset + 1; j &lt; end &amp;&amp; source[j]</span></span><br><span class="line"><span class="comment">                    == target[k]; j++, k++);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            if (j == end) &#123;</span></span><br><span class="line"><span class="comment">                /* Found whole string. */</span></span><br><span class="line">                <span class="keyword">return</span> i - sourceOffset;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果不完全匹配，因为外层for循环中有i++，即i+1继续匹配</span></span><br><span class="line">            <span class="comment">// 故而该方法本质上就是字符串匹配的朴素算法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>通过对代码片段的注释和分析可以看出，Java源码中的String.indexOf(String str); 内部所使用的算法其实就是字符串匹配的朴素算法…</p><p>源码github地址:<br><a href="https://github.com/tianma8023/DataStructure/blob/master/src/tianma/learn/ds/string/main/StringMatchSample.java" target="_blank" rel="noopener">StringMatchSample</a></p><p>重要参考:<br><a href="http://blog.csdn.net/v_july_v/article/details/7041827" target="_blank" rel="noopener">从头到尾彻底理解KMP</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
            <tag> 字符串模式匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的应用之中缀表达式和后缀表达式</title>
      <link href="/post/stack-implementation-infix-and-postfix-expressions/"/>
      <url>/post/stack-implementation-infix-and-postfix-expressions/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><strong>中缀表达式</strong>： 是一个通用的算术或逻辑公式表示方法， 操作符是以中缀形式处于的中间（例：3 + 4），中缀表达式是人们常用的算术表示方法，但是不易被计算机所解析。</p><p><strong>后缀表达式</strong>：是一个通用的算术或逻辑公式表示方法， 操作符是后缀形式处于操作数的后面（例：3 4 +），后缀表达式虽然不是人们所习惯的运算表示方法，但是易被计算机解析。</p><a id="more"></a><p>例如：对于中缀表达式 9+(3-1)*2+10/2 , 其后缀表达式是 9 3 1 - 3 * + 10 2 / + , 那么为了方便计算机解析计算，我们需要将中缀表达式转换成后缀表达式，然后再对后缀表达式进行解析。</p><p><strong>1. 中缀表达式转后缀表达式：</strong></p><ol><li>当读到一个操作数时，立即将它放到输出中。读到的是操作符则需要接着判断是否该入栈。读到的是左圆括号则入栈。</li><li>在读到操作符时，如果栈为空或者栈顶操作符为（，则入栈。如果栈顶操作符不为（，且此操作符优先级小于或等于此时栈顶操作符，则将栈中元素弹出直至 ①遇到左括号 或者 ②栈顶元素为更低优先级 或者 ③栈为空为止，并将当前操作符入栈；否则当前操作符继续入栈。操作符中，+-优先级低，*/优先级高。</li><li>如果遇到一个右括号，那么就将栈中元素弹出并输出直至遇到左括号为止。但是这个左括号只被弹出，并不输出。</li><li>如果读到输入的末尾，若栈不为空则将栈元素弹出直到该栈变成空栈，并将弹出的符号写到输出中。</li></ol><p><strong>“9+(3-1)*2+10/2” 转换过程：</strong></p><table><thead><tr><th>操作过程</th><th>栈中元素</th><th>输出</th></tr></thead><tbody><tr><td>读入 9，输出</td><td></td><td>9</td></tr><tr><td>读入 +，栈为空，规则2，入栈</td><td>+</td><td>9</td></tr><tr><td>读入 ( ，左括号，规则1，入栈</td><td>+ (</td><td>9</td></tr><tr><td>读入 3，输出</td><td>+ (</td><td>9 3</td></tr><tr><td>读入 -，栈顶为（，规则2，入栈</td><td>+ ( -</td><td>9 3</td></tr><tr><td>读入 1，输出</td><td>+ ( -</td><td>9 3 1</td></tr><tr><td>读入 ) ，右括号，规则3，出栈并输出</td><td>+</td><td>9 3 1 -</td></tr><tr><td>读入 *，*优先级高于栈顶+，规则,2，入栈</td><td>+ *</td><td>9 3 1 -</td></tr><tr><td>读入 3，输出</td><td>+ *</td><td>9 3 1 - 3</td></tr><tr><td>读入 +，+优先级低于栈顶*，规则2，栈中元素出栈，当前操作符入栈</td><td>+</td><td>9 3 1 - 3 * +</td></tr><tr><td>读入 10， 输出</td><td>+</td><td>9 3 1 - 3 * + 10</td></tr><tr><td>读入 / ， /优先级高于+，入栈</td><td>+ /</td><td>9 3 1 - 3 * + 10</td></tr><tr><td>读入 2， 输出</td><td>+ /</td><td>9 3 1 - 3 * + 10</td></tr><tr><td>读至末尾，规则4，栈不为空，栈中元素出栈并输出</td><td></td><td>9 3 1 - 3 * + 10 / +</td></tr></tbody></table><p><strong>2. 后缀表达式计算最终结果：</strong></p><ol><li>从左到右遍历表达式的每个数字和符号,遇到是数字则进栈,遇到是运算符则将栈顶两个元素出栈,进行运算并将运算结果进栈；</li><li>遍历完后缀表达式,此时栈中剩余的数字就是运算结果。</li></ol><p><strong>“9 3 1 - 3 * + 10 2 / +” 计算过程：</strong></p><table><thead><tr><th>操作过程</th><th>栈中元素</th></tr></thead><tbody><tr><td>读入 9，入栈</td><td>9</td></tr><tr><td>读入 3，入栈</td><td>9 3</td></tr><tr><td>读入 1，入栈</td><td>9 3 1</td></tr><tr><td>读入 -，运算并将结果入栈</td><td>9 2</td></tr><tr><td>读入 3，入栈</td><td>9 2 3</td></tr><tr><td>读入 *，运算并将结果入栈</td><td>9 6</td></tr><tr><td>读入 +，运算并将结果入栈</td><td>15</td></tr><tr><td>读入 10，入栈</td><td>15 10</td></tr><tr><td>读入 2，入栈</td><td>15 10 2</td></tr><tr><td>读入 /，运算并将结果入栈</td><td>15 5</td></tr><tr><td>读入 +，运算并将结果入栈</td><td>20</td></tr><tr><td>读入完毕，栈中元素即为结果</td><td>20</td></tr></tbody></table><p>简单中缀表达式计算的java实现：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCalcutor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String value;</span><br><span class="line"><span class="keyword">private</span> Integer number;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Item</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.value = value;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">number = Integer.parseInt(value);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> number != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isNumber())</span><br><span class="line"><span class="keyword">return</span> number;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NumberFormatException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAdd</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"+"</span>.equals(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSub</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"-"</span>.equals(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMul</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"*"</span>.equals(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDiv</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"/"</span>.equals(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeftBracket</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"("</span>.equals(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRightBracket</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">")"</span>.equals(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPriority</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isAdd() || isSub())</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (isMul() || isDiv())</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"This is not +, -, *, /"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> value != <span class="keyword">null</span> ? value.toString() : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算结果</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> calStr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String calStr)</span> </span>&#123;</span><br><span class="line">List&lt;Item&gt; infixes = parse(calStr);</span><br><span class="line">List&lt;Item&gt; postfixes = infix2postfix(infixes);</span><br><span class="line"><span class="keyword">return</span> calculateByPostfix(postfixes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用正则表达式将待计算的字符串转化为List&lt;Item&gt;形式 ,如 10/2 -&gt; [10, /, 2]</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> calStr</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Item&gt; <span class="title">parse</span><span class="params">(String calStr)</span> </span>&#123;</span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">"\\D|\\d+"</span>);</span><br><span class="line">Matcher m = pattern.matcher(calStr);</span><br><span class="line">List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;Item&gt;();</span><br><span class="line"><span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">items.add(<span class="keyword">new</span> Item(m.group(<span class="number">0</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中缀表达式转换为后缀表达式</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 1.当读到一个操作数时，立即将它放到输出中。读到的是操作符则需要接着判断是否该入栈。读到的是左圆括号则入栈。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 2.如果遇到一个右括号，那么就将栈中元素弹出并输出直至遇到左括号为止。但是这个左括号只被弹出，并不输出。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 3.在读到操作符时，如果此操作符优先级小于或等于此时栈顶操作符，则将栈中元素弹出直至(1)遇到左括号或者(2)栈顶元素为更低优先级或者(3)</span></span><br><span class="line"><span class="comment"> * 栈为空为止。操作符中，'+''-'优先级最低，'('')'优先级最高。 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 4.如果读到输入的末尾，将栈元素弹出直到该栈变成空栈，将符号写到输出中。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Item&gt; <span class="title">infix2postfix</span><span class="params">(List&lt;Item&gt; infixes)</span> </span>&#123;</span><br><span class="line">List&lt;Item&gt; postfixes = <span class="keyword">new</span> ArrayList&lt;Item&gt;();</span><br><span class="line">Stack&lt;Item&gt; stack = <span class="keyword">new</span> Stack&lt;Item&gt;();</span><br><span class="line"><span class="keyword">for</span> (Item item : infixes) &#123;</span><br><span class="line"><span class="keyword">if</span> (item.isNumber()) &#123;</span><br><span class="line">postfixes.add(item);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.isRightBracket()) &#123;</span><br><span class="line"><span class="comment">// ) 右括号,将栈中元素弹出直至左括号,且左括号和右括号不加入到后缀表达式中</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">Item tmp = stack.pop();</span><br><span class="line"><span class="keyword">if</span> (tmp.isLeftBracket())</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">postfixes.add(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.isLeftBracket()) &#123;</span><br><span class="line"><span class="comment">// ( 左括号,将左括号入栈</span></span><br><span class="line">stack.push(item);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 当前操作符为 +, -, *, /,</span></span><br><span class="line"><span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line"><span class="comment">// 操作符栈为空,则将当前操作符压入栈</span></span><br><span class="line">stack.push(item);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">Item top = stack.peek();</span><br><span class="line"><span class="keyword">if</span> (top.isLeftBracket()) &#123;</span><br><span class="line"><span class="comment">// 操作符栈顶为左括号(,则将当前操作符压入栈</span></span><br><span class="line">stack.push(item);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (item.getPriority() &lt;= top.getPriority()) &#123;</span><br><span class="line"><span class="comment">// 如果此操作符(+,-,*,/)优先级小于或等于此时栈顶操作符</span></span><br><span class="line"><span class="comment">// 则将栈中元素弹出直至(1)遇到左括号或者(2)栈顶元素为更低优先级或者(3)栈为空为止</span></span><br><span class="line"><span class="comment">// 并将弹出的元素加入后缀表达式中,将当前操作符压入栈中</span></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">Item tmp = stack.peek();</span><br><span class="line"><span class="keyword">if</span> (tmp.isLeftBracket() || tmp.getPriority() &lt; item.getPriority()) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">postfixes.add(tmp);</span><br><span class="line">stack.pop();</span><br><span class="line"><span class="keyword">if</span> (stack.isEmpty())</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">stack.push(item);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果当前操作符(+,-,*,/)优先级大于此时栈顶操作符,则将当前操作符压入栈</span></span><br><span class="line">stack.push(item);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果栈中元素不为空,则将栈中元素全部弹出,加入后缀表达式中</span></span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">postfixes.add(stack.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> postfixes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过后缀表达式计算数值</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 1. 从左到右遍历表达式的每个数字和符号,遇到是数字则进栈,遇到是运算符则将栈顶两个元素出栈,进行运算并将运算结果进栈&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 2. 遍历完后缀表达式,此时栈中剩余的数字就是运算结果</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> postfixes</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calculateByPostfix</span><span class="params">(List&lt;Item&gt; postfixes)</span> </span>&#123;</span><br><span class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span> (Item item : postfixes) &#123;</span><br><span class="line"><span class="keyword">if</span> (item.isNumber()) &#123;</span><br><span class="line">stack.push(item.getNumber());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 运算符</span></span><br><span class="line"><span class="keyword">int</span> num1 = stack.pop();</span><br><span class="line"><span class="keyword">int</span> num2 = stack.pop();</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"><span class="keyword">if</span> (item.isAdd()) &#123;</span><br><span class="line">result = num2 + num1;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.isSub()) &#123;</span><br><span class="line">result = num2 - num1;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.isMul()) &#123;</span><br><span class="line">result = num2 * num1;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.isDiv()) &#123;</span><br><span class="line">result = num2 / num1;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Operator invalid : "</span> + item.value);</span><br><span class="line">&#125;</span><br><span class="line">stack.push(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stack.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SimpleCalcutor calcutor = <span class="keyword">new</span> SimpleCalcutor();</span><br><span class="line">String calStr = <span class="string">"9+(3-1)*3+10/2"</span>;</span><br><span class="line"><span class="keyword">int</span> result = calcutor.calculate(calStr);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>源码github地址：<br><a href="https://github.com/tianma8023/DataStructure/blob/master/src/tianma/learn/ds/lineartable/main/SimpleCalcutor.java" target="_blank" rel="noopener">SimpleCalculator</a></p><p>参考链接：<br><a href="http://blog.csdn.net/mvpsendoh/article/details/6440559" target="_blank" rel="noopener">利用栈将中缀表达式转换成后缀表达式</a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm &amp; Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android获取图片压缩后的Bitmap避免OOM</title>
      <link href="/post/android-copress-bitmap-to-avoid-OOM/"/>
      <url>/post/android-copress-bitmap-to-avoid-OOM/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>OOM即Out Of Memory的简称，Android平台避免OOM异常的发生是非常有必要的。而在Android中加载大量大图便可能会导致OOM异常的出现，解决的办法之一就是加载图片之前对图片进行压缩然后再获取图片对应的Bitmap对象，那么应该如何操作呢？ <a id="more"></a>如下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过图片的绝对路径来获取对应的压缩后的Bitmap对象</span></span><br><span class="line"><span class="comment"> */</span>x</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">getCompressedBitmap</span><span class="params">(String filePath, <span class="keyword">int</span> requireWidth,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> requireHeight)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 第一次解析将inJustDecodeBounds设置为true,用以获取图片大小,并且不需要将Bitmap对象加载到内存中</span></span><br><span class="line">BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line">BitmapFactory.decodeFile(filePath, options); <span class="comment">// 第一次解析</span></span><br><span class="line"><span class="comment">// 计算inSampleSize的值,并且赋值给Options.inSampleSize</span></span><br><span class="line">options.inSampleSize = calculateInSampleSize(options, requireWidth,</span><br><span class="line">requireHeight);</span><br><span class="line"><span class="comment">// 使用获取到的inSampleSize再次解析图片</span></span><br><span class="line">options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> BitmapFactory.decodeFile(filePath, options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过图片资源id获取图片对应的压缩后的Bitmap对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">getCompressedBitmap</span><span class="params">(Resources res, <span class="keyword">int</span> resId, <span class="keyword">int</span> requiredWidth, <span class="keyword">int</span> requiredHeight)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">BitmapFactory.Options options = <span class="keyword">new</span> BitmapFactory.Options();</span><br><span class="line">options.inJustDecodeBounds = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">BitmapFactory.decodeResource(res, resId, options);<span class="comment">// 第一次解析</span></span><br><span class="line">options.inSampleSize = calculateInSampleSize(options, requiredWidth,</span><br><span class="line">requiredHeight);</span><br><span class="line"></span><br><span class="line">options.inJustDecodeBounds = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> BitmapFactory.decodeResource(res, resId, options);<span class="comment">// 第一次解析</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算压缩的inSampleSize的值,该值会在宽高上都进行压缩(也就是压缩前后比例是inSampleSize的平方倍)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateInSampleSize</span><span class="params">(BitmapFactory.Options options,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">int</span> requireWidth, <span class="keyword">int</span> requireHeight)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取源图片的实际的宽度和高度</span></span><br><span class="line"><span class="keyword">int</span> realWidth = options.outWidth;</span><br><span class="line"><span class="keyword">int</span> realHeight = options.outHeight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> inSampleSize = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (realWidth &gt; requireWidth || realHeight &gt; requireHeight) &#123;</span><br><span class="line"><span class="comment">// 计算出实际的宽高与目标宽高的比例</span></span><br><span class="line"><span class="keyword">int</span> widthRatio = Math.round((<span class="keyword">float</span>) realWidth</span><br><span class="line">/ (<span class="keyword">float</span>) requireWidth);</span><br><span class="line"><span class="keyword">int</span> heightRatio = Math.round((<span class="keyword">float</span>) realHeight</span><br><span class="line">/ (<span class="keyword">float</span>) requireHeight);</span><br><span class="line"><span class="comment">// 选择宽高比例最小的值赋值给inSampleSize,这样可以保证最终图片的宽高一定会大于或等于目标的宽高</span></span><br><span class="line">inSampleSize = widthRatio &lt; heightRatio ? widthRatio : heightRatio;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> inSampleSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>以上代码中，有一点值得商榷</strong>：<br>到底是要让图片显示完全还是让图片宽高和需要的宽高一致呢？<br>如果需要让图片宽高和需要的宽高一致的话，就选择比率小的:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inSampleSize = widthRatio &lt; heightRatio ? widthRatio : heightRatio;</span><br></pre></td></tr></table></figure></div><p>如果需要让图片显示完全的话，就选择比率大的：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">inSampleSize = widthRatio &gt; heightRatio ? widthRatio : heightRatio;</span><br></pre></td></tr></table></figure></div><p>如果两者都要兼顾的话，就让方法多设置参数，让调用者决定去吧！ :)</p><p>参考链接：<br><a href="http://developer.android.com/training/displaying-bitmaps/index.html" target="_blank" rel="noopener">Displaying Bitmaps Efficiently</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/9316683" target="_blank" rel="noopener">Android高效加载大图、多图解决方案，有效避免程序OOM</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitmap </tag>
            
            <tag> OOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android根据图片Uri获取图片绝对路径</title>
      <link href="/post/android-get-image-real-path-from-uri/"/>
      <url>/post/android-get-image-real-path-from-uri/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>当我们需要选择并获取图片将其展示出来时，一般会这样处理：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入选择图片的界面</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">selectImage</span><span class="params">()</span></span>&#123;</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">intent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">startActivityForResult(intent, YOUR_CHOOSE_IMAGE_REQUEST_CODE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在onActivityResult()回调方法中进行数据获取</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ... 进行一些判断处理</span></span><br><span class="line">        Uri uri = data.getData();</span><br><span class="line">        <span class="comment">// ... 接下来进行图片显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>以上可以看出我们获取的是Uri类型的数据，要显示图片可以先根据Uri获取图片的位置，然后再显示在界面上，那么如何根据Uri来获取图片的绝对路径呢？ <a id="more"></a>这涉及到Android版本适配问题，因为Android Api版本不同，获取Uri对应的图片绝对路径也不一样，那么需要对不同的Api进行适配：</p><blockquote><p><strong>2017-7-14 更新</strong>：感谢朋友们的反馈，之前的写法因为没有考虑全面，会在 api&gt;=19 时出现空指针异常，这里将代码更新。如遇问题，烦请留言反馈。</p></blockquote><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据Uri获取图片的绝对路径</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context 上下文对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uri     图片的Uri</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果Uri对应的图片存在, 那么返回该图片的绝对路径, 否则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRealPathFromUri</span><span class="params">(Context context, Uri uri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sdkVersion = Build.VERSION.SDK_INT;</span><br><span class="line">    <span class="keyword">if</span> (sdkVersion &gt;= <span class="number">19</span>) &#123; <span class="comment">// api &gt;= 19</span></span><br><span class="line">        <span class="keyword">return</span> getRealPathFromUriAboveApi19(context, uri);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// api &lt; 19</span></span><br><span class="line">        <span class="keyword">return</span> getRealPathFromUriBelowAPI19(context, uri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配api19以下(不包括api19),根据uri获取图片的绝对路径</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context 上下文对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uri     图片的Uri</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果Uri对应的图片存在, 那么返回该图片的绝对路径, 否则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getRealPathFromUriBelowAPI19</span><span class="params">(Context context, Uri uri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getDataColumn(context, uri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配api19及以上,根据uri获取图片的绝对路径</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> context 上下文对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uri     图片的Uri</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果Uri对应的图片存在, 那么返回该图片的绝对路径, 否则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"NewApi"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getRealPathFromUriAboveApi19</span><span class="params">(Context context, Uri uri)</span> </span>&#123;</span><br><span class="line">    String filePath = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (DocumentsContract.isDocumentUri(context, uri)) &#123;</span><br><span class="line">        <span class="comment">// 如果是document类型的 uri, 则通过document id来进行处理</span></span><br><span class="line">        String documentId = DocumentsContract.getDocumentId(uri);</span><br><span class="line">        <span class="keyword">if</span> (isMediaDocument(uri)) &#123; <span class="comment">// MediaProvider</span></span><br><span class="line">            <span class="comment">// 使用':'分割</span></span><br><span class="line">            String id = documentId.split(<span class="string">":"</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            String selection = MediaStore.Images.Media._ID + <span class="string">"=?"</span>;</span><br><span class="line">            String[] selectionArgs = &#123;id&#125;;</span><br><span class="line">            filePath = getDataColumn(context, MediaStore.Images.Media.EXTERNAL_CONTENT_URI, selection, selectionArgs);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDownloadsDocument(uri)) &#123; <span class="comment">// DownloadsProvider</span></span><br><span class="line">            Uri contentUri = ContentUris.withAppendedId(Uri.parse(<span class="string">"content://downloads/public_downloads"</span>), Long.valueOf(documentId));</span><br><span class="line">            filePath = getDataColumn(context, contentUri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"content"</span>.equalsIgnoreCase(uri.getScheme()))&#123;</span><br><span class="line">        <span class="comment">// 如果是 content 类型的 Uri</span></span><br><span class="line">        filePath = getDataColumn(context, uri, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"file"</span>.equals(uri.getScheme())) &#123;</span><br><span class="line">        <span class="comment">// 如果是 file 类型的 Uri,直接获取图片对应的路径</span></span><br><span class="line">        filePath = uri.getPath();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> filePath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取数据库表中的 _data 列，即返回Uri对应的文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getDataColumn</span><span class="params">(Context context, Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">    String path = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    String[] projection = <span class="keyword">new</span> String[]&#123;MediaStore.Images.Media.DATA&#125;;</span><br><span class="line">    Cursor cursor = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (cursor != <span class="keyword">null</span> &amp;&amp; cursor.moveToFirst()) &#123;</span><br><span class="line">            <span class="keyword">int</span> columnIndex = cursor.getColumnIndexOrThrow(projection[<span class="number">0</span>]);</span><br><span class="line">            path = cursor.getString(columnIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cursor != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cursor.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uri the Uri to check</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Whether the Uri authority is MediaProvider</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMediaDocument</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"com.android.providers.media.documents"</span>.equals(uri.getAuthority());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uri the Uri to check</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Whether the Uri authority is DownloadsProvider</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDownloadsDocument</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"com.android.providers.downloads.documents"</span>.equals(uri.getAuthority());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>以上便可以获取Uri对应的图片的绝对路径，然后就可以愉快的做我们想做的事情咯~ </p><p>最后，附上一个小demo，可以戳 <a href="https://github.com/tianma8023/PhotoChooserSample" target="_blank" rel="noopener">这里</a></p><p>参考链接:<br><a href="https://stackoverflow.com/a/20559418" target="_blank" rel="noopener">Android Gallery on KitKat returns different Uri for Intent.ACTION_GET_CONTENT</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Real Path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android获取Bitmap在其ImageView中的偏移量</title>
      <link href="/post/android-get-Bitmap-offset-in-ImageView/"/>
      <url>/post/android-get-Bitmap-offset-in-ImageView/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在ImageView中设置不同的scaleType(包括center, centerInside, centerCrop, fitXY, fitCenter, fitStart, fitEnd, matrix)属性时，ImageView中实际的图片(也就是Bitmap)会根据不同的scaleType属性来确定自己相对于ImageView的位置。 <a id="more"></a><br>例如：</p><ul><li>fitCenter:<br><img alt="" data-src="http://upload-images.jianshu.io/upload_images/448665-6ddd30b3b4b32425.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li><li>fitStart:<br><img alt="" data-src="http://upload-images.jianshu.io/upload_images/448665-29940c94836deb90.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></li></ul><p>图片中的天蓝色是我给ImageView设置的backgroud属性，可以看出Bitmap相对于ImageView的位置与scaleType属性是相关的。<br>那么，如何获取Bitmap在其ImageView中的偏移量（也就是在x和y方向上的像素偏移量）呢？代码片段如下：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Bitmap在ImageView中的偏移量数组,其中第0个值表示在水平方向上的偏移值,第1个值表示在垂直方向上的偏移值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> imageView</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> includeLayout 在计算偏移的时候是否要考虑到布局的因素,如果要考虑该因素则为true,否则为false</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the offsets of the bitmap inside the imageview, offset[0] means horizontal offset, offset[1] means vertical offset</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] getBitmapOffset(ImageView imageView, <span class="keyword">boolean</span> includeLayout) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] offset = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">float</span>[] values = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">    Matrix matrix = imageView.getImageMatrix();</span><br><span class="line">    matrix.getValues(values);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// x方向上的偏移量(单位px)</span></span><br><span class="line">    offset[<span class="number">0</span>] = (<span class="keyword">int</span>) values[<span class="number">2</span>];</span><br><span class="line">    <span class="comment">// y方向上的偏移量(单位px)</span></span><br><span class="line">    offset[<span class="number">1</span>] = (<span class="keyword">int</span>) values[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (includeLayout) &#123;</span><br><span class="line">        ViewGroup.MarginLayoutParams params = (ViewGroup.MarginLayoutParams) imageView.getLayoutParams();</span><br><span class="line">        <span class="keyword">int</span> paddingTop = imageView.getPaddingTop();</span><br><span class="line">        <span class="keyword">int</span> paddingLeft = imageView.getPaddingLeft();</span><br><span class="line"></span><br><span class="line">        offset[<span class="number">0</span>] += paddingLeft + params.leftMargin;</span><br><span class="line">        offset[<span class="number">1</span>] += paddingTop + params.topMargin;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面的代码中<strong>Matrix</strong>类实际上是一个3*3的矩阵，看Android源码：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Matrix</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSCALE_X = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSKEW_X  = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MTRANS_X = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSKEW_Y  = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSCALE_Y = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MTRANS_Y = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MPERSP_0 = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MPERSP_1 = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MPERSP_2 = <span class="number">8</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其中<em>MTRANS_X</em>，<em>MTRANS_Y</em>字段分别表示x和y方向上的平移量。所以在代码片段中会出现：</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="JAVA"><figure class="highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">offset[<span class="number">0</span>] = (<span class="keyword">int</span>) values[<span class="number">2</span>];</span><br><span class="line">offset[<span class="number">1</span>] = (<span class="keyword">int</span>) values[<span class="number">5</span>];</span><br></pre></td></tr></table></figure></div><p>参考链接：<br><a href="http://stackoverflow.com/questions/6023549/android-how-to-get-the-image-edge-x-y-position-inside-imageview#answer-8740600" target="_blank" rel="noopener">android - how to get the image edge x/y position inside imageview</a><br><a href="http://biandroid.iteye.com/blog/1399462" target="_blank" rel="noopener">Android中图像变换Matrix的原理、代码验证和应用</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3.4在内存中生成zip压缩文件</title>
      <link href="/post/python3-generate-zip-files-in-memory/"/>
      <url>/post/python3-generate-zip-files-in-memory/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>最近使用Django1.8.5搭建了一个Web项目，用来生成Android客户端的皮肤apk，相当于一个在线的皮肤apk生成工具，于是就理所当然的需要进行在线的下载apk的操作。由于Android项目比较大，一种主题皮肤对应的apk不止一个，一次性下载多个文件的话，于是选择打包下载。 <a id="more"></a><br>本文在<a href="http://oldj.net/article/in-memory-zip-in-python/" target="_blank" rel="noopener">使用Python在内存中生成zip文件</a>的基础上也进行了小的修改。主要是原文的生产环境是Python2.x，而我使用的是Python3.4，在语法上有些小的变动。</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PYTHON"><figure class="highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !user/bin/env python3</span></span><br><span class="line"><span class="comment"># -*-coding : utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">u'''</span></span><br><span class="line"><span class="string">Create zip file in memory.</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InMemoryZIP</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># create the in-memory file-like object</span></span><br><span class="line">        self.in_memory_zip = BytesIO()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, filename_in_zip, file_contents)</span>:</span></span><br><span class="line">        <span class="string">""" Appends a file with name filename_in_zip \</span></span><br><span class="line"><span class="string">        and contents of file_contents to the in-memory zip.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># create a handle to the in-memory zip in append mode</span></span><br><span class="line">        zf = zipfile.ZipFile(self.in_memory_zip, <span class="string">'a'</span>,</span><br><span class="line">                             zipfile.ZIP_DEFLATED, <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># write the file to the in-memory zip</span></span><br><span class="line">        zf.writestr(filename_in_zip, file_contents)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># mark the files as having been created on Windows</span></span><br><span class="line">        <span class="comment"># so that Unix permissions are not inferred as 0000</span></span><br><span class="line">        <span class="keyword">for</span> zfile <span class="keyword">in</span> zf.filelist:</span><br><span class="line">            zfile.create_system = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">appendfile</span><span class="params">(self, file_path, file_name=None)</span>:</span></span><br><span class="line">        <span class="string">""" Read a file with path file_path \</span></span><br><span class="line"><span class="string">        and append to in-memory zip with name file_name.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> file_name <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            file_name = os.path.split(file_path)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        f = open(file_path, <span class="string">'rb'</span>)</span><br><span class="line">        file_contents = f.read()</span><br><span class="line">        self.append(file_name, file_contents)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">""" Returns a string with the contents of the in-memory zip.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.in_memory_zip.seek(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> self.in_memory_zip.read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writetofile</span><span class="params">(self, filename)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Write the in-memory zip to a file</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        f = open(filename, <span class="string">'wb'</span>)</span><br><span class="line">        f.write(self.read())</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    imz = InMemoryZIP()</span><br><span class="line">    imz.appendfile(<span class="string">'a.txt'</span>).append(<span class="string">'test.txt'</span>, <span class="string">'This is content in test.txt'</span>)</span><br><span class="line">    imz.writetofile(<span class="string">'test.zip'</span>)</span><br></pre></td></tr></table></figure></div><p>与原链接中的博文相比主要改动如下：<br>　　将原文的 <code>import StringIO</code> 改成了 <code>from io import BytesIO</code>，主要就是 Python2.x 和 Python3.x 的格式区别。其实也可以将 <code>import StringIO</code> 改成 <code>from io import BytesIO as StringIO</code> ，这样的话在代码中就不需要进行替换，但是可能会误导其他读这段代码的人。</p><p>在Django中简单的使用方法为:</p><div class="highlight-wrap" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false" data-rel="PYTHON"><figure class="highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadFiles</span><span class="params">(request)</span>:</span></span><br><span class="line">    fns = [<span class="string">"/apk/foo1.apk"</span>,  <span class="string">"/apk/foo2.apk"</span>,  <span class="string">"/apk/foo3.apk"</span>,]</span><br><span class="line">    imz = InMemoryZip()</span><br><span class="line">    <span class="keyword">for</span> fn <span class="keyword">in</span> fns:</span><br><span class="line">        imz.appendfile(fn)</span><br><span class="line">    data = img.read()</span><br><span class="line"></span><br><span class="line">    response = HttpResponse(content_type=<span class="string">"application/octet-stream"</span>)</span><br><span class="line">    response[<span class="string">"Content-Disposition"</span>] = <span class="string">"attachment; %s"</span> % <span class="string">"foo.zip"</span></span><br><span class="line">    response[<span class="string">"Content-Length"</span>] = len(data)</span><br><span class="line">    response.write(data)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></div><p>与原链接的博文相比改动就是 <code>HttpResponse</code> 中的参数要使用 <code>content_type</code> 而不是 <code>mimetype</code><br>最后引用原文的一段话:</p><blockquote><p>这个方法虽然很方便，不过很耗资源，我试着用它在 Django 里压缩一个 1.4G 的文本文件，差不多用了 8 分钟，期间 CPU 使用率一直是 100%，所以，如果要压缩的是大文件，或者压缩任务比较频繁，可能需要认真处理一下性能问题。</p></blockquote><p>也就是说这个方法适合下载小文件，要是下载的文件较大的话，建议阅读以下文章:</p><ul><li><a href="http://www.cnblogs.com/linxiyue/p/4187484.html" target="_blank" rel="noopener">Django 大文件下载</a></li><li><a href="http://www.jianshu.com/p/2ce715671340" target="_blank" rel="noopener">Django 实现下载文件功能</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> zip压缩 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
